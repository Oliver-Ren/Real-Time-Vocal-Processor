

================================================================
== Vivado HLS Report for 'IFFT'
================================================================
* Date:           Sun Dec  7 14:25:12 2014

* Version:        2013.2 (build date: Thu Jun 13 16:07:59 PM 2013)
* Project:        hls.prj
* Solution:       solution2
* Product family: zynq zynq_fpv6 
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.75|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+------+-------------+-----------------+-----------+-----------+----------------+----------+
        |                 |       Latency      |    Iteration    |  Initiation Interval  |      Trip      |          |
        |    Loop Name    |  min |     max     |     Latency     |  achieved |   target  |      Count     | Pipelined|
        +-----------------+------+-------------+-----------------+-----------+-----------+----------------+----------+
        |- Loop 1         |  2555|         2555|                5|          -|          -|             511|    no    |
        |- Loop 2         |     ?|            ?|                ?|          -|          -|              10|    no    |
        | + Loop 2.1      |     ?|            ?| 8 ~ 46170898397 |          -|          -|               ?|    no    |
        |  ++ Loop 2.1.1  |     0|  46170898389|               43|          -|          -| 0 ~ 1073741823 |    no    |
        |- Loop 3         |  2048|         2048|                2|          -|          -|            1024|    no    |
        +-----------------+------+-------------+-----------------+-----------+-----------+----------------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
|ShiftMemory      |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Shift register: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 60
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / (!exitcond8)
	8  / (exitcond8)
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	3  / true
8 --> 
	59  / (exitcond7)
	9  / (!exitcond7)
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / (icmp)
	8  / (!icmp)
15 --> 
	16  / true
16 --> 
	9  / (exitcond6)
	17  / (!exitcond6)
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	16  / true
59 --> 
	60  / (!exitcond)
60 --> 
	59  / true
* FSM state operations: 

 <State 1>: 0.00ns
ST_1: wreal_V [1/1] 0.00ns
entry:0  %wreal_V = alloca [512 x i32], align 4          ; <[512 x i32]*> [#uses=4]

ST_1: wimag_V [1/1] 0.00ns
entry:1  %wimag_V = alloca [512 x i32], align 4          ; <[512 x i32]*> [#uses=4]

ST_1: stg_63 [2/2] 0.00ns
entry:2  call fastcc void @bitrp([1024 x i32]* %xreal_V, [1024 x i32]* %ximag_V)


 <State 2>: 2.39ns
ST_2: stg_64 [1/2] 0.00ns
entry:2  call fastcc void @bitrp([1024 x i32]* %xreal_V, [1024 x i32]* %ximag_V)

ST_2: wreal_V_addr [1/1] 0.00ns
entry:3  %wreal_V_addr = getelementptr [512 x i32]* %wreal_V, i64 0, i64 0 ; <i32*> [#uses=1]

ST_2: stg_66 [1/1] 2.39ns
entry:4  store i32 1048576, i32* %wreal_V_addr, align 8

ST_2: wimag_V_addr [1/1] 0.00ns
entry:5  %wimag_V_addr = getelementptr [512 x i32]* %wimag_V, i64 0, i64 0 ; <i32*> [#uses=1]

ST_2: stg_68 [1/1] 2.39ns
entry:6  store i32 0, i32* %wimag_V_addr, align 8

ST_2: stg_69 [1/1] 1.39ns
entry:7  br label %bb12


 <State 3>: 3.61ns
ST_3: indvar1 [1/1] 0.00ns
bb12:0  %indvar1 = phi i9 [ %j, %bb6 ], [ 0, %entry ]   ; <i9> [#uses=3]

ST_3: j [1/1] 1.84ns
bb12:1  %j = add i9 %indvar1, 1                         ; <i9> [#uses=2]

ST_3: empty [1/1] 0.00ns
bb12:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 511, i64 511, i64 511) nounwind ; <i32> [#uses=0]

ST_3: exitcond8 [1/1] 2.03ns
bb12:3  %exitcond8 = icmp eq i9 %indvar1, -1            ; <i1> [#uses=1]

ST_3: stg_74 [1/1] 1.57ns
bb12:4  br i1 %exitcond8, label %bb34, label %bb6

ST_3: tmp [1/1] 0.00ns
bb6:0  %tmp = zext i9 %indvar1 to i64                  ; <i64> [#uses=2]

ST_3: wimag_V_addr_1 [1/1] 0.00ns
bb6:1  %wimag_V_addr_1 = getelementptr [512 x i32]* %wimag_V, i64 0, i64 %tmp ; <i32*> [#uses=1]

ST_3: wimag_V_load [2/2] 2.39ns
bb6:2  %wimag_V_load = load i32* %wimag_V_addr_1, align 4 ; <i32> [#uses=2]

ST_3: wreal_V_addr_1 [1/1] 0.00ns
bb6:6  %wreal_V_addr_1 = getelementptr [512 x i32]* %wreal_V, i64 0, i64 %tmp ; <i32*> [#uses=1]

ST_3: wreal_V_load [2/2] 2.39ns
bb6:7  %wreal_V_load = load i32* %wreal_V_addr_1, align 4 ; <i32> [#uses=2]


 <State 4>: 8.75ns
ST_4: wimag_V_load [1/2] 2.39ns
bb6:2  %wimag_V_load = load i32* %wimag_V_addr_1, align 4 ; <i32> [#uses=2]

ST_4: OP1_V_cast1 [1/1] 0.00ns
bb6:3  %OP1_V_cast1 = sext i32 %wimag_V_load to i52    ; <i52> [#uses=1]

ST_4: OP1_V_cast [1/1] 0.00ns
bb6:4  %OP1_V_cast = sext i32 %wimag_V_load to i45     ; <i45> [#uses=1]

ST_4: r_V [3/3] 6.36ns
bb6:5  %r_V = mul i45 %OP1_V_cast, 6396                ; <i45> [#uses=1]

ST_4: wreal_V_load [1/2] 2.39ns
bb6:7  %wreal_V_load = load i32* %wreal_V_addr_1, align 4 ; <i32> [#uses=2]

ST_4: OP1_V_7_cast1 [1/1] 0.00ns
bb6:8  %OP1_V_7_cast1 = sext i32 %wreal_V_load to i45  ; <i45> [#uses=1]

ST_4: OP1_V_7_cast [1/1] 0.00ns
bb6:9  %OP1_V_7_cast = sext i32 %wreal_V_load to i52   ; <i52> [#uses=1]

ST_4: r_V_131 [3/3] 6.36ns
bb6:10  %r_V_131 = mul i52 %OP1_V_7_cast, 1048556       ; <i52> [#uses=1]

ST_4: r_V_133 [3/3] 6.36ns
bb6:17  %r_V_133 = mul i52 %OP1_V_cast1, 1048556        ; <i52> [#uses=1]

ST_4: r_V_134 [3/3] 6.36ns
bb6:18  %r_V_134 = mul i45 %OP1_V_7_cast1, 6396         ; <i45> [#uses=1]


 <State 5>: 6.36ns
ST_5: r_V [2/3] 6.36ns
bb6:5  %r_V = mul i45 %OP1_V_cast, 6396                ; <i45> [#uses=1]

ST_5: r_V_131 [2/3] 6.36ns
bb6:10  %r_V_131 = mul i52 %OP1_V_7_cast, 1048556       ; <i52> [#uses=1]

ST_5: r_V_133 [2/3] 6.36ns
bb6:17  %r_V_133 = mul i52 %OP1_V_cast1, 1048556        ; <i52> [#uses=1]

ST_5: r_V_134 [2/3] 6.36ns
bb6:18  %r_V_134 = mul i45 %OP1_V_7_cast1, 6396         ; <i45> [#uses=1]


 <State 6>: 6.36ns
ST_6: r_V [1/3] 6.36ns
bb6:5  %r_V = mul i45 %OP1_V_cast, 6396                ; <i45> [#uses=1]

ST_6: r_V_131 [1/3] 6.36ns
bb6:10  %r_V_131 = mul i52 %OP1_V_7_cast, 1048556       ; <i52> [#uses=1]

ST_6: r_V_133 [1/3] 6.36ns
bb6:17  %r_V_133 = mul i52 %OP1_V_cast1, 1048556        ; <i52> [#uses=1]

ST_6: r_V_134 [1/3] 6.36ns
bb6:18  %r_V_134 = mul i45 %OP1_V_7_cast1, 6396         ; <i45> [#uses=1]


 <State 7>: 5.43ns
ST_7: rhs_V_cast [1/1] 0.00ns
bb6:11  %rhs_V_cast = sext i45 %r_V to i52              ; <i52> [#uses=1]

ST_7: r_V_132 [1/1] 3.04ns
bb6:12  %r_V_132 = sub i52 %r_V_131, %rhs_V_cast        ; <i52> [#uses=1]

ST_7: tmp_17 [1/1] 0.00ns
bb6:13  %tmp_17 = call i32 @_ssdm_op_PartSelect.i32.i52.i32.i32(i52 %r_V_132, i32 20, i32 51) ; <i32> [#uses=1]

ST_7: tmp_18 [1/1] 0.00ns
bb6:14  %tmp_18 = zext i9 %j to i64                     ; <i64> [#uses=2]

ST_7: wreal_V_addr_2 [1/1] 0.00ns
bb6:15  %wreal_V_addr_2 = getelementptr [512 x i32]* %wreal_V, i64 0, i64 %tmp_18 ; <i32*> [#uses=1]

ST_7: stg_103 [1/1] 2.39ns
bb6:16  store i32 %tmp_17, i32* %wreal_V_addr_2, align 4

ST_7: lhs_V_cast [1/1] 0.00ns
bb6:19  %lhs_V_cast = sext i45 %r_V_134 to i52          ; <i52> [#uses=1]

ST_7: r_V_135 [1/1] 3.04ns
bb6:20  %r_V_135 = add i52 %r_V_133, %lhs_V_cast        ; <i52> [#uses=1]

ST_7: tmp_20 [1/1] 0.00ns
bb6:21  %tmp_20 = call i32 @_ssdm_op_PartSelect.i32.i52.i32.i32(i52 %r_V_135, i32 20, i32 51) ; <i32> [#uses=1]

ST_7: wimag_V_addr_2 [1/1] 0.00ns
bb6:22  %wimag_V_addr_2 = getelementptr [512 x i32]* %wimag_V, i64 0, i64 %tmp_18 ; <i32*> [#uses=1]

ST_7: stg_108 [1/1] 2.39ns
bb6:23  store i32 %tmp_20, i32* %wimag_V_addr_2, align 4

ST_7: stg_109 [1/1] 0.00ns
bb6:24  br label %bb12


 <State 8>: 3.87ns
ST_8: indvar2 [1/1] 0.00ns
bb34:0  %indvar2 = phi i4 [ %indvar_next1, %bb33 ], [ 0, %bb12 ] ; <i4> [#uses=2]

ST_8: m [1/1] 0.00ns
bb34:1  %m = phi i32 [ %m_1, %bb33 ], [ 2, %bb12 ]      ; <i32> [#uses=5]

ST_8: empty_151 [1/1] 0.00ns
bb34:2  %empty_151 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 10, i64 10, i64 10) nounwind ; <i32> [#uses=0]

ST_8: exitcond7 [1/1] 1.88ns
bb34:3  %exitcond7 = icmp eq i4 %indvar2, -6            ; <i1> [#uses=1]

ST_8: indvar_next1 [1/1] 0.80ns
bb34:4  %indvar_next1 = add i4 %indvar2, 1              ; <i4> [#uses=1]

ST_8: stg_115 [1/1] 1.39ns
bb34:5  br i1 %exitcond7, label %bb39, label %bb32.preheader

ST_8: tmp_s [1/1] 0.00ns
bb32.preheader:0  %tmp_s = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %m, i32 1, i32 31) ; <i31> [#uses=2]

ST_8: tmp_21 [1/1] 0.00ns
bb32.preheader:1  %tmp_21 = sext i31 %tmp_s to i32                ; <i32> [#uses=1]

ST_8: tmp_21_cast [1/1] 0.00ns
bb32.preheader:2  %tmp_21_cast = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %m, i32 1, i32 30) ; <i30> [#uses=1]

ST_8: tmp6 [1/1] 2.50ns
bb32.preheader:3  %tmp6 = icmp sgt i31 %tmp_s, 0                  ; <i1> [#uses=1]

ST_8: smax7 [1/1] 1.37ns
bb32.preheader:4  %smax7 = select i1 %tmp6, i30 %tmp_21_cast, i30 0 ; <i30> [#uses=1]

ST_8: stg_121 [1/1] 1.57ns
bb32.preheader:5  br label %bb32


 <State 9>: 6.36ns
ST_9: indvar [1/1] 0.00ns
bb32:0  %indvar = phi i32 [ 0, %bb32.preheader ], [ %indvar_next, %bb30 ] ; <i32> [#uses=2]

ST_9: k [6/6] 6.36ns
bb32:1  %k = mul i32 %m, %indvar                        ; <i32> [#uses=3]

ST_9: indvar_next [1/1] 2.44ns
bb32:4  %indvar_next = add i32 %indvar, 1               ; <i32> [#uses=1]


 <State 10>: 6.36ns
ST_10: k [5/6] 6.36ns
bb32:1  %k = mul i32 %m, %indvar                        ; <i32> [#uses=3]


 <State 11>: 6.36ns
ST_11: k [4/6] 6.36ns
bb32:1  %k = mul i32 %m, %indvar                        ; <i32> [#uses=3]


 <State 12>: 6.36ns
ST_12: k [3/6] 6.36ns
bb32:1  %k = mul i32 %m, %indvar                        ; <i32> [#uses=3]


 <State 13>: 6.36ns
ST_13: k [2/6] 6.36ns
bb32:1  %k = mul i32 %m, %indvar                        ; <i32> [#uses=3]


 <State 14>: 8.73ns
ST_14: k [1/6] 6.36ns
bb32:1  %k = mul i32 %m, %indvar                        ; <i32> [#uses=3]

ST_14: tr [1/1] 0.00ns
bb32:2  %tr = call i22 @_ssdm_op_PartSelect.i22.i32.i32.i32(i32 %k, i32 10, i32 31) ; <i22> [#uses=1]

ST_14: icmp [1/1] 2.37ns
bb32:3  %icmp = icmp slt i22 %tr, 1                     ; <i1> [#uses=1]

ST_14: stg_132 [1/1] 0.00ns
bb32:5  br i1 %icmp, label %bb30.preheader, label %bb33

ST_14: m_1 [1/1] 0.00ns
bb33:0  %m_1 = shl i32 %m, 1                            ; <i32> [#uses=1]

ST_14: stg_134 [1/1] 0.00ns
bb33:1  br label %bb34


 <State 15>: 2.44ns
ST_15: tmp11 [1/1] 2.44ns
bb30.preheader:0  %tmp11 = add i32 %k, %tmp_21                    ; <i32> [#uses=1]

ST_15: stg_136 [1/1] 1.55ns
bb30.preheader:1  br label %bb30


 <State 16>: 4.62ns
ST_16: j_1 [1/1] 0.00ns
bb30:0  %j_1 = phi i30 [ %j_4, %bb16 ], [ 0, %bb30.preheader ] ; <i30> [#uses=4]

ST_16: j_1_cast [1/1] 0.00ns
bb30:1  %j_1_cast = zext i30 %j_1 to i32                ; <i32> [#uses=2]

ST_16: index2 [1/1] 2.44ns
bb30:2  %index2 = add i32 %tmp11, %j_1_cast             ; <i32> [#uses=1]

ST_16: index1 [1/1] 2.44ns
bb30:3  %index1 = add i32 %k, %j_1_cast                 ; <i32> [#uses=1]

ST_16: empty_150 [1/1] 0.00ns
bb30:4  %empty_150 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 1073741823, i64 0) nounwind ; <i32> [#uses=0]

ST_16: exitcond6 [1/1] 2.49ns
bb30:5  %exitcond6 = icmp eq i30 %j_1, %smax7           ; <i1> [#uses=1]

ST_16: j_4 [1/1] 2.44ns
bb30:6  %j_4 = add i30 %j_1, 1                          ; <i30> [#uses=1]

ST_16: stg_144 [1/1] 0.00ns
bb30:7  br i1 %exitcond6, label %bb32, label %bb16

ST_16: tmp_105 [1/1] 0.00ns
bb16:0  %tmp_105 = trunc i30 %j_1 to i22                ; <i22> [#uses=1]

ST_16: tmp_26 [1/1] 0.00ns
bb16:1  %tmp_26 = call i32 @_ssdm_op_BitConcatenate.i32.i22.i10(i22 %tmp_105, i10 0) ; <i32> [#uses=1]

ST_16: t [35/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]

ST_16: tmp_27 [1/1] 0.00ns
bb16:3  %tmp_27 = sext i32 %index2 to i64               ; <i64> [#uses=2]

ST_16: ximag_V_addr_1 [1/1] 0.00ns
bb16:7  %ximag_V_addr_1 = getelementptr [1024 x i32]* %ximag_V, i64 0, i64 %tmp_27 ; <i32*> [#uses=2]

ST_16: xreal_V_addr_1 [1/1] 0.00ns
bb16:13  %xreal_V_addr_1 = getelementptr [1024 x i32]* %xreal_V, i64 0, i64 %tmp_27 ; <i32*> [#uses=2]

ST_16: tmp_31 [1/1] 0.00ns
bb16:25  %tmp_31 = sext i32 %index1 to i64               ; <i64> [#uses=2]

ST_16: xreal_V_addr_2 [1/1] 0.00ns
bb16:26  %xreal_V_addr_2 = getelementptr [1024 x i32]* %xreal_V, i64 0, i64 %tmp_31 ; <i32*> [#uses=2]

ST_16: ximag_V_addr_2 [1/1] 0.00ns
bb16:28  %ximag_V_addr_2 = getelementptr [1024 x i32]* %ximag_V, i64 0, i64 %tmp_31 ; <i32*> [#uses=2]


 <State 17>: 4.62ns
ST_17: t [34/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 18>: 4.62ns
ST_18: t [33/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 19>: 4.62ns
ST_19: t [32/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 20>: 4.62ns
ST_20: t [31/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 21>: 4.62ns
ST_21: t [30/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 22>: 4.62ns
ST_22: t [29/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 23>: 4.62ns
ST_23: t [28/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 24>: 4.62ns
ST_24: t [27/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 25>: 4.62ns
ST_25: t [26/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 26>: 4.62ns
ST_26: t [25/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 27>: 4.62ns
ST_27: t [24/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 28>: 4.62ns
ST_28: t [23/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 29>: 4.62ns
ST_29: t [22/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 30>: 4.62ns
ST_30: t [21/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 31>: 4.62ns
ST_31: t [20/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 32>: 4.62ns
ST_32: t [19/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 33>: 4.62ns
ST_33: t [18/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 34>: 4.62ns
ST_34: t [17/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 35>: 4.62ns
ST_35: t [16/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 36>: 4.62ns
ST_36: t [15/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 37>: 4.62ns
ST_37: t [14/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 38>: 4.62ns
ST_38: t [13/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 39>: 4.62ns
ST_39: t [12/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 40>: 4.62ns
ST_40: t [11/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 41>: 4.62ns
ST_41: t [10/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 42>: 4.62ns
ST_42: t [9/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 43>: 4.62ns
ST_43: t [8/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 44>: 4.62ns
ST_44: t [7/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 45>: 4.62ns
ST_45: t [6/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 46>: 4.62ns
ST_46: t [5/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 47>: 4.62ns
ST_47: t [4/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 48>: 4.62ns
ST_48: t [3/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 49>: 4.62ns
ST_49: t [2/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]


 <State 50>: 7.01ns
ST_50: t [1/35] 4.62ns
bb16:2  %t = sdiv i32 %tmp_26, %m                       ; <i32> [#uses=1]

ST_50: tmp_28 [1/1] 0.00ns
bb16:4  %tmp_28 = sext i32 %t to i64                    ; <i64> [#uses=2]

ST_50: wimag_V_addr_3 [1/1] 0.00ns
bb16:5  %wimag_V_addr_3 = getelementptr [512 x i32]* %wimag_V, i64 0, i64 %tmp_28 ; <i32*> [#uses=1]

ST_50: wimag_V_load_1 [2/2] 2.39ns
bb16:6  %wimag_V_load_1 = load i32* %wimag_V_addr_3, align 4 ; <i32> [#uses=1]

ST_50: ximag_V_load_1 [2/2] 2.39ns
bb16:8  %ximag_V_load_1 = load i32* %ximag_V_addr_1, align 4 ; <i32> [#uses=1]

ST_50: wreal_V_addr_3 [1/1] 0.00ns
bb16:11  %wreal_V_addr_3 = getelementptr [512 x i32]* %wreal_V, i64 0, i64 %tmp_28 ; <i32*> [#uses=1]

ST_50: wreal_V_load_1 [2/2] 2.39ns
bb16:12  %wreal_V_load_1 = load i32* %wreal_V_addr_3, align 4 ; <i32> [#uses=1]

ST_50: xreal_V_load_1 [2/2] 2.39ns
bb16:14  %xreal_V_load_1 = load i32* %xreal_V_addr_1, align 4 ; <i32> [#uses=1]


 <State 51>: 8.75ns
ST_51: wimag_V_load_1 [1/2] 2.39ns
bb16:6  %wimag_V_load_1 = load i32* %wimag_V_addr_3, align 4 ; <i32> [#uses=1]

ST_51: ximag_V_load_1 [1/2] 2.39ns
bb16:8  %ximag_V_load_1 = load i32* %ximag_V_addr_1, align 4 ; <i32> [#uses=1]

ST_51: tmp_43 [1/1] 0.00ns
bb16:9  %tmp_43 = sext i32 %ximag_V_load_1 to i52       ; <i52> [#uses=2]

ST_51: tmp_44 [1/1] 0.00ns
bb16:10  %tmp_44 = sext i32 %wimag_V_load_1 to i52       ; <i52> [#uses=2]

ST_51: wreal_V_load_1 [1/2] 2.39ns
bb16:12  %wreal_V_load_1 = load i32* %wreal_V_addr_3, align 4 ; <i32> [#uses=1]

ST_51: xreal_V_load_1 [1/2] 2.39ns
bb16:14  %xreal_V_load_1 = load i32* %xreal_V_addr_1, align 4 ; <i32> [#uses=1]

ST_51: tmp_45 [1/1] 0.00ns
bb16:15  %tmp_45 = sext i32 %xreal_V_load_1 to i52       ; <i52> [#uses=2]

ST_51: tmp_46 [1/1] 0.00ns
bb16:16  %tmp_46 = sext i32 %wreal_V_load_1 to i52       ; <i52> [#uses=2]

ST_51: lhs_V_1_cast [6/6] 6.36ns
bb16:17  %lhs_V_1_cast = mul i52 %tmp_45, %tmp_46        ; <i52> [#uses=1]

ST_51: rhs_V_2_cast [6/6] 6.36ns
bb16:18  %rhs_V_2_cast = mul i52 %tmp_43, %tmp_44        ; <i52> [#uses=1]

ST_51: lhs_V_2_cast [6/6] 6.36ns
bb16:21  %lhs_V_2_cast = mul i52 %tmp_43, %tmp_46        ; <i52> [#uses=1]

ST_51: rhs_V_3_cast [6/6] 6.36ns
bb16:22  %rhs_V_3_cast = mul i52 %tmp_45, %tmp_44        ; <i52> [#uses=1]


 <State 52>: 6.36ns
ST_52: lhs_V_1_cast [5/6] 6.36ns
bb16:17  %lhs_V_1_cast = mul i52 %tmp_45, %tmp_46        ; <i52> [#uses=1]

ST_52: rhs_V_2_cast [5/6] 6.36ns
bb16:18  %rhs_V_2_cast = mul i52 %tmp_43, %tmp_44        ; <i52> [#uses=1]

ST_52: lhs_V_2_cast [5/6] 6.36ns
bb16:21  %lhs_V_2_cast = mul i52 %tmp_43, %tmp_46        ; <i52> [#uses=1]

ST_52: rhs_V_3_cast [5/6] 6.36ns
bb16:22  %rhs_V_3_cast = mul i52 %tmp_45, %tmp_44        ; <i52> [#uses=1]


 <State 53>: 6.36ns
ST_53: lhs_V_1_cast [4/6] 6.36ns
bb16:17  %lhs_V_1_cast = mul i52 %tmp_45, %tmp_46        ; <i52> [#uses=1]

ST_53: rhs_V_2_cast [4/6] 6.36ns
bb16:18  %rhs_V_2_cast = mul i52 %tmp_43, %tmp_44        ; <i52> [#uses=1]

ST_53: lhs_V_2_cast [4/6] 6.36ns
bb16:21  %lhs_V_2_cast = mul i52 %tmp_43, %tmp_46        ; <i52> [#uses=1]

ST_53: rhs_V_3_cast [4/6] 6.36ns
bb16:22  %rhs_V_3_cast = mul i52 %tmp_45, %tmp_44        ; <i52> [#uses=1]


 <State 54>: 6.36ns
ST_54: lhs_V_1_cast [3/6] 6.36ns
bb16:17  %lhs_V_1_cast = mul i52 %tmp_45, %tmp_46        ; <i52> [#uses=1]

ST_54: rhs_V_2_cast [3/6] 6.36ns
bb16:18  %rhs_V_2_cast = mul i52 %tmp_43, %tmp_44        ; <i52> [#uses=1]

ST_54: lhs_V_2_cast [3/6] 6.36ns
bb16:21  %lhs_V_2_cast = mul i52 %tmp_43, %tmp_46        ; <i52> [#uses=1]

ST_54: rhs_V_3_cast [3/6] 6.36ns
bb16:22  %rhs_V_3_cast = mul i52 %tmp_45, %tmp_44        ; <i52> [#uses=1]


 <State 55>: 6.36ns
ST_55: lhs_V_1_cast [2/6] 6.36ns
bb16:17  %lhs_V_1_cast = mul i52 %tmp_45, %tmp_46        ; <i52> [#uses=1]

ST_55: rhs_V_2_cast [2/6] 6.36ns
bb16:18  %rhs_V_2_cast = mul i52 %tmp_43, %tmp_44        ; <i52> [#uses=1]

ST_55: lhs_V_2_cast [2/6] 6.36ns
bb16:21  %lhs_V_2_cast = mul i52 %tmp_43, %tmp_46        ; <i52> [#uses=1]

ST_55: rhs_V_3_cast [2/6] 6.36ns
bb16:22  %rhs_V_3_cast = mul i52 %tmp_45, %tmp_44        ; <i52> [#uses=1]


 <State 56>: 6.36ns
ST_56: lhs_V_1_cast [1/6] 6.36ns
bb16:17  %lhs_V_1_cast = mul i52 %tmp_45, %tmp_46        ; <i52> [#uses=1]

ST_56: rhs_V_2_cast [1/6] 6.36ns
bb16:18  %rhs_V_2_cast = mul i52 %tmp_43, %tmp_44        ; <i52> [#uses=1]

ST_56: lhs_V_2_cast [1/6] 6.36ns
bb16:21  %lhs_V_2_cast = mul i52 %tmp_43, %tmp_46        ; <i52> [#uses=1]

ST_56: rhs_V_3_cast [1/6] 6.36ns
bb16:22  %rhs_V_3_cast = mul i52 %tmp_45, %tmp_44        ; <i52> [#uses=1]

ST_56: ureal_V [2/2] 2.39ns
bb16:27  %ureal_V = load i32* %xreal_V_addr_2, align 4   ; <i32> [#uses=2]

ST_56: uimag_V [2/2] 2.39ns
bb16:29  %uimag_V = load i32* %ximag_V_addr_2, align 4   ; <i32> [#uses=2]


 <State 57>: 7.87ns
ST_57: r_V_136 [1/1] 3.04ns
bb16:19  %r_V_136 = sub i52 %lhs_V_1_cast, %rhs_V_2_cast ; <i52> [#uses=1]

ST_57: treal_V [1/1] 0.00ns
bb16:20  %treal_V = call i32 @_ssdm_op_PartSelect.i32.i52.i32.i32(i52 %r_V_136, i32 20, i32 51) ; <i32> [#uses=2]

ST_57: r_V_137 [1/1] 3.04ns
bb16:23  %r_V_137 = add i52 %rhs_V_3_cast, %lhs_V_2_cast ; <i52> [#uses=1]

ST_57: timag_V [1/1] 0.00ns
bb16:24  %timag_V = call i32 @_ssdm_op_PartSelect.i32.i52.i32.i32(i52 %r_V_137, i32 20, i32 51) ; <i32> [#uses=2]

ST_57: ureal_V [1/2] 2.39ns
bb16:27  %ureal_V = load i32* %xreal_V_addr_2, align 4   ; <i32> [#uses=2]

ST_57: uimag_V [1/2] 2.39ns
bb16:29  %uimag_V = load i32* %ximag_V_addr_2, align 4   ; <i32> [#uses=2]

ST_57: r_V_s [1/1] 2.44ns
bb16:30  %r_V_s = add i32 %treal_V, %ureal_V             ; <i32> [#uses=1]

ST_57: stg_236 [1/1] 2.39ns
bb16:31  store i32 %r_V_s, i32* %xreal_V_addr_2, align 4

ST_57: r_V_11 [1/1] 2.44ns
bb16:32  %r_V_11 = add i32 %timag_V, %uimag_V            ; <i32> [#uses=1]

ST_57: stg_238 [1/1] 2.39ns
bb16:33  store i32 %r_V_11, i32* %ximag_V_addr_2, align 4

ST_57: r_V_12 [1/1] 2.44ns
bb16:34  %r_V_12 = sub i32 %ureal_V, %treal_V            ; <i32> [#uses=1]

ST_57: r_V_13 [1/1] 2.44ns
bb16:36  %r_V_13 = sub i32 %uimag_V, %timag_V            ; <i32> [#uses=1]


 <State 58>: 2.39ns
ST_58: stg_241 [1/1] 2.39ns
bb16:35  store i32 %r_V_12, i32* %xreal_V_addr_1, align 4

ST_58: stg_242 [1/1] 2.39ns
bb16:37  store i32 %r_V_13, i32* %ximag_V_addr_1, align 4

ST_58: stg_243 [1/1] 0.00ns
bb16:38  br label %bb30


 <State 59>: 2.39ns
ST_59: j_2 [1/1] 0.00ns
bb39:0  %j_2 = phi i11 [ %j_3, %bb36 ], [ 0, %bb34 ]    ; <i11> [#uses=3]

ST_59: empty_152 [1/1] 0.00ns
bb39:1  %empty_152 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1024, i64 1024, i64 1024) nounwind ; <i32> [#uses=0]

ST_59: exitcond [1/1] 2.11ns
bb39:2  %exitcond = icmp eq i11 %j_2, -1024             ; <i1> [#uses=1]

ST_59: j_3 [1/1] 1.84ns
bb39:3  %j_3 = add i11 %j_2, 1                          ; <i11> [#uses=1]

ST_59: stg_248 [1/1] 0.00ns
bb39:4  br i1 %exitcond, label %return, label %bb36

ST_59: tmp_22 [1/1] 0.00ns
bb36:0  %tmp_22 = zext i11 %j_2 to i64                  ; <i64> [#uses=2]

ST_59: xreal_V_addr [1/1] 0.00ns
bb36:1  %xreal_V_addr = getelementptr [1024 x i32]* %xreal_V, i64 0, i64 %tmp_22 ; <i32*> [#uses=2]

ST_59: xreal_V_load [2/2] 2.39ns
bb36:2  %xreal_V_load = load i32* %xreal_V_addr, align 4 ; <i32> [#uses=1]

ST_59: ximag_V_addr [1/1] 0.00ns
bb36:6  %ximag_V_addr = getelementptr [1024 x i32]* %ximag_V, i64 0, i64 %tmp_22 ; <i32*> [#uses=2]

ST_59: ximag_V_load [2/2] 2.39ns
bb36:7  %ximag_V_load = load i32* %ximag_V_addr, align 4 ; <i32> [#uses=1]

ST_59: stg_254 [1/1] 0.00ns
return:0  ret void


 <State 60>: 4.78ns
ST_60: xreal_V_load [1/2] 2.39ns
bb36:2  %xreal_V_load = load i32* %xreal_V_addr, align 4 ; <i32> [#uses=1]

ST_60: tmp_41 [1/1] 0.00ns
bb36:3  %tmp_41 = call i22 @_ssdm_op_PartSelect.i22.i32.i32.i32(i32 %xreal_V_load, i32 10, i32 31) ; <i22> [#uses=1]

ST_60: tmp_23 [1/1] 0.00ns
bb36:4  %tmp_23 = sext i22 %tmp_41 to i32               ; <i32> [#uses=1]

ST_60: stg_258 [1/1] 2.39ns
bb36:5  store i32 %tmp_23, i32* %xreal_V_addr, align 4

ST_60: ximag_V_load [1/2] 2.39ns
bb36:7  %ximag_V_load = load i32* %ximag_V_addr, align 4 ; <i32> [#uses=1]

ST_60: tmp_42 [1/1] 0.00ns
bb36:8  %tmp_42 = call i22 @_ssdm_op_PartSelect.i22.i32.i32.i32(i32 %ximag_V_load, i32 10, i32 31) ; <i22> [#uses=1]

ST_60: tmp_24 [1/1] 0.00ns
bb36:9  %tmp_24 = sext i22 %tmp_42 to i32               ; <i32> [#uses=1]

ST_60: stg_262 [1/1] 2.39ns
bb36:10  store i32 %tmp_24, i32* %ximag_V_addr, align 4

ST_60: stg_263 [1/1] 0.00ns
bb36:11  br label %bb39



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
