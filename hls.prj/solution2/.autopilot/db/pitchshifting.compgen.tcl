# This script segment is generated automatically by AutoPilot

set id 38
set name combine_mul_52s_53ns_105_11
set corename simcore_mul
set op mul
set stage_num 11
set registered_input 1
set in0_width 52
set in0_signed 1
set in1_width 53
set in1_signed 0
set out_width 105
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mul] == "ap_gen_simcore_mul"} {
eval "ap_gen_simcore_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_mul, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op mul
set corename MulnS
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_multicycle_mul] == "::AESL_LIB_VIRTEX::xil_gen_multicycle_mul"} {
eval "::AESL_LIB_VIRTEX::xil_gen_multicycle_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_multicycle_mul, check your platform lib"
}
}


set id 39
set name combine_mul_32s_23ns_52_3
set corename simcore_mul
set op mul
set stage_num 3
set registered_input 1
set in0_width 32
set in0_signed 1
set in1_width 23
set in1_signed 0
set out_width 52
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mul] == "ap_gen_simcore_mul"} {
eval "ap_gen_simcore_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_mul, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op mul
set corename Mul3S
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_multicycle_mul] == "::AESL_LIB_VIRTEX::xil_gen_multicycle_mul"} {
eval "::AESL_LIB_VIRTEX::xil_gen_multicycle_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_multicycle_mul, check your platform lib"
}
}


set id 44
set name combine_mul_20ns_32s_52_3
set corename simcore_mul
set op mul
set stage_num 3
set registered_input 1
set in0_width 20
set in0_signed 0
set in1_width 32
set in1_signed 1
set out_width 52
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mul] == "ap_gen_simcore_mul"} {
eval "ap_gen_simcore_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_mul, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op mul
set corename Mul3S
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_multicycle_mul] == "::AESL_LIB_VIRTEX::xil_gen_multicycle_mul"} {
eval "::AESL_LIB_VIRTEX::xil_gen_multicycle_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_multicycle_mul, check your platform lib"
}
}


set id 45
set name combine_mul_52s_20ns_72_6
set corename simcore_mul
set op mul
set stage_num 6
set registered_input 1
set in0_width 52
set in0_signed 1
set in1_width 20
set in1_signed 0
set out_width 72
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mul] == "ap_gen_simcore_mul"} {
eval "ap_gen_simcore_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_mul, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op mul
set corename MulnS
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_multicycle_mul] == "::AESL_LIB_VIRTEX::xil_gen_multicycle_mul"} {
eval "::AESL_LIB_VIRTEX::xil_gen_multicycle_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_multicycle_mul, check your platform lib"
}
}


# Memory (RAM/ROM)  definition:
set ID 46
set MemName pitchshifting_wn_V_1
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 20
set AddrRange 1024
set AddrWd 10
set TrueReset 0
set IsROM 1
set ROMData { "00000000000000000010" "00000000000000010110" "00000000000000111101" "00000000000001111000" "00000000000011001000" "00000000000100101010" "00000000000110100001" "00000000001000101010" "00000000001011001001" "00000000001101111010" "00000000010000111111" "00000000010100011000" "00000000011000000101" "00000000011100000101" "00000000100000011010" "00000000100101000001" "00000000101001111100" "00000000101111001011" "00000000110100101110" "00000000111010100100" "00000001000000101101" "00000001000111001100" "00000001001101111100" "00000001010101000001" "00000001011100011000" "00000001100100000100" "00000001101100000011" "00000001110100010101" "00000001111100111100" "00000010000101110101" "00000010001111000010" "00000010011000100010" "00000010100010010110" "00000010101100011101" "00000010110110110111" "00000011000001100100" "00000011001100100101" "00000011010111111010" "00000011100011100001" "00000011101111011011" "00000011111011101001" "00000100001000001010" "00000100010100111110" "00000100100010000101" "00000100101111011110" "00000100111101001100" "00000101001011001011" "00000101011001011111" "00000101101000000100" "00000101110110111101" "00000110000110001000" "00000110010101100111" "00000110100101011000" "00000110110101011100" "00000111000101110011" "00000111010110011011" "00000111100111010111" "00000111111000100110" "00001000001010000110" "00001000011011111010" "00001000101110000000" "00001001000000011000" "00001001010011000011" "00001001100101111111" "00001001111001001110" "00001010001100110000" "00001010100000100100" "00001010110100101001" "00001011001001000000" "00001011011101101010" "00001011110010100110" "00001100000111110100" "00001100011101010010" "00001100110011000100" "00001101001001000111" "00001101011111011011" "00001101110110000010" "00001110001100111010" "00001110100100000100" "00001110111011011110" "00001111010011001100" "00001111101011001001" "00010000000011011001" "00010000011011111000" "00010000110100101011" "00010001001101101101" "00010001100111000001" "00010010000000100110" "00010010011010011011" "00010010110100100011" "00010011001110111010" "00010011101001100011" "00010100000100011100" "00010100011111100101" "00010100111010111111" "00010101010110101010" "00010101110010100101" "00010110001110110001" "00010110101011001101" "00010111000111111001" "00010111100100110110" "00011000000010000011" "00011000011111011111" "00011000111101001011" "00011001011011001000" "00011001111001010100" "00011010010111101111" "00011010110110011011" "00011011010101010110" "00011011110100100001" "00011100010011111100" "00011100110011100100" "00011101010011011110" "00011101110011100110" "00011110010011111101" "00011110110100100011" "00011111010101011000" "00011111110110011100" "00100000010111110000" "00100000111001010001" "00100001011011000001" "00100001111101000001" "00100010011111001111" "00100011000001101010" "00100011100100010100" "00100100000111001101" "00100100101010010100" "00100101001101101001" "00100101110001001011" "00100110010100111100" "00100110111000111010" "00100111011101000110" "00101000000001100000" "00101000100110001000" "00101001001010111101" "00101001101111111111" "00101010010101001111" "00101010111010101100" "00101011100000010110" "00101100000110001101" "00101100101100010001" "00101101010010100001" "00101101111000111110" "00101110011111101001" "00101111000110100000" "00101111101101100011" "00110000010100110010" "00110000111100001110" "00110001100011110111" "00110010001011101011" "00110010110011101011" "00110011011011110111" "00110100000100001111" "00110100101100110010" "00110101010101100010" "00110101111110011100" "00110110100111100010" "00110111010000110101" "00110111111010010000" "00111000100011111001" "00111001001101101100" "00111001110111101001" "00111010100001110010" "00111011001100000101" "00111011110110100010" "00111100100001001011" "00111101001011111110" "00111101110110111011" "00111110100010000011" "00111111001101010100" "00111111111000101111" "01000000100100010100" "01000001010000000100" "01000001111011111100" "01000010100111111111" "01000011010100001011" "01000100000000100000" "01000100101100111110" "01000101011001100101" "01000110000110010110" "01000110110011010000" "01000111100000010001" "01001000001101011100" "01001000111010110001" "01001001101000001100" "01001010010101110010" "01001011000011011110" "01001011110001010011" "01001100011111010000" "01001101001101010101" "01001101111011100010" "01001110101001110110" "01001111011000010010" "01010000000110110110" "01010000110101100001" "01010001100100010011" "01010010010011001101" "01010011000010001101" "01010011110001010100" "01010100100000100011" "01010101001111110111" "01010101111111010011" "01010110101110110101" "01010111011110011101" "01011000001110001100" "01011000111110000000" "01011001101101111011" "01011010011101111100" "01011011001110000010" "01011011111110001111" "01011100101110100000" "01011101011110111000" "01011110001111010100" "01011110111111110101" "01011111110000011100" "01100000100001001000" "01100001010001111000" "01100010000010101110" "01100010110011101000" "01100011100100100110" "01100100010101101010" "01100101000110110000" "01100101110111111100" "01100110101001001011" "01100111011010011110" "01101000001011110101" "01101000111101010000" "01101001101110101110" "01101010100000010000" "01101011010001110101" "01101100000011011101" "01101100110101001000" "01101101100110110101" "01101110011000100111" "01101111001010011011" "01101111111100010001" "01110000101110001001" "01110001100000000101" "01110010010010000011" "01110011000100000010" "01110011110110000011" "01110100101000000110" "01110101011010001100" "01110110001100010010" "01110110111110011011" "01110111110000100101" "01111000100010110000" "01111001010100111011" "01111010000111001000" "01111010111001010111" "01111011101011100101" "01111100011101110101" "01111101010000000101" "01111110000010010101" "01111110110100100110" "01111111100110110111" "10000000011001001000" "10000001001011011001" "10000001111101101010" "10000010101111111010" "10000011100010001010" "10000100010100011010" "10000101000110101000" "10000101111000110111" "10000110101011000100" "10000111011101001111" "10001000001111011010" "10001001000001100100" "10001001110011101101" "10001010100101110011" "10001011010111111001" "10001100001001111100" "10001100111011111101" "10001101101101111100" "10001110011111111010" "10001111010001110110" "10010000000011101110" "10010000110101100100" "10010001100111011000" "10010010011001001010" "10010011001010110111" "10010011111100100010" "10010100101110001010" "10010101011111101111" "10010110010001010001" "10010111000010101111" "10010111110100001010" "10011000100101100001" "10011001010110110100" "10011010001000000011" "10011010111001001111" "10011011101010010101" "10011100011011011001" "10011101001100010111" "10011101111101010001" "10011110101110000111" "10011111011110110111" "10100000001111100011" "10100001000000001010" "10100001110000101011" "10100010100001000111" "10100011010001011111" "10100100000001110000" "10100100110001111101" "10100101100010000011" "10100110010010000100" "10100111000001111111" "10100111110001110011" "10101000100001100010" "10101001010001001010" "10101010000000101100" "10101010110000001000" "10101011011111011100" "10101100001110101011" "10101100111101110010" "10101101101100110010" "10101110011011101100" "10101111001010011110" "10101111111001001001" "10110000100111101101" "10110001010110001001" "10110010000100011101" "10110010110010101010" "10110011100000101111" "10110100001110101100" "10110100111100100001" "10110101101010001101" "10110110010111110011" "10110111000101001110" "10110111110010100011" "10111000011111101110" "10111001001100101111" "10111001111001101001" "10111010100110011010" "10111011010011000001" "10111011111111011111" "10111100101011110100" "10111101011000000000" "10111110000100000011" "10111110101111111011" "10111111011011101011" "11000000000111010000" "11000000110010101011" "11000001011101111100" "11000010001001000100" "11000010110100000001" "11000011011110110100" "11000100001001011101" "11000100110011111010" "11000101011110001101" "11000110001000010110" "11000110110010010011" "11000111011100000110" "11001000000101101111" "11001000101111001010" "11001001011000011101" "11001010000001100011" "11001010101010011101" "11001011010011001101" "11001011111011110000" "11001100100100001000" "11001101001100010100" "11001101110100010100" "11001110011100001000" "11001111000011110001" "11001111101011001101" "11010000010010011100" "11010000111001011111" "11010001100000010110" "11010010000111000001" "11010010101101011110" "11010011010011101110" "11010011111001110010" "11010100011111101001" "11010101000101010011" "11010101101010110000" "11010110010000000000" "11010110110101000010" "11010111011001110111" "11010111111110011111" "11011000100010111001" "11011001000111000101" "11011001101011000011" "11011010001110110100" "11011010110010010110" "11011011010101101011" "11011011111000110010" "11011100011011101011" "11011100111110010101" "11011101100000110000" "11011110000010111110" "11011110100100111110" "11011111000110101110" "11011111101000001111" "11100000001001100011" "11100000101010100111" "11100001001011011100" "11100001101100000010" "11100010001100011001" "11100010101100100001" "11100011001100011011" "11100011101100000011" "11100100001011011110" "11100100101010101001" "11100101001001100100" "11100101101000010000" "11100110000110101011" "11100110100100110111" "11100111000010110100" "11100111100000100000" "11100111111101111100" "11101000011011001001" "11101000111000000110" "11101001010100110010" "11101001110001001110" "11101010001101011010" "11101010101001010101" "11101011000101000000" "11101011100000011010" "11101011111011100011" "11101100010110011100" "11101100110001000101" "11101101001011011100" "11101101100101100100" "11101101111111011001" "11101110011000111110" "11101110110010010010" "11101111001011010100" "11101111100100000111" "11101111111100100110" "11110000010100110110" "11110000101100110011" "11110001000100100001" "11110001011011111011" "11110001110011000101" "11110010001001111101" "11110010100000100100" "11110010110110111000" "11110011001100111011" "11110011100010101101" "11110011111000001011" "11110100001101011001" "11110100100010010101" "11110100110110111111" "11110101001011010110" "11110101011111011011" "11110101110011001111" "11110110000110110001" "11110110011010000000" "11110110101100111100" "11110110111111100111" "11110111010001111111" "11110111100100000101" "11110111110101111001" "11111000000111011001" "11111000011000101000" "11111000101001100100" "11111000111010001100" "11111001001010100011" "11111001011010100111" "11111001101010011000" "11111001111001110111" "11111010001001000010" "11111010010111111011" "11111010100110100000" "11111010110100110100" "11111011000010110011" "11111011010000100001" "11111011011101111010" "11111011101011000001" "11111011110111110101" "11111100000100010110" "11111100010000100100" "11111100011100011110" "11111100101000000101" "11111100110011011010" "11111100111110011011" "11111101001001001000" "11111101010011100010" "11111101011101101001" "11111101100111011101" "11111101110000111101" "11111101111010001010" "11111110000011000011" "11111110001011101010" "11111110010011111100" "11111110011011111011" "11111110100011100111" "11111110101010111110" "11111110110010000011" "11111110111000110011" "11111110111111010010" "11111111000101011011" "11111111001011010001" "11111111010000110100" "11111111010110000011" "11111111011010111110" "11111111011111100101" "11111111100011111010" "11111111100111111010" "11111111101011100111" "11111111101111000000" "11111111110010000101" "11111111110100110110" "11111111110111010101" "11111111111001011110" "11111111111011010101" "11111111111100110111" "11111111111110000111" "11111111111111000010" "11111111111111101001" "11111111111111111101" "11111111111111111101" "11111111111111101001" "11111111111111000010" "11111111111110000111" "11111111111100110111" "11111111111011010101" "11111111111001011110" "11111111110111010101" "11111111110100110110" "11111111110010000101" "11111111101111000000" "11111111101011100111" "11111111100111111010" "11111111100011111010" "11111111011111100101" "11111111011010111110" "11111111010110000011" "11111111010000110100" "11111111001011010001" "11111111000101011011" "11111110111111010010" "11111110111000110011" "11111110110010000011" "11111110101010111110" "11111110100011100111" "11111110011011111011" "11111110010011111100" "11111110001011101010" "11111110000011000011" "11111101111010001010" "11111101110000111101" "11111101100111011101" "11111101011101101001" "11111101010011100010" "11111101001001001000" "11111100111110011011" "11111100110011011010" "11111100101000000101" "11111100011100011110" "11111100010000100100" "11111100000100010110" "11111011110111110101" "11111011101011000001" "11111011011101111010" "11111011010000100001" "11111011000010110011" "11111010110100110100" "11111010100110100000" "11111010010111111011" "11111010001001000010" "11111001111001110111" "11111001101010011000" "11111001011010100111" "11111001001010100011" "11111000111010001100" "11111000101001100100" "11111000011000101000" "11111000000111011001" "11110111110101111001" "11110111100100000101" "11110111010001111111" "11110110111111100111" "11110110101100111100" "11110110011010000000" "11110110000110110001" "11110101110011001111" "11110101011111011011" "11110101001011010110" "11110100110110111111" "11110100100010010101" "11110100001101011001" "11110011111000001011" "11110011100010101101" "11110011001100111011" "11110010110110111000" "11110010100000100100" "11110010001001111101" "11110001110011000101" "11110001011011111011" "11110001000100100001" "11110000101100110011" "11110000010100110110" "11101111111100100110" "11101111100100000111" "11101111001011010100" "11101110110010010010" "11101110011000111110" "11101101111111011001" "11101101100101100100" "11101101001011011100" "11101100110001000101" "11101100010110011100" "11101011111011100011" "11101011100000011010" "11101011000101000000" "11101010101001010101" "11101010001101011010" "11101001110001001110" "11101001010100110010" "11101000111000000110" "11101000011011001001" "11100111111101111100" "11100111100000100000" "11100111000010110100" "11100110100100110111" "11100110000110101011" "11100101101000010000" "11100101001001100100" "11100100101010101001" "11100100001011011110" "11100011101100000011" "11100011001100011011" "11100010101100100001" "11100010001100011001" "11100001101100000010" "11100001001011011100" "11100000101010100111" "11100000001001100011" "11011111101000001111" "11011111000110101110" "11011110100100111110" "11011110000010111110" "11011101100000110000" "11011100111110010101" "11011100011011101011" "11011011111000110010" "11011011010101101011" "11011010110010010110" "11011010001110110100" "11011001101011000011" "11011001000111000101" "11011000100010111001" "11010111111110011111" "11010111011001110111" "11010110110101000010" "11010110010000000000" "11010101101010110000" "11010101000101010011" "11010100011111101001" "11010011111001110010" "11010011010011101110" "11010010101101011110" "11010010000111000001" "11010001100000010110" "11010000111001011111" "11010000010010011100" "11001111101011001101" "11001111000011110001" "11001110011100001000" "11001101110100010100" "11001101001100010100" "11001100100100001000" "11001011111011110000" "11001011010011001101" "11001010101010011101" "11001010000001100011" "11001001011000011101" "11001000101111001010" "11001000000101101111" "11000111011100000110" "11000110110010010011" "11000110001000010110" "11000101011110001101" "11000100110011111010" "11000100001001011101" "11000011011110110100" "11000010110100000001" "11000010001001000100" "11000001011101111100" "11000000110010101011" "11000000000111010000" "10111111011011101011" "10111110101111111011" "10111110000100000011" "10111101011000000000" "10111100101011110100" "10111011111111011111" "10111011010011000001" "10111010100110011010" "10111001111001101001" "10111001001100101111" "10111000011111101110" "10110111110010100011" "10110111000101001110" "10110110010111110011" "10110101101010001101" "10110100111100100001" "10110100001110101100" "10110011100000101111" "10110010110010101010" "10110010000100011101" "10110001010110001001" "10110000100111101101" "10101111111001001001" "10101111001010011110" "10101110011011101100" "10101101101100110010" "10101100111101110010" "10101100001110101011" "10101011011111011100" "10101010110000001000" "10101010000000101100" "10101001010001001010" "10101000100001100010" "10100111110001110011" "10100111000001111111" "10100110010010000100" "10100101100010000011" "10100100110001111101" "10100100000001110000" "10100011010001011111" "10100010100001000111" "10100001110000101011" "10100001000000001010" "10100000001111100011" "10011111011110110111" "10011110101110000111" "10011101111101010001" "10011101001100010111" "10011100011011011001" "10011011101010010101" "10011010111001001111" "10011010001000000011" "10011001010110110100" "10011000100101100001" "10010111110100001010" "10010111000010101111" "10010110010001010001" "10010101011111101111" "10010100101110001010" "10010011111100100010" "10010011001010110111" "10010010011001001010" "10010001100111011000" "10010000110101100100" "10010000000011101110" "10001111010001110110" "10001110011111111010" "10001101101101111100" "10001100111011111101" "10001100001001111100" "10001011010111111001" "10001010100101110011" "10001001110011101101" "10001001000001100100" "10001000001111011010" "10000111011101001111" "10000110101011000100" "10000101111000110111" "10000101000110101000" "10000100010100011010" "10000011100010001010" "10000010101111111010" "10000001111101101010" "10000001001011011001" "10000000011001001000" "01111111100110110111" "01111110110100100110" "01111110000010010101" "01111101010000000101" "01111100011101110101" "01111011101011100101" "01111010111001010111" "01111010000111001000" "01111001010100111011" "01111000100010110000" "01110111110000100101" "01110110111110011011" "01110110001100010010" "01110101011010001100" "01110100101000000110" "01110011110110000011" "01110011000100000010" "01110010010010000011" "01110001100000000101" "01110000101110001001" "01101111111100010001" "01101111001010011011" "01101110011000100111" "01101101100110110101" "01101100110101001000" "01101100000011011101" "01101011010001110101" "01101010100000010000" "01101001101110101110" "01101000111101010000" "01101000001011110101" "01100111011010011110" "01100110101001001011" "01100101110111111100" "01100101000110110000" "01100100010101101010" "01100011100100100110" "01100010110011101000" "01100010000010101110" "01100001010001111000" "01100000100001001000" "01011111110000011100" "01011110111111110101" "01011110001111010100" "01011101011110111000" "01011100101110100000" "01011011111110001111" "01011011001110000010" "01011010011101111100" "01011001101101111011" "01011000111110000000" "01011000001110001100" "01010111011110011101" "01010110101110110101" "01010101111111010011" "01010101001111110111" "01010100100000100011" "01010011110001010100" "01010011000010001101" "01010010010011001101" "01010001100100010011" "01010000110101100001" "01010000000110110110" "01001111011000010010" "01001110101001110110" "01001101111011100010" "01001101001101010101" "01001100011111010000" "01001011110001010011" "01001011000011011110" "01001010010101110010" "01001001101000001100" "01001000111010110001" "01001000001101011100" "01000111100000010001" "01000110110011010000" "01000110000110010110" "01000101011001100101" "01000100101100111110" "01000100000000100000" "01000011010100001011" "01000010100111111111" "01000001111011111100" "01000001010000000100" "01000000100100010100" "00111111111000101111" "00111111001101010100" "00111110100010000011" "00111101110110111011" "00111101001011111110" "00111100100001001011" "00111011110110100010" "00111011001100000101" "00111010100001110010" "00111001110111101001" "00111001001101101100" "00111000100011111001" "00110111111010010000" "00110111010000110101" "00110110100111100010" "00110101111110011100" "00110101010101100010" "00110100101100110010" "00110100000100001111" "00110011011011110111" "00110010110011101011" "00110010001011101011" "00110001100011110111" "00110000111100001110" "00110000010100110010" "00101111101101100011" "00101111000110100000" "00101110011111101001" "00101101111000111110" "00101101010010100001" "00101100101100010001" "00101100000110001101" "00101011100000010110" "00101010111010101100" "00101010010101001111" "00101001101111111111" "00101001001010111101" "00101000100110001000" "00101000000001100000" "00100111011101000110" "00100110111000111010" "00100110010100111100" "00100101110001001011" "00100101001101101001" "00100100101010010100" "00100100000111001101" "00100011100100010100" "00100011000001101010" "00100010011111001111" "00100001111101000001" "00100001011011000001" "00100000111001010001" "00100000010111110000" "00011111110110011100" "00011111010101011000" "00011110110100100011" "00011110010011111101" "00011101110011100110" "00011101010011011110" "00011100110011100100" "00011100010011111100" "00011011110100100001" "00011011010101010110" "00011010110110011011" "00011010010111101111" "00011001111001010100" "00011001011011001000" "00011000111101001011" "00011000011111011111" "00011000000010000011" "00010111100100110110" "00010111000111111001" "00010110101011001101" "00010110001110110001" "00010101110010100101" "00010101010110101010" "00010100111010111111" "00010100011111100101" "00010100000100011100" "00010011101001100011" "00010011001110111010" "00010010110100100011" "00010010011010011011" "00010010000000100110" "00010001100111000001" "00010001001101101101" "00010000110100101011" "00010000011011111000" "00010000000011011001" "00001111101011001001" "00001111010011001100" "00001110111011011110" "00001110100100000100" "00001110001100111010" "00001101110110000010" "00001101011111011011" "00001101001001000111" "00001100110011000100" "00001100011101010010" "00001100000111110100" "00001011110010100110" "00001011011101101010" "00001011001001000000" "00001010110100101001" "00001010100000100100" "00001010001100110000" "00001001111001001110" "00001001100101111111" "00001001010011000011" "00001001000000011000" "00001000101110000000" "00001000011011111010" "00001000001010000110" "00000111111000100110" "00000111100111010111" "00000111010110011011" "00000111000101110011" "00000110110101011100" "00000110100101011000" "00000110010101100111" "00000110000110001000" "00000101110110111101" "00000101101000000100" "00000101011001011111" "00000101001011001011" "00000100111101001100" "00000100101111011110" "00000100100010000101" "00000100010100111110" "00000100001000001010" "00000011111011101001" "00000011101111011011" "00000011100011100001" "00000011010111111010" "00000011001100100101" "00000011000001100100" "00000010110110110111" "00000010101100011101" "00000010100010010110" "00000010011000100010" "00000010001111000010" "00000010000101110101" "00000001111100111100" "00000001110100010101" "00000001101100000011" "00000001100100000100" "00000001011100011000" "00000001010101000001" "00000001001101111100" "00000001000111001100" "00000001000000101101" "00000000111010100100" "00000000110100101110" "00000000101111001011" "00000000101001111100" "00000000100101000001" "00000000100000011010" "00000000011100000101" "00000000011000000101" "00000000010100011000" "00000000010000111111" "00000000001101111010" "00000000001011001001" "00000000001000101010" "00000000000110100001" "00000000000100101010" "00000000000011001000" "00000000000001111000" "00000000000000111101" "00000000000000010110" "00000000000000000010" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set DelayBudget 2.39
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    reset_level 1 \
    sync_rst true \
    stage_num 2 \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    reset_level 1 \
    sync_rst true \
    stage_num 2 \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 47
set MemName pitchshifting_deltaPhiPrimeMod_V
set CoreName ap_simcore_mem
set PortList { 0 1 }
set DataWd 32
set AddrRange 1024
set AddrWd 10
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set DelayBudget 2.39
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    reset_level 1 \
    sync_rst true \
    stage_num 2 \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    reset_level 1 \
    sync_rst true \
    stage_num 2 \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 48
set MemName pitchshifting_phaseCumulative_V
set CoreName ap_simcore_mem
set PortList { 1 0 }
set DataWd 32
set AddrRange 1024
set AddrWd 10
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set DelayBudget 2.39
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    reset_level 1 \
    sync_rst true \
    stage_num 2 \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    reset_level 1 \
    sync_rst true \
    stage_num 2 \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 49
set MemName pitchshifting_real_V
set CoreName ap_simcore_mem
set PortList { 2 1 }
set DataWd 32
set AddrRange 1024
set AddrWd 10
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set DelayBudget 2.39
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    reset_level 1 \
    sync_rst true \
    stage_num 2 \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    reset_level 1 \
    sync_rst true \
    stage_num 2 \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
}

# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 50 \
    name amplitude_V \
    reset_level 1 \
    sync_rst true \
    corename amplitude_V \
    op interface \
    ports { amplitude_V_address0 { O 10 vector } amplitude_V_ce0 { O 1 bit } amplitude_V_q0 { I 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'amplitude_V'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 51 \
    name angle_V \
    reset_level 1 \
    sync_rst true \
    corename angle_V \
    op interface \
    ports { angle_V_address0 { O 10 vector } angle_V_ce0 { O 1 bit } angle_V_q0 { I 26 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'angle_V'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 52 \
    name previousPhase_V \
    reset_level 1 \
    sync_rst true \
    corename previousPhase_V \
    op interface \
    ports { previousPhase_V_address0 { O 10 vector } previousPhase_V_ce0 { O 1 bit } previousPhase_V_q0 { I 1 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'previousPhase_V'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 53 \
    name time_domain_V \
    reset_level 1 \
    sync_rst true \
    corename time_domain_V \
    op interface \
    ports { time_domain_V_address0 { O 10 vector } time_domain_V_ce0 { O 1 bit } time_domain_V_we0 { O 1 bit } time_domain_V_d0 { O 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'time_domain_V'"
}
}


# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -2 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
}


