

================================================================
== Vivado HLS Report for 'input_transfer'
================================================================
* Date:           Wed Dec 10 22:44:29 2014

* Version:        2013.2 (build date: Thu Jun 13 16:07:59 PM 2013)
* Project:        hls.prj
* Solution:       solution2
* Product family: zynq zynq_fpv6 
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.36|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+------+-----+------+---------+
    |   Latency  |  Interval  | Pipeline|
    | min |  max | min |  max |   Type  |
    +-----+------+-----+------+---------+
    |   37|  1130|   37|  1130|   none  |
    +-----+------+-----+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+------+------+----------+-----------+-----------+------+----------+
        |          |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1  |  1058|  1058|        36|          1|          1|  1024|    yes   |
        |- Loop 2  |  1024|  1024|         2|          1|          1|  1024|    yes   |
        +----------+------+------+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
|ShiftMemory      |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Shift register: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2
  * Pipeline-1: initiation interval (II) = 1, depth = 36


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 112
* Pipeline: 2
  Pipeline-0: II = 1, D = 2, States = { 4 5 }
  Pipeline-1: II = 1, D = 36, States = { 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!tmp_32)
	7  / (tmp_32)
3 --> 
	4  / (tmp_36)
	78  / (!tmp_36)
4 --> 
	6  / (exitcond8)
	5  / (!exitcond8)
5 --> 
	4  / true
6 --> 
	78  / true
7 --> 
	8  / (tmp_34)
	78  / (!tmp_34)
8 --> 
	44  / (exitcond)
	9  / (!exitcond)
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	8  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
* FSM state operations: 

 <State 1>: 2.52ns
ST_1: input_V_read [1/1] 0.00ns
entry:0  %input_V_read = call i22 @_ssdm_op_WireRead.i22(i22 %input_V) nounwind ; <i22> [#uses=1]

ST_1: input_V_cast [1/1] 0.00ns
entry:1  %input_V_cast = sext i22 %input_V_read to i32   ; <i32> [#uses=1]

ST_1: input_buffer_pointer_load [1/1] 0.00ns
entry:2  %input_buffer_pointer_load = load i32* @input_buffer_pointer, align 4 ; <i32> [#uses=8]

ST_1: tmp [1/1] 0.00ns
entry:3  %tmp = sext i32 %input_buffer_pointer_load to i64 ; <i64> [#uses=1]

ST_1: input_buffer_V_addr [1/1] 0.00ns
entry:4  %input_buffer_V_addr = getelementptr [1280 x i32]* @input_buffer_V, i64 0, i64 %tmp ; <i32*> [#uses=1]

ST_1: stg_118 [1/1] 2.39ns
entry:5  store i32 %input_V_cast, i32* %input_buffer_V_addr, align 4

ST_1: tmp_s [1/1] 2.52ns
entry:6  %tmp_s = icmp eq i32 %input_buffer_pointer_load, 1024 ; <i1> [#uses=1]

ST_1: stg_120 [1/1] 0.00ns
entry:7  br i1 %tmp_s, label %bb, label %bb1

ST_1: stg_121 [1/1] 0.00ns
bb:0  store i32 1, i32* @initialize, align 4

ST_1: stg_122 [1/1] 0.00ns
bb:1  br label %bb1


 <State 2>: 8.36ns
ST_2: initialize_load [1/1] 0.00ns
bb1:0  %initialize_load = load i32* @initialize, align 4 ; <i32> [#uses=1]

ST_2: tmp_32 [1/1] 2.52ns
bb1:1  %tmp_32 = icmp eq i32 %initialize_load, 1       ; <i1> [#uses=1]

ST_2: tmp_117 [1/1] 0.00ns
bb1:2  %tmp_117 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %input_buffer_pointer_load, i32 31) ; <i1> [#uses=2]

ST_2: stg_126 [1/1] 0.00ns
bb1:3  br i1 %tmp_32, label %bb2, label %bb8

ST_2: tmp_121 [1/1] 0.00ns
bb8:0  %tmp_121 = trunc i32 %input_buffer_pointer_load to i10 ; <i10> [#uses=1]

ST_2: p_and_f4 [1/1] 0.00ns
bb8:1  %p_and_f4 = call i32 @_ssdm_op_BitConcatenate.i32.i22.i10(i22 0, i10 %tmp_121) ; <i32> [#uses=1]

ST_2: p_neg5 [1/1] 2.44ns
bb8:2  %p_neg5 = sub i32 0, %input_buffer_pointer_load ; <i32> [#uses=1]

ST_2: tmp_122 [1/1] 0.00ns
bb8:3  %tmp_122 = trunc i32 %p_neg5 to i10             ; <i10> [#uses=1]

ST_2: p_and_t6 [1/1] 0.00ns
bb8:4  %p_and_t6 = call i32 @_ssdm_op_BitConcatenate.i32.i22.i10(i22 0, i10 %tmp_122) ; <i32> [#uses=1]

ST_2: p_neg_t7 [1/1] 2.44ns
bb8:5  %p_neg_t7 = sub i32 0, %p_and_t6                ; <i32> [#uses=1]

ST_2: tmp_35 [1/1] 1.37ns
bb8:6  %tmp_35 = select i1 %tmp_117, i32 %p_neg_t7, i32 %p_and_f4 ; <i32> [#uses=1]

ST_2: tmp_123 [1/1] 0.00ns
bb8:7  %tmp_123 = trunc i32 %tmp_35 to i11             ; <i11> [#uses=1]

ST_2: tmp_36 [1/1] 2.11ns
bb8:8  %tmp_36 = icmp eq i11 %tmp_123, 1023            ; <i1> [#uses=1]

ST_2: tmp_118 [1/1] 0.00ns
bb2:0  %tmp_118 = trunc i32 %input_buffer_pointer_load to i8 ; <i8> [#uses=1]

ST_2: p_and_f [1/1] 0.00ns
bb2:1  %p_and_f = call i32 @_ssdm_op_BitConcatenate.i32.i24.i8(i24 0, i8 %tmp_118) ; <i32> [#uses=1]

ST_2: p_neg [1/1] 2.44ns
bb2:2  %p_neg = sub i32 0, %input_buffer_pointer_load  ; <i32> [#uses=1]

ST_2: tmp_119 [1/1] 0.00ns
bb2:3  %tmp_119 = trunc i32 %p_neg to i8               ; <i8> [#uses=1]

ST_2: p_and_t [1/1] 0.00ns
bb2:4  %p_and_t = call i32 @_ssdm_op_BitConcatenate.i32.i24.i8(i24 0, i8 %tmp_119) ; <i32> [#uses=1]

ST_2: p_neg_t [1/1] 2.44ns
bb2:5  %p_neg_t = sub i32 0, %p_and_t                  ; <i32> [#uses=1]

ST_2: tmp_33 [1/1] 1.37ns
bb2:6  %tmp_33 = select i1 %tmp_117, i32 %p_neg_t, i32 %p_and_f ; <i32> [#uses=1]

ST_2: tmp_120 [1/1] 0.00ns
bb2:7  %tmp_120 = trunc i32 %tmp_33 to i9              ; <i9> [#uses=1]

ST_2: tmp_34 [1/1] 2.03ns
bb2:8  %tmp_34 = icmp eq i9 %tmp_120, 255              ; <i1> [#uses=1]


 <State 3>: 1.39ns
ST_3: stg_145 [1/1] 1.39ns
bb8:9  br i1 %tmp_36, label %bb11, label %bb13


 <State 4>: 2.39ns
ST_4: input_counter_1 [1/1] 0.00ns
bb11:0  %input_counter_1 = phi i11 [ %input_counter_3, %bb10 ], [ 0, %bb8 ] ; <i11> [#uses=3]

ST_4: exitcond8 [1/1] 2.11ns
bb11:1  %exitcond8 = icmp eq i11 %input_counter_1, -1024 ; <i1> [#uses=1]

ST_4: input_counter_3 [1/1] 1.84ns
bb11:2  %input_counter_3 = add i11 %input_counter_1, 1  ; <i11> [#uses=1]

ST_4: stg_149 [1/1] 0.00ns
bb11:3  br i1 %exitcond8, label %bb12, label %bb10

ST_4: tmp_45 [1/1] 0.00ns
bb10:3  %tmp_45 = zext i11 %input_counter_1 to i64      ; <i64> [#uses=2]

ST_4: input_buffer_V_addr_2 [1/1] 0.00ns
bb10:4  %input_buffer_V_addr_2 = getelementptr [1280 x i32]* @input_buffer_V, i64 0, i64 %tmp_45 ; <i32*> [#uses=1]

ST_4: input_buffer_V_load_1 [2/2] 2.39ns
bb10:5  %input_buffer_V_load_1 = load i32* %input_buffer_V_addr_2, align 4 ; <i32> [#uses=1]


 <State 5>: 4.78ns
ST_5: empty_106 [1/1] 0.00ns
bb10:0  %empty_106 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1024, i64 1024, i64 1024) nounwind ; <i32> [#uses=0]

ST_5: tmp_64 [1/1] 0.00ns
bb10:1  %tmp_64 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str7) nounwind ; <i32> [#uses=1]

ST_5: stg_155 [1/1] 0.00ns
bb10:2  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, [1 x i8]* @p_str70) nounwind

ST_5: input_buffer_V_load_1 [1/2] 2.39ns
bb10:5  %input_buffer_V_load_1 = load i32* %input_buffer_V_addr_2, align 4 ; <i32> [#uses=1]

ST_5: input_array_V_addr_1 [1/1] 0.00ns
bb10:6  %input_array_V_addr_1 = getelementptr [1024 x i32]* @input_array_V, i64 0, i64 %tmp_45 ; <i32*> [#uses=1]

ST_5: stg_158 [1/1] 2.39ns
bb10:7  store i32 %input_buffer_V_load_1, i32* %input_array_V_addr_1, align 4

ST_5: empty_107 [1/1] 0.00ns
bb10:8  %empty_107 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str7, i32 %tmp_64) nounwind ; <i32> [#uses=0]

ST_5: stg_160 [1/1] 0.00ns
bb10:9  br label %bb11


 <State 6>: 4.01ns
ST_6: base_input_load_2 [1/1] 0.00ns
bb12:0  %base_input_load_2 = load i32* @base_input, align 4 ; <i32> [#uses=1]

ST_6: tmp_44 [1/1] 2.44ns
bb12:1  %tmp_44 = add nsw i32 %base_input_load_2, 1     ; <i32> [#uses=1]

ST_6: stg_163 [1/1] 1.57ns
bb12:2  store i32 %tmp_44, i32* @base_input, align 4

ST_6: stg_164 [1/1] 0.00ns
bb12:3  br label %bb13


 <State 7>: 1.39ns
ST_7: stg_165 [1/1] 1.39ns
bb2:9  br i1 %tmp_34, label %bb5, label %bb13


 <State 8>: 7.06ns
ST_8: input_counter [1/1] 0.00ns
bb5:0  %input_counter = phi i11 [ %input_counter_2, %bb4 ], [ 0, %bb2 ] ; <i11> [#uses=4]

ST_8: exitcond [1/1] 2.11ns
bb5:1  %exitcond = icmp eq i11 %input_counter, -1024   ; <i1> [#uses=1]

ST_8: input_counter_2 [1/1] 1.84ns
bb5:2  %input_counter_2 = add i11 %input_counter, 1    ; <i11> [#uses=1]

ST_8: stg_169 [1/1] 0.00ns
bb5:3  br i1 %exitcond, label %bb6, label %bb4

ST_8: input_counter_cast [1/1] 0.00ns
bb4:0  %input_counter_cast = zext i11 %input_counter to i32 ; <i32> [#uses=1]

ST_8: base_input_load_1 [1/1] 0.00ns
bb4:4  %base_input_load_1 = load i32* @base_input, align 4 ; <i32> [#uses=1]

ST_8: tmp_124 [1/1] 0.00ns
bb4:5  %tmp_124 = shl i32 %base_input_load_1, 8        ; <i32> [#uses=1]

ST_8: tmp_40 [1/1] 2.44ns
bb4:6  %tmp_40 = add nsw i32 %tmp_124, %input_counter_cast ; <i32> [#uses=1]

ST_8: tmp_41 [35/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 9>: 4.62ns
ST_9: tmp_41 [34/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 10>: 4.62ns
ST_10: tmp_41 [33/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 11>: 4.62ns
ST_11: tmp_41 [32/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 12>: 4.62ns
ST_12: tmp_41 [31/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 13>: 4.62ns
ST_13: tmp_41 [30/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 14>: 4.62ns
ST_14: tmp_41 [29/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 15>: 4.62ns
ST_15: tmp_41 [28/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 16>: 4.62ns
ST_16: tmp_41 [27/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 17>: 4.62ns
ST_17: tmp_41 [26/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 18>: 4.62ns
ST_18: tmp_41 [25/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 19>: 4.62ns
ST_19: tmp_41 [24/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 20>: 4.62ns
ST_20: tmp_41 [23/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 21>: 4.62ns
ST_21: tmp_41 [22/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 22>: 4.62ns
ST_22: tmp_41 [21/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 23>: 4.62ns
ST_23: tmp_41 [20/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 24>: 4.62ns
ST_24: tmp_41 [19/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 25>: 4.62ns
ST_25: tmp_41 [18/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 26>: 4.62ns
ST_26: tmp_41 [17/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 27>: 4.62ns
ST_27: tmp_41 [16/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 28>: 4.62ns
ST_28: tmp_41 [15/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 29>: 4.62ns
ST_29: tmp_41 [14/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 30>: 4.62ns
ST_30: tmp_41 [13/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 31>: 4.62ns
ST_31: tmp_41 [12/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 32>: 4.62ns
ST_32: tmp_41 [11/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 33>: 4.62ns
ST_33: tmp_41 [10/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 34>: 4.62ns
ST_34: tmp_41 [9/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 35>: 4.62ns
ST_35: tmp_41 [8/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 36>: 4.62ns
ST_36: tmp_41 [7/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 37>: 4.62ns
ST_37: tmp_41 [6/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 38>: 4.62ns
ST_38: tmp_41 [5/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 39>: 4.62ns
ST_39: tmp_41 [4/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 40>: 4.62ns
ST_40: tmp_41 [3/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 41>: 4.62ns
ST_41: tmp_41 [2/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]


 <State 42>: 7.01ns
ST_42: tmp_41 [1/35] 4.62ns
bb4:7  %tmp_41 = srem i32 %tmp_40, 1280                ; <i32> [#uses=1]

ST_42: tmp_42 [1/1] 0.00ns
bb4:8  %tmp_42 = sext i32 %tmp_41 to i64               ; <i64> [#uses=1]

ST_42: input_buffer_V_addr_1 [1/1] 0.00ns
bb4:10  %input_buffer_V_addr_1 = getelementptr [1280 x i32]* @input_buffer_V, i64 0, i64 %tmp_42 ; <i32*> [#uses=1]

ST_42: input_buffer_V_load [2/2] 2.39ns
bb4:11  %input_buffer_V_load = load i32* %input_buffer_V_addr_1, align 4 ; <i32> [#uses=1]


 <State 43>: 4.78ns
ST_43: empty [1/1] 0.00ns
bb4:1  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1024, i64 1024, i64 1024) nounwind ; <i32> [#uses=0]

ST_43: tmp_63 [1/1] 0.00ns
bb4:2  %tmp_63 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str6) nounwind ; <i32> [#uses=1]

ST_43: stg_214 [1/1] 0.00ns
bb4:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, [1 x i8]* @p_str70) nounwind

ST_43: tmp_43 [1/1] 0.00ns
bb4:9  %tmp_43 = zext i11 %input_counter to i64        ; <i64> [#uses=1]

ST_43: input_buffer_V_load [1/2] 2.39ns
bb4:11  %input_buffer_V_load = load i32* %input_buffer_V_addr_1, align 4 ; <i32> [#uses=1]

ST_43: input_array_V_addr [1/1] 0.00ns
bb4:12  %input_array_V_addr = getelementptr [1024 x i32]* @input_array_V, i64 0, i64 %tmp_43 ; <i32*> [#uses=1]

ST_43: stg_218 [1/1] 2.39ns
bb4:13  store i32 %input_buffer_V_load, i32* %input_array_V_addr, align 4

ST_43: empty_105 [1/1] 0.00ns
bb4:14  %empty_105 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str6, i32 %tmp_63) nounwind ; <i32> [#uses=0]

ST_43: stg_220 [1/1] 0.00ns
bb4:15  br label %bb5


 <State 44>: 7.06ns
ST_44: base_input_load [1/1] 0.00ns
bb6:0  %base_input_load = load i32* @base_input, align 4 ; <i32> [#uses=1]

ST_44: tmp_37 [1/1] 2.44ns
bb6:1  %tmp_37 = add nsw i32 %base_input_load, 1       ; <i32> [#uses=1]

ST_44: tmp_38 [35/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 45>: 4.62ns
ST_45: tmp_38 [34/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 46>: 4.62ns
ST_46: tmp_38 [33/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 47>: 4.62ns
ST_47: tmp_38 [32/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 48>: 4.62ns
ST_48: tmp_38 [31/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 49>: 4.62ns
ST_49: tmp_38 [30/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 50>: 4.62ns
ST_50: tmp_38 [29/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 51>: 4.62ns
ST_51: tmp_38 [28/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 52>: 4.62ns
ST_52: tmp_38 [27/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 53>: 4.62ns
ST_53: tmp_38 [26/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 54>: 4.62ns
ST_54: tmp_38 [25/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 55>: 4.62ns
ST_55: tmp_38 [24/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 56>: 4.62ns
ST_56: tmp_38 [23/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 57>: 4.62ns
ST_57: tmp_38 [22/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 58>: 4.62ns
ST_58: tmp_38 [21/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 59>: 4.62ns
ST_59: tmp_38 [20/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 60>: 4.62ns
ST_60: tmp_38 [19/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 61>: 4.62ns
ST_61: tmp_38 [18/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 62>: 4.62ns
ST_62: tmp_38 [17/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 63>: 4.62ns
ST_63: tmp_38 [16/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 64>: 4.62ns
ST_64: tmp_38 [15/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 65>: 4.62ns
ST_65: tmp_38 [14/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 66>: 4.62ns
ST_66: tmp_38 [13/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 67>: 4.62ns
ST_67: tmp_38 [12/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 68>: 4.62ns
ST_68: tmp_38 [11/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 69>: 4.62ns
ST_69: tmp_38 [10/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 70>: 4.62ns
ST_70: tmp_38 [9/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 71>: 4.62ns
ST_71: tmp_38 [8/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 72>: 4.62ns
ST_72: tmp_38 [7/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 73>: 4.62ns
ST_73: tmp_38 [6/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 74>: 4.62ns
ST_74: tmp_38 [5/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 75>: 4.62ns
ST_75: tmp_38 [4/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 76>: 4.62ns
ST_76: tmp_38 [3/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 77>: 4.62ns
ST_77: tmp_38 [2/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]


 <State 78>: 7.06ns
ST_78: tmp_38 [1/35] 4.62ns
bb6:2  %tmp_38 = srem i32 %tmp_37, 5                   ; <i32> [#uses=1]

ST_78: stg_258 [1/1] 1.57ns
bb6:3  store i32 %tmp_38, i32* @base_input, align 4

ST_78: stg_259 [1/1] 0.00ns
bb6:4  br label %bb13

ST_78: tmp_46 [1/1] 2.44ns
bb13:0  %tmp_46 = add nsw i32 %input_buffer_pointer_load, 1 ; <i32> [#uses=1]

ST_78: tmp_47 [35/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 79>: 4.62ns
ST_79: tmp_47 [34/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 80>: 4.62ns
ST_80: tmp_47 [33/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 81>: 4.62ns
ST_81: tmp_47 [32/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 82>: 4.62ns
ST_82: tmp_47 [31/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 83>: 4.62ns
ST_83: tmp_47 [30/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 84>: 4.62ns
ST_84: tmp_47 [29/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 85>: 4.62ns
ST_85: tmp_47 [28/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 86>: 4.62ns
ST_86: tmp_47 [27/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 87>: 4.62ns
ST_87: tmp_47 [26/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 88>: 4.62ns
ST_88: tmp_47 [25/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 89>: 4.62ns
ST_89: tmp_47 [24/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 90>: 4.62ns
ST_90: tmp_47 [23/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 91>: 4.62ns
ST_91: tmp_47 [22/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 92>: 4.62ns
ST_92: tmp_47 [21/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 93>: 4.62ns
ST_93: tmp_47 [20/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 94>: 4.62ns
ST_94: tmp_47 [19/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 95>: 4.62ns
ST_95: tmp_47 [18/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 96>: 4.62ns
ST_96: tmp_47 [17/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 97>: 4.62ns
ST_97: tmp_47 [16/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 98>: 4.62ns
ST_98: tmp_47 [15/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 99>: 4.62ns
ST_99: tmp_47 [14/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 100>: 4.62ns
ST_100: tmp_47 [13/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 101>: 4.62ns
ST_101: tmp_47 [12/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 102>: 4.62ns
ST_102: tmp_47 [11/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 103>: 4.62ns
ST_103: tmp_47 [10/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 104>: 4.62ns
ST_104: tmp_47 [9/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 105>: 4.62ns
ST_105: tmp_47 [8/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 106>: 4.62ns
ST_106: tmp_47 [7/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 107>: 4.62ns
ST_107: tmp_47 [6/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 108>: 4.62ns
ST_108: tmp_47 [5/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 109>: 4.62ns
ST_109: tmp_47 [4/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 110>: 4.62ns
ST_110: tmp_47 [3/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 111>: 4.62ns
ST_111: tmp_47 [2/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]


 <State 112>: 4.62ns
ST_112: tmp_47 [1/35] 4.62ns
bb13:1  %tmp_47 = srem i32 %tmp_46, 1280                ; <i32> [#uses=1]

ST_112: stg_296 [1/1] 0.00ns
bb13:2  store i32 %tmp_47, i32* @input_buffer_pointer, align 4

ST_112: stg_297 [1/1] 0.00ns
bb13:3  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
