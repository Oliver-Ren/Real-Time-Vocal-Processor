// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        theta_V,
        ap_return_0,
        ap_return_1
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] theta_V;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg   [1:0] ap_CS_fsm = 2'b00;
wire   [5:0] cordic_ctab_V_address0;
reg    cordic_ctab_V_ce0;
wire   [19:0] cordic_ctab_V_q0;
wire   [6:0] step_fu_128_p2;
reg   [6:0] step_reg_246;
wire   [0:0] tmp_s_fu_134_p2;
reg   [0:0] tmp_s_reg_251;
wire   [0:0] exitcond1_fu_122_p2;
wire   [31:0] x_V_2_fu_184_p3;
reg   [31:0] x_V_2_reg_261;
wire   [31:0] y_V_2_fu_192_p3;
reg   [31:0] y_V_2_reg_266;
wire   [31:0] current_angle_V_fu_216_p3;
reg   [31:0] p_Val2_s_reg_44;
wire   [0:0] tmp_fu_116_p2;
reg   [31:0] p_Val2_4_reg_56;
reg   [31:0] p_Val2_3_reg_68;
reg   [6:0] step_1_reg_80;
reg   [31:0] UnifiedRetVal1_reg_91;
reg   [31:0] UnifiedRetVal_1_reg_103;
wire   [63:0] tmp_1_fu_167_p1;
wire   [31:0] sh_assign_3_cast_fu_139_p1;
wire   [31:0] r_V_fu_143_p2;
wire   [31:0] r_V_1_fu_155_p2;
wire   [31:0] t_V_fu_149_p2;
wire   [31:0] t_V_1_fu_172_p2;
wire   [31:0] y_V_fu_161_p2;
wire   [31:0] y_V_1_fu_178_p2;
wire   [31:0] p_Val2_15_cast_fu_200_p1;
wire   [31:0] r_V_s_fu_204_p2;
wire   [31:0] r_V_3_fu_210_p2;
reg   [31:0] ap_return_0_preg = 32'b00000000000000000000000000000000;
reg   [31:0] ap_return_1_preg = 32'b00000000000000000000000000000000;
reg   [1:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_ST_st4_fsm_3 = 2'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_9B74E = 32'b10011011011101001110;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_100000 = 32'b100000000000000000000;
parameter    ap_const_lv7_41 = 7'b1000001;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_true = 1'b1;


cal_mag_phase_cordic_ctab_V #(
    .DataWidth( 20 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cordic_ctab_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( cordic_ctab_V_address0 ),
    .ce0( cordic_ctab_V_ce0 ),
    .q0( cordic_ctab_V_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_0_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_0_preg
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
            ap_return_0_preg <= UnifiedRetVal1_reg_91;
        end
    end
end

/// ap_return_1_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_1_preg
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
            ap_return_1_preg <= UnifiedRetVal_1_reg_103;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond1_fu_122_p2 == ap_const_lv1_0))) begin
        UnifiedRetVal1_reg_91 <= p_Val2_3_reg_68;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_fu_116_p2))) begin
        UnifiedRetVal1_reg_91 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond1_fu_122_p2 == ap_const_lv1_0))) begin
        UnifiedRetVal_1_reg_103 <= p_Val2_s_reg_44;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_fu_116_p2))) begin
        UnifiedRetVal_1_reg_103 <= ap_const_lv32_100000;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_fu_116_p2))) begin
        p_Val2_3_reg_68 <= ap_const_lv32_0;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        p_Val2_3_reg_68 <= y_V_2_reg_266;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_fu_116_p2))) begin
        p_Val2_4_reg_56 <= ap_const_lv32_0;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        p_Val2_4_reg_56 <= current_angle_V_fu_216_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_fu_116_p2))) begin
        p_Val2_s_reg_44 <= ap_const_lv32_9B74E;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        p_Val2_s_reg_44 <= x_V_2_reg_261;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_fu_116_p2))) begin
        step_1_reg_80 <= ap_const_lv7_0;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        step_1_reg_80 <= step_reg_246;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        step_reg_246 <= step_fu_128_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_122_p2 == ap_const_lv1_0))) begin
        tmp_s_reg_251 <= tmp_s_fu_134_p2;
        x_V_2_reg_261 <= x_V_2_fu_184_p3;
        y_V_2_reg_266 <= y_V_2_fu_192_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return_0 assign process. ///
always @ (ap_CS_fsm or UnifiedRetVal1_reg_91 or ap_return_0_preg)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ap_return_0 = UnifiedRetVal1_reg_91;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

/// ap_return_1 assign process. ///
always @ (ap_CS_fsm or UnifiedRetVal_1_reg_103 or ap_return_1_preg)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ap_return_1 = UnifiedRetVal_1_reg_103;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

/// cordic_ctab_V_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_122_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_122_p2 == ap_const_lv1_0))) begin
        cordic_ctab_V_ce0 = ap_const_logic_1;
    end else begin
        cordic_ctab_V_ce0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond1_fu_122_p2 or tmp_fu_116_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if ((~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_fu_116_p2))) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else if ((~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_fu_116_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(exitcond1_fu_122_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign cordic_ctab_V_address0 = tmp_1_fu_167_p1;
assign current_angle_V_fu_216_p3 = ((tmp_s_reg_251)? r_V_s_fu_204_p2: r_V_3_fu_210_p2);
assign exitcond1_fu_122_p2 = (step_1_reg_80 == ap_const_lv7_41? 1'b1: 1'b0);
assign p_Val2_15_cast_fu_200_p1 = $unsigned(cordic_ctab_V_q0);
assign r_V_1_fu_155_p2 = $signed(p_Val2_s_reg_44) >>> sh_assign_3_cast_fu_139_p1;
assign r_V_3_fu_210_p2 = (p_Val2_4_reg_56 - p_Val2_15_cast_fu_200_p1);
assign r_V_fu_143_p2 = $signed(p_Val2_3_reg_68) >>> sh_assign_3_cast_fu_139_p1;
assign r_V_s_fu_204_p2 = (p_Val2_15_cast_fu_200_p1 + p_Val2_4_reg_56);
assign sh_assign_3_cast_fu_139_p1 = $unsigned(step_1_reg_80);
assign step_fu_128_p2 = (step_1_reg_80 + ap_const_lv7_1);
assign t_V_1_fu_172_p2 = (r_V_fu_143_p2 + p_Val2_s_reg_44);
assign t_V_fu_149_p2 = (p_Val2_s_reg_44 - r_V_fu_143_p2);
assign tmp_1_fu_167_p1 = $unsigned(step_1_reg_80);
assign tmp_fu_116_p2 = (theta_V == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_s_fu_134_p2 = ($signed(p_Val2_4_reg_56) < $signed(theta_V)? 1'b1: 1'b0);
assign x_V_2_fu_184_p3 = ((tmp_s_fu_134_p2)? t_V_fu_149_p2: t_V_1_fu_172_p2);
assign y_V_1_fu_178_p2 = (p_Val2_3_reg_68 - r_V_1_fu_155_p2);
assign y_V_2_fu_192_p3 = ((tmp_s_fu_134_p2)? y_V_fu_161_p2: y_V_1_fu_178_p2);
assign y_V_fu_161_p2 = (p_Val2_3_reg_68 + r_V_1_fu_155_p2);


endmodule //cordic

