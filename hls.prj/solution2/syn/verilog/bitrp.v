// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bitrp (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xreal_V_address0,
        xreal_V_ce0,
        xreal_V_we0,
        xreal_V_d0,
        xreal_V_q0,
        xreal_V_address1,
        xreal_V_ce1,
        xreal_V_q1,
        ximag_V_address0,
        ximag_V_ce0,
        ximag_V_we0,
        ximag_V_d0,
        ximag_V_q0,
        ximag_V_address1,
        ximag_V_ce1,
        ximag_V_q1
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] xreal_V_address0;
output   xreal_V_ce0;
output   xreal_V_we0;
output  [31:0] xreal_V_d0;
input  [31:0] xreal_V_q0;
output  [9:0] xreal_V_address1;
output   xreal_V_ce1;
input  [31:0] xreal_V_q1;
output  [9:0] ximag_V_address0;
output   ximag_V_ce0;
output   ximag_V_we0;
output  [31:0] ximag_V_d0;
input  [31:0] ximag_V_q0;
output  [9:0] ximag_V_address1;
output   ximag_V_ce1;
input  [31:0] ximag_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] xreal_V_address0;
reg xreal_V_ce0;
reg xreal_V_we0;
reg[31:0] xreal_V_d0;
reg xreal_V_ce1;
reg[9:0] ximag_V_address0;
reg ximag_V_ce0;
reg ximag_V_we0;
reg[31:0] ximag_V_d0;
reg ximag_V_ce1;
reg   [2:0] ap_CS_fsm = 3'b000;
wire   [31:0] a_3_cast_fu_128_p1;
reg   [31:0] a_3_cast_reg_203;
wire   [10:0] i_1_fu_138_p2;
reg   [10:0] i_1_reg_212;
wire   [3:0] j_2_fu_150_p2;
wire   [31:0] b_1_fu_164_p3;
wire   [0:0] exitcond2_fu_144_p2;
wire   [31:0] a_1_fu_182_p1;
reg   [9:0] xreal_V_addr_reg_239;
wire   [0:0] tmp_fu_186_p2;
reg   [9:0] xreal_V_addr_4_reg_245;
reg   [9:0] ximag_V_addr_reg_250;
reg   [9:0] ximag_V_addr_4_reg_256;
reg   [31:0] t_V_reg_261;
reg   [31:0] t_V_62_reg_266;
reg   [10:0] a_3_reg_82;
reg   [31:0] a_reg_96;
wire   [0:0] exitcond_fu_132_p2;
reg   [3:0] j_reg_105;
reg   [31:0] b_reg_116;
wire   [63:0] tmp_20_fu_191_p1;
wire   [63:0] tmp_21_fu_197_p1;
wire   [30:0] tmp_115_fu_156_p1;
wire   [0:0] tmp_116_fu_160_p1;
wire   [30:0] tmp_s_fu_172_p4;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv11_400 = 11'b10000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond2_fu_144_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_186_p2)))) begin
        a_3_reg_82 <= i_1_reg_212;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        a_3_reg_82 <= ap_const_lv11_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_132_p2))) begin
        a_reg_96 <= a_3_cast_fu_128_p1;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond2_fu_144_p2 == ap_const_lv1_0))) begin
        a_reg_96 <= a_1_fu_182_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_132_p2))) begin
        b_reg_116 <= ap_const_lv32_0;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond2_fu_144_p2 == ap_const_lv1_0))) begin
        b_reg_116 <= b_1_fu_164_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_132_p2))) begin
        j_reg_105 <= ap_const_lv4_0;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond2_fu_144_p2 == ap_const_lv1_0))) begin
        j_reg_105 <= j_2_fu_150_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        a_3_cast_reg_203[0] <= a_3_cast_fu_128_p1[0];
a_3_cast_reg_203[1] <= a_3_cast_fu_128_p1[1];
a_3_cast_reg_203[2] <= a_3_cast_fu_128_p1[2];
a_3_cast_reg_203[3] <= a_3_cast_fu_128_p1[3];
a_3_cast_reg_203[4] <= a_3_cast_fu_128_p1[4];
a_3_cast_reg_203[5] <= a_3_cast_fu_128_p1[5];
a_3_cast_reg_203[6] <= a_3_cast_fu_128_p1[6];
a_3_cast_reg_203[7] <= a_3_cast_fu_128_p1[7];
a_3_cast_reg_203[8] <= a_3_cast_fu_128_p1[8];
a_3_cast_reg_203[9] <= a_3_cast_fu_128_p1[9];
a_3_cast_reg_203[10] <= a_3_cast_fu_128_p1[10];
        i_1_reg_212 <= i_1_fu_138_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        t_V_62_reg_266 <= ximag_V_q0;
        t_V_reg_261 <= xreal_V_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond2_fu_144_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_fu_186_p2))) begin
        ximag_V_addr_4_reg_256 <= tmp_21_fu_197_p1;
        ximag_V_addr_reg_250 <= tmp_20_fu_191_p1;
        xreal_V_addr_4_reg_245 <= tmp_21_fu_197_p1;
        xreal_V_addr_reg_239 <= tmp_20_fu_191_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_132_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_132_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond_fu_132_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_132_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ximag_V_address0 assign process. ///
always @ (ap_CS_fsm or ximag_V_addr_reg_250 or ximag_V_addr_4_reg_256 or tmp_21_fu_197_p1)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        ximag_V_address0 = ximag_V_addr_reg_250;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ximag_V_address0 = ximag_V_addr_4_reg_256;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        ximag_V_address0 = tmp_21_fu_197_p1;
    end else begin
        ximag_V_address0 = ximag_V_addr_4_reg_256;
    end
end

/// ximag_V_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_144_p2 or tmp_fu_186_p2)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond2_fu_144_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_fu_186_p2)) | (ap_ST_st4_fsm_3 == ap_CS_fsm) | (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        ximag_V_ce0 = ap_const_logic_1;
    end else begin
        ximag_V_ce0 = ap_const_logic_0;
    end
end

/// ximag_V_ce1 assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_144_p2 or tmp_fu_186_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond2_fu_144_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_fu_186_p2))) begin
        ximag_V_ce1 = ap_const_logic_1;
    end else begin
        ximag_V_ce1 = ap_const_logic_0;
    end
end

/// ximag_V_d0 assign process. ///
always @ (ap_CS_fsm or ximag_V_q1 or t_V_62_reg_266)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        ximag_V_d0 = t_V_62_reg_266;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ximag_V_d0 = ximag_V_q1;
    end else begin
        ximag_V_d0 = t_V_62_reg_266;
    end
end

/// ximag_V_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        ximag_V_we0 = ap_const_logic_1;
    end else begin
        ximag_V_we0 = ap_const_logic_0;
    end
end

/// xreal_V_address0 assign process. ///
always @ (ap_CS_fsm or xreal_V_addr_reg_239 or xreal_V_addr_4_reg_245 or tmp_21_fu_197_p1)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        xreal_V_address0 = xreal_V_addr_reg_239;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        xreal_V_address0 = xreal_V_addr_4_reg_245;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        xreal_V_address0 = tmp_21_fu_197_p1;
    end else begin
        xreal_V_address0 = xreal_V_addr_4_reg_245;
    end
end

/// xreal_V_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_144_p2 or tmp_fu_186_p2)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond2_fu_144_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_fu_186_p2)) | (ap_ST_st4_fsm_3 == ap_CS_fsm) | (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        xreal_V_ce0 = ap_const_logic_1;
    end else begin
        xreal_V_ce0 = ap_const_logic_0;
    end
end

/// xreal_V_ce1 assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_144_p2 or tmp_fu_186_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond2_fu_144_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_fu_186_p2))) begin
        xreal_V_ce1 = ap_const_logic_1;
    end else begin
        xreal_V_ce1 = ap_const_logic_0;
    end
end

/// xreal_V_d0 assign process. ///
always @ (ap_CS_fsm or xreal_V_q1 or t_V_reg_261)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        xreal_V_d0 = t_V_reg_261;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        xreal_V_d0 = xreal_V_q1;
    end else begin
        xreal_V_d0 = t_V_reg_261;
    end
end

/// xreal_V_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        xreal_V_we0 = ap_const_logic_1;
    end else begin
        xreal_V_we0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond2_fu_144_p2 or tmp_fu_186_p2 or exitcond_fu_132_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(ap_const_lv1_0 == exitcond_fu_132_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            if ((~(exitcond2_fu_144_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_fu_186_p2))) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else if ((~(exitcond2_fu_144_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_186_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign a_1_fu_182_p1 = $signed(tmp_s_fu_172_p4);
assign a_3_cast_fu_128_p1 = $unsigned(a_3_reg_82);
assign b_1_fu_164_p3 = {{tmp_115_fu_156_p1}, {tmp_116_fu_160_p1}};
assign exitcond2_fu_144_p2 = (j_reg_105 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond_fu_132_p2 = (a_3_reg_82 == ap_const_lv11_400? 1'b1: 1'b0);
assign i_1_fu_138_p2 = (a_3_reg_82 + ap_const_lv11_1);
assign j_2_fu_150_p2 = (j_reg_105 + ap_const_lv4_1);
assign tmp_115_fu_156_p1 = b_reg_116[30:0];
assign tmp_116_fu_160_p1 = a_reg_96[0:0];
assign tmp_20_fu_191_p1 = $unsigned(b_reg_116);
assign tmp_21_fu_197_p1 = $unsigned(a_3_reg_82);
assign tmp_fu_186_p2 = ($signed(b_reg_116) > $signed(a_3_cast_reg_203)? 1'b1: 1'b0);
assign tmp_s_fu_172_p4 = {{a_reg_96[ap_const_lv32_1F : ap_const_lv32_1]}};
assign ximag_V_address1 = tmp_20_fu_191_p1;
assign xreal_V_address1 = tmp_20_fu_191_p1;
always @ (posedge ap_clk)
begin
    a_3_cast_reg_203[31:11] <= 21'b000000000000000000000;
end



endmodule //bitrp

