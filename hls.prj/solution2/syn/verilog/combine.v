// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="combine,hls_ip_2013_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.820000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=137,HLS_SYN_FF=9220,HLS_SYN_LUT=11756}" *)

module combine (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        currentFrameWindowed_V_address0,
        currentFrameWindowed_V_ce0,
        currentFrameWindowed_V_we0,
        currentFrameWindowed_V_d0,
        currentFrameWindowed_V_q0,
        currentFrameWindowed_V_address1,
        currentFrameWindowed_V_ce1,
        currentFrameWindowed_V_q1,
        imag_V_address0,
        imag_V_ce0,
        imag_V_we0,
        imag_V_d0,
        imag_V_q0,
        imag_V_address1,
        imag_V_ce1,
        imag_V_q1
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] currentFrameWindowed_V_address0;
output   currentFrameWindowed_V_ce0;
output   currentFrameWindowed_V_we0;
output  [31:0] currentFrameWindowed_V_d0;
input  [31:0] currentFrameWindowed_V_q0;
output  [9:0] currentFrameWindowed_V_address1;
output   currentFrameWindowed_V_ce1;
input  [31:0] currentFrameWindowed_V_q1;
output  [9:0] imag_V_address0;
output   imag_V_ce0;
output   imag_V_we0;
output  [31:0] imag_V_d0;
input  [31:0] imag_V_q0;
output  [9:0] imag_V_address1;
output   imag_V_ce1;
input  [31:0] imag_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] currentFrameWindowed_V_address0;
reg currentFrameWindowed_V_ce0;
reg currentFrameWindowed_V_we0;
reg[31:0] currentFrameWindowed_V_d0;
reg currentFrameWindowed_V_ce1;
reg[9:0] imag_V_address0;
reg imag_V_ce0;
reg imag_V_we0;
reg imag_V_ce1;
reg   [4:0] ap_CS_fsm = 5'b00000;
wire   [9:0] currentFrame_V_address0;
reg    currentFrame_V_ce0;
wire   [16:0] currentFrame_V_q0;
wire   [9:0] wn_V_address0;
reg    wn_V_ce0;
wire   [19:0] wn_V_q0;
wire   [10:0] i_1_fu_161_p2;
reg   [10:0] i_1_reg_220;
wire   [63:0] tmp_fu_167_p1;
reg   [63:0] tmp_reg_225;
wire   [0:0] exitcond1_fu_155_p2;
reg   [16:0] currentFrame_V_load_reg_240;
reg   [19:0] wn_V_load_reg_245;
wire   [36:0] tmp_3_fu_179_p2;
reg   [36:0] tmp_3_reg_250;
reg   [9:0] magFrame_V_address0;
reg    magFrame_V_ce0;
reg    magFrame_V_we0;
wire   [31:0] magFrame_V_d0;
wire   [31:0] magFrame_V_q0;
reg   [9:0] phaseFrame_V_address0;
reg    phaseFrame_V_ce0;
reg    phaseFrame_V_we0;
wire   [31:0] phaseFrame_V_d0;
wire   [31:0] phaseFrame_V_q0;
reg   [9:0] previousPhase_V_address0;
reg    previousPhase_V_ce0;
reg    previousPhase_V_we0;
wire   [0:0] previousPhase_V_d0;
wire   [0:0] previousPhase_V_q0;
wire   [9:0] time_domain_V_address0;
reg    time_domain_V_ce0;
reg    time_domain_V_we0;
wire   [31:0] time_domain_V_d0;
wire    grp_pitchshifting_fu_123_ap_start;
wire    grp_pitchshifting_fu_123_ap_done;
wire    grp_pitchshifting_fu_123_ap_idle;
wire    grp_pitchshifting_fu_123_ap_ready;
wire   [9:0] grp_pitchshifting_fu_123_amplitude_V_address0;
wire    grp_pitchshifting_fu_123_amplitude_V_ce0;
wire   [31:0] grp_pitchshifting_fu_123_amplitude_V_q0;
wire   [9:0] grp_pitchshifting_fu_123_angle_V_address0;
wire    grp_pitchshifting_fu_123_angle_V_ce0;
wire   [31:0] grp_pitchshifting_fu_123_angle_V_q0;
wire   [9:0] grp_pitchshifting_fu_123_previousPhase_V_address0;
wire    grp_pitchshifting_fu_123_previousPhase_V_ce0;
wire   [0:0] grp_pitchshifting_fu_123_previousPhase_V_q0;
wire   [9:0] grp_pitchshifting_fu_123_time_domain_V_address0;
wire    grp_pitchshifting_fu_123_time_domain_V_ce0;
wire    grp_pitchshifting_fu_123_time_domain_V_we0;
wire   [31:0] grp_pitchshifting_fu_123_time_domain_V_d0;
wire    grp_FFT_fu_135_ap_start;
wire    grp_FFT_fu_135_ap_done;
wire    grp_FFT_fu_135_ap_idle;
wire    grp_FFT_fu_135_ap_ready;
wire   [9:0] grp_FFT_fu_135_xreal_V_address0;
wire    grp_FFT_fu_135_xreal_V_ce0;
wire    grp_FFT_fu_135_xreal_V_we0;
wire   [31:0] grp_FFT_fu_135_xreal_V_d0;
wire   [31:0] grp_FFT_fu_135_xreal_V_q0;
wire   [9:0] grp_FFT_fu_135_xreal_V_address1;
wire    grp_FFT_fu_135_xreal_V_ce1;
wire   [31:0] grp_FFT_fu_135_xreal_V_q1;
wire   [9:0] grp_FFT_fu_135_ximag_V_address0;
wire    grp_FFT_fu_135_ximag_V_ce0;
wire    grp_FFT_fu_135_ximag_V_we0;
wire   [31:0] grp_FFT_fu_135_ximag_V_d0;
wire   [31:0] grp_FFT_fu_135_ximag_V_q0;
wire   [9:0] grp_FFT_fu_135_ximag_V_address1;
wire    grp_FFT_fu_135_ximag_V_ce1;
wire   [31:0] grp_FFT_fu_135_ximag_V_q1;
wire    grp_cal_mag_phase_fu_143_ap_start;
wire    grp_cal_mag_phase_fu_143_ap_done;
wire    grp_cal_mag_phase_fu_143_ap_idle;
wire    grp_cal_mag_phase_fu_143_ap_ready;
wire   [9:0] grp_cal_mag_phase_fu_143_magFrame_V_address0;
wire    grp_cal_mag_phase_fu_143_magFrame_V_ce0;
wire    grp_cal_mag_phase_fu_143_magFrame_V_we0;
wire   [31:0] grp_cal_mag_phase_fu_143_magFrame_V_d0;
wire   [9:0] grp_cal_mag_phase_fu_143_phaseFrame_V_address0;
wire    grp_cal_mag_phase_fu_143_phaseFrame_V_ce0;
wire    grp_cal_mag_phase_fu_143_phaseFrame_V_we0;
wire   [31:0] grp_cal_mag_phase_fu_143_phaseFrame_V_d0;
wire   [9:0] grp_cal_mag_phase_fu_143_real_V_address0;
wire    grp_cal_mag_phase_fu_143_real_V_ce0;
wire   [31:0] grp_cal_mag_phase_fu_143_real_V_q0;
wire   [9:0] grp_cal_mag_phase_fu_143_imag_V_address0;
wire    grp_cal_mag_phase_fu_143_imag_V_ce0;
wire   [31:0] grp_cal_mag_phase_fu_143_imag_V_q0;
reg   [10:0] i_reg_111;
reg    grp_pitchshifting_fu_123_ap_start_ap_start_reg = 1'b0;
reg    grp_FFT_fu_135_ap_start_ap_start_reg = 1'b0;
reg    grp_cal_mag_phase_fu_143_ap_start_ap_start_reg = 1'b0;
wire   [31:0] tmp_6_fu_212_p1;
wire   [19:0] tmp_3_fu_179_p0;
wire   [16:0] tmp_3_fu_179_p1;
wire   [56:0] t_V_tr_fu_185_p3;
wire   [56:0] grp_fu_196_p0;
wire   [59:0] grp_fu_196_p1;
wire   [115:0] grp_fu_196_p2;
wire   [15:0] trunc_cast_fu_202_p4;
wire    grp_fu_196_ce;
reg   [4:0] ap_NS_fsm;
wire   [115:0] grp_fu_196_p00;
wire   [36:0] tmp_3_fu_179_p00;
wire   [36:0] tmp_3_fu_179_p10;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b00000;
parameter    ap_ST_st2_fsm_1 = 5'b1;
parameter    ap_ST_st3_fsm_2 = 5'b10;
parameter    ap_ST_st4_fsm_3 = 5'b11;
parameter    ap_ST_st5_fsm_4 = 5'b100;
parameter    ap_ST_st6_fsm_5 = 5'b101;
parameter    ap_ST_st7_fsm_6 = 5'b110;
parameter    ap_ST_st8_fsm_7 = 5'b111;
parameter    ap_ST_st9_fsm_8 = 5'b1000;
parameter    ap_ST_st10_fsm_9 = 5'b1001;
parameter    ap_ST_st11_fsm_10 = 5'b1010;
parameter    ap_ST_st12_fsm_11 = 5'b1011;
parameter    ap_ST_st13_fsm_12 = 5'b1100;
parameter    ap_ST_st14_fsm_13 = 5'b1101;
parameter    ap_ST_st15_fsm_14 = 5'b1110;
parameter    ap_ST_st16_fsm_15 = 5'b1111;
parameter    ap_ST_st17_fsm_16 = 5'b10000;
parameter    ap_ST_st18_fsm_17 = 5'b10001;
parameter    ap_ST_st19_fsm_18 = 5'b10010;
parameter    ap_ST_st20_fsm_19 = 5'b10011;
parameter    ap_ST_st21_fsm_20 = 5'b10100;
parameter    ap_ST_st22_fsm_21 = 5'b10101;
parameter    ap_ST_st23_fsm_22 = 5'b10110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv11_400 = 11'b10000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv20_0 = 20'b00000000000000000000;
parameter    ap_const_lv116_B504F667F3CB4B6 = 116'b101101010000010011110110011001111111001111001011010010110110;
parameter    ap_const_lv32_64 = 32'b1100100;
parameter    ap_const_lv32_73 = 32'b1110011;
parameter    ap_true = 1'b1;


combine_currentFrame_V #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
currentFrame_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( currentFrame_V_address0 ),
    .ce0( currentFrame_V_ce0 ),
    .q0( currentFrame_V_q0 )
);

pitchshifting_wn_V_1 #(
    .DataWidth( 20 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
wn_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( wn_V_address0 ),
    .ce0( wn_V_ce0 ),
    .q0( wn_V_q0 )
);

pitchshifting_deltaPhiPrimeMod_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
magFrame_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( magFrame_V_address0 ),
    .ce0( magFrame_V_ce0 ),
    .we0( magFrame_V_we0 ),
    .d0( magFrame_V_d0 ),
    .q0( magFrame_V_q0 )
);

pitchshifting_deltaPhiPrimeMod_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
phaseFrame_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( phaseFrame_V_address0 ),
    .ce0( phaseFrame_V_ce0 ),
    .we0( phaseFrame_V_we0 ),
    .d0( phaseFrame_V_d0 ),
    .q0( phaseFrame_V_q0 )
);

combine_previousPhase_V #(
    .DataWidth( 1 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
previousPhase_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( previousPhase_V_address0 ),
    .ce0( previousPhase_V_ce0 ),
    .we0( previousPhase_V_we0 ),
    .d0( previousPhase_V_d0 ),
    .q0( previousPhase_V_q0 )
);

combine_time_domain_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
time_domain_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( time_domain_V_address0 ),
    .ce0( time_domain_V_ce0 ),
    .we0( time_domain_V_we0 ),
    .d0( time_domain_V_d0 )
);

pitchshifting grp_pitchshifting_fu_123(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_pitchshifting_fu_123_ap_start ),
    .ap_done( grp_pitchshifting_fu_123_ap_done ),
    .ap_idle( grp_pitchshifting_fu_123_ap_idle ),
    .ap_ready( grp_pitchshifting_fu_123_ap_ready ),
    .amplitude_V_address0( grp_pitchshifting_fu_123_amplitude_V_address0 ),
    .amplitude_V_ce0( grp_pitchshifting_fu_123_amplitude_V_ce0 ),
    .amplitude_V_q0( grp_pitchshifting_fu_123_amplitude_V_q0 ),
    .angle_V_address0( grp_pitchshifting_fu_123_angle_V_address0 ),
    .angle_V_ce0( grp_pitchshifting_fu_123_angle_V_ce0 ),
    .angle_V_q0( grp_pitchshifting_fu_123_angle_V_q0 ),
    .previousPhase_V_address0( grp_pitchshifting_fu_123_previousPhase_V_address0 ),
    .previousPhase_V_ce0( grp_pitchshifting_fu_123_previousPhase_V_ce0 ),
    .previousPhase_V_q0( grp_pitchshifting_fu_123_previousPhase_V_q0 ),
    .time_domain_V_address0( grp_pitchshifting_fu_123_time_domain_V_address0 ),
    .time_domain_V_ce0( grp_pitchshifting_fu_123_time_domain_V_ce0 ),
    .time_domain_V_we0( grp_pitchshifting_fu_123_time_domain_V_we0 ),
    .time_domain_V_d0( grp_pitchshifting_fu_123_time_domain_V_d0 )
);

FFT grp_FFT_fu_135(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_FFT_fu_135_ap_start ),
    .ap_done( grp_FFT_fu_135_ap_done ),
    .ap_idle( grp_FFT_fu_135_ap_idle ),
    .ap_ready( grp_FFT_fu_135_ap_ready ),
    .xreal_V_address0( grp_FFT_fu_135_xreal_V_address0 ),
    .xreal_V_ce0( grp_FFT_fu_135_xreal_V_ce0 ),
    .xreal_V_we0( grp_FFT_fu_135_xreal_V_we0 ),
    .xreal_V_d0( grp_FFT_fu_135_xreal_V_d0 ),
    .xreal_V_q0( grp_FFT_fu_135_xreal_V_q0 ),
    .xreal_V_address1( grp_FFT_fu_135_xreal_V_address1 ),
    .xreal_V_ce1( grp_FFT_fu_135_xreal_V_ce1 ),
    .xreal_V_q1( grp_FFT_fu_135_xreal_V_q1 ),
    .ximag_V_address0( grp_FFT_fu_135_ximag_V_address0 ),
    .ximag_V_ce0( grp_FFT_fu_135_ximag_V_ce0 ),
    .ximag_V_we0( grp_FFT_fu_135_ximag_V_we0 ),
    .ximag_V_d0( grp_FFT_fu_135_ximag_V_d0 ),
    .ximag_V_q0( grp_FFT_fu_135_ximag_V_q0 ),
    .ximag_V_address1( grp_FFT_fu_135_ximag_V_address1 ),
    .ximag_V_ce1( grp_FFT_fu_135_ximag_V_ce1 ),
    .ximag_V_q1( grp_FFT_fu_135_ximag_V_q1 )
);

cal_mag_phase grp_cal_mag_phase_fu_143(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_cal_mag_phase_fu_143_ap_start ),
    .ap_done( grp_cal_mag_phase_fu_143_ap_done ),
    .ap_idle( grp_cal_mag_phase_fu_143_ap_idle ),
    .ap_ready( grp_cal_mag_phase_fu_143_ap_ready ),
    .magFrame_V_address0( grp_cal_mag_phase_fu_143_magFrame_V_address0 ),
    .magFrame_V_ce0( grp_cal_mag_phase_fu_143_magFrame_V_ce0 ),
    .magFrame_V_we0( grp_cal_mag_phase_fu_143_magFrame_V_we0 ),
    .magFrame_V_d0( grp_cal_mag_phase_fu_143_magFrame_V_d0 ),
    .phaseFrame_V_address0( grp_cal_mag_phase_fu_143_phaseFrame_V_address0 ),
    .phaseFrame_V_ce0( grp_cal_mag_phase_fu_143_phaseFrame_V_ce0 ),
    .phaseFrame_V_we0( grp_cal_mag_phase_fu_143_phaseFrame_V_we0 ),
    .phaseFrame_V_d0( grp_cal_mag_phase_fu_143_phaseFrame_V_d0 ),
    .real_V_address0( grp_cal_mag_phase_fu_143_real_V_address0 ),
    .real_V_ce0( grp_cal_mag_phase_fu_143_real_V_ce0 ),
    .real_V_q0( grp_cal_mag_phase_fu_143_real_V_q0 ),
    .imag_V_address0( grp_cal_mag_phase_fu_143_imag_V_address0 ),
    .imag_V_ce0( grp_cal_mag_phase_fu_143_imag_V_ce0 ),
    .imag_V_q0( grp_cal_mag_phase_fu_143_imag_V_q0 )
);

combine_mul_57ns_60ns_116_14 #(
    .ID( 53 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 57 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 116 ))
combine_mul_57ns_60ns_116_14_U53(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_196_p0 ),
    .din1( grp_fu_196_p1 ),
    .ce( grp_fu_196_ce ),
    .dout( grp_fu_196_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_FFT_fu_135_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_FFT_fu_135_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_FFT_fu_135_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond1_fu_155_p2 == ap_const_lv1_0))) begin
            grp_FFT_fu_135_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_FFT_fu_135_ap_ready)) begin
            grp_FFT_fu_135_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// grp_cal_mag_phase_fu_143_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_cal_mag_phase_fu_143_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_cal_mag_phase_fu_143_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st20_fsm_19 == ap_CS_fsm)) begin
            grp_cal_mag_phase_fu_143_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_cal_mag_phase_fu_143_ap_ready)) begin
            grp_cal_mag_phase_fu_143_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// grp_pitchshifting_fu_123_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_pitchshifting_fu_123_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_pitchshifting_fu_123_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st22_fsm_21 == ap_CS_fsm)) begin
            grp_pitchshifting_fu_123_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_pitchshifting_fu_123_ap_ready)) begin
            grp_pitchshifting_fu_123_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st18_fsm_17 == ap_CS_fsm)) begin
        i_reg_111 <= i_1_reg_220;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_111 <= ap_const_lv11_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        currentFrame_V_load_reg_240 <= currentFrame_V_q0;
        wn_V_load_reg_245 <= wn_V_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        i_1_reg_220 <= i_1_fu_161_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        tmp_3_reg_250 <= tmp_3_fu_179_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_155_p2 == ap_const_lv1_0))) begin
        tmp_reg_225[0] <= tmp_fu_167_p1[0];
tmp_reg_225[1] <= tmp_fu_167_p1[1];
tmp_reg_225[2] <= tmp_fu_167_p1[2];
tmp_reg_225[3] <= tmp_fu_167_p1[3];
tmp_reg_225[4] <= tmp_fu_167_p1[4];
tmp_reg_225[5] <= tmp_fu_167_p1[5];
tmp_reg_225[6] <= tmp_fu_167_p1[6];
tmp_reg_225[7] <= tmp_fu_167_p1[7];
tmp_reg_225[8] <= tmp_fu_167_p1[8];
tmp_reg_225[9] <= tmp_fu_167_p1[9];
tmp_reg_225[10] <= tmp_fu_167_p1[10];
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_ap_done)
begin
    if (((ap_ST_st23_fsm_22 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_pitchshifting_fu_123_ap_done))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_ap_done)
begin
    if (((ap_ST_st23_fsm_22 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_pitchshifting_fu_123_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// currentFrameWindowed_V_address0 assign process. ///
always @ (ap_CS_fsm or tmp_reg_225 or grp_FFT_fu_135_xreal_V_address0 or grp_cal_mag_phase_fu_143_real_V_address0)
begin
    if ((ap_ST_st18_fsm_17 == ap_CS_fsm)) begin
        currentFrameWindowed_V_address0 = tmp_reg_225;
    end else if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        currentFrameWindowed_V_address0 = grp_cal_mag_phase_fu_143_real_V_address0;
    end else if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        currentFrameWindowed_V_address0 = grp_FFT_fu_135_xreal_V_address0;
    end else begin
        currentFrameWindowed_V_address0 = tmp_reg_225;
    end
end

/// currentFrameWindowed_V_ce0 assign process. ///
always @ (ap_CS_fsm or grp_FFT_fu_135_xreal_V_ce0 or grp_cal_mag_phase_fu_143_real_V_ce0)
begin
    if ((ap_ST_st18_fsm_17 == ap_CS_fsm)) begin
        currentFrameWindowed_V_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        currentFrameWindowed_V_ce0 = grp_cal_mag_phase_fu_143_real_V_ce0;
    end else if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        currentFrameWindowed_V_ce0 = grp_FFT_fu_135_xreal_V_ce0;
    end else begin
        currentFrameWindowed_V_ce0 = ap_const_logic_0;
    end
end

/// currentFrameWindowed_V_ce1 assign process. ///
always @ (ap_CS_fsm or grp_FFT_fu_135_xreal_V_ce1)
begin
    if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        currentFrameWindowed_V_ce1 = grp_FFT_fu_135_xreal_V_ce1;
    end else begin
        currentFrameWindowed_V_ce1 = ap_const_logic_0;
    end
end

/// currentFrameWindowed_V_d0 assign process. ///
always @ (ap_CS_fsm or grp_FFT_fu_135_xreal_V_d0 or tmp_6_fu_212_p1)
begin
    if ((ap_ST_st18_fsm_17 == ap_CS_fsm)) begin
        currentFrameWindowed_V_d0 = tmp_6_fu_212_p1;
    end else if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        currentFrameWindowed_V_d0 = grp_FFT_fu_135_xreal_V_d0;
    end else begin
        currentFrameWindowed_V_d0 = tmp_6_fu_212_p1;
    end
end

/// currentFrameWindowed_V_we0 assign process. ///
always @ (ap_CS_fsm or grp_FFT_fu_135_xreal_V_we0)
begin
    if ((ap_ST_st18_fsm_17 == ap_CS_fsm)) begin
        currentFrameWindowed_V_we0 = ap_const_logic_1;
    end else if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        currentFrameWindowed_V_we0 = grp_FFT_fu_135_xreal_V_we0;
    end else begin
        currentFrameWindowed_V_we0 = ap_const_logic_0;
    end
end

/// currentFrame_V_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_155_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_155_p2 == ap_const_lv1_0))) begin
        currentFrame_V_ce0 = ap_const_logic_1;
    end else begin
        currentFrame_V_ce0 = ap_const_logic_0;
    end
end

/// imag_V_address0 assign process. ///
always @ (ap_CS_fsm or grp_FFT_fu_135_ximag_V_address0 or grp_cal_mag_phase_fu_143_imag_V_address0)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        imag_V_address0 = grp_cal_mag_phase_fu_143_imag_V_address0;
    end else if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        imag_V_address0 = grp_FFT_fu_135_ximag_V_address0;
    end else begin
        imag_V_address0 = grp_cal_mag_phase_fu_143_imag_V_address0;
    end
end

/// imag_V_ce0 assign process. ///
always @ (ap_CS_fsm or grp_FFT_fu_135_ximag_V_ce0 or grp_cal_mag_phase_fu_143_imag_V_ce0)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        imag_V_ce0 = grp_cal_mag_phase_fu_143_imag_V_ce0;
    end else if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        imag_V_ce0 = grp_FFT_fu_135_ximag_V_ce0;
    end else begin
        imag_V_ce0 = ap_const_logic_0;
    end
end

/// imag_V_ce1 assign process. ///
always @ (ap_CS_fsm or grp_FFT_fu_135_ximag_V_ce1)
begin
    if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        imag_V_ce1 = grp_FFT_fu_135_ximag_V_ce1;
    end else begin
        imag_V_ce1 = ap_const_logic_0;
    end
end

/// imag_V_we0 assign process. ///
always @ (ap_CS_fsm or grp_FFT_fu_135_ximag_V_we0)
begin
    if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        imag_V_we0 = grp_FFT_fu_135_ximag_V_we0;
    end else begin
        imag_V_we0 = ap_const_logic_0;
    end
end

/// magFrame_V_address0 assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_amplitude_V_address0 or grp_cal_mag_phase_fu_143_magFrame_V_address0)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        magFrame_V_address0 = grp_cal_mag_phase_fu_143_magFrame_V_address0;
    end else if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        magFrame_V_address0 = grp_pitchshifting_fu_123_amplitude_V_address0;
    end else begin
        magFrame_V_address0 = grp_cal_mag_phase_fu_143_magFrame_V_address0;
    end
end

/// magFrame_V_ce0 assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_amplitude_V_ce0 or grp_cal_mag_phase_fu_143_magFrame_V_ce0)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        magFrame_V_ce0 = grp_cal_mag_phase_fu_143_magFrame_V_ce0;
    end else if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        magFrame_V_ce0 = grp_pitchshifting_fu_123_amplitude_V_ce0;
    end else begin
        magFrame_V_ce0 = ap_const_logic_0;
    end
end

/// magFrame_V_we0 assign process. ///
always @ (ap_CS_fsm or grp_cal_mag_phase_fu_143_magFrame_V_we0)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        magFrame_V_we0 = grp_cal_mag_phase_fu_143_magFrame_V_we0;
    end else begin
        magFrame_V_we0 = ap_const_logic_0;
    end
end

/// phaseFrame_V_address0 assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_angle_V_address0 or grp_cal_mag_phase_fu_143_phaseFrame_V_address0)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        phaseFrame_V_address0 = grp_cal_mag_phase_fu_143_phaseFrame_V_address0;
    end else if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        phaseFrame_V_address0 = grp_pitchshifting_fu_123_angle_V_address0;
    end else begin
        phaseFrame_V_address0 = grp_cal_mag_phase_fu_143_phaseFrame_V_address0;
    end
end

/// phaseFrame_V_ce0 assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_angle_V_ce0 or grp_cal_mag_phase_fu_143_phaseFrame_V_ce0)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        phaseFrame_V_ce0 = grp_cal_mag_phase_fu_143_phaseFrame_V_ce0;
    end else if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        phaseFrame_V_ce0 = grp_pitchshifting_fu_123_angle_V_ce0;
    end else begin
        phaseFrame_V_ce0 = ap_const_logic_0;
    end
end

/// phaseFrame_V_we0 assign process. ///
always @ (ap_CS_fsm or grp_cal_mag_phase_fu_143_phaseFrame_V_we0)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        phaseFrame_V_we0 = grp_cal_mag_phase_fu_143_phaseFrame_V_we0;
    end else begin
        phaseFrame_V_we0 = ap_const_logic_0;
    end
end

/// previousPhase_V_address0 assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_previousPhase_V_address0)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        previousPhase_V_address0 = ap_const_lv64_0;
    end else if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        previousPhase_V_address0 = grp_pitchshifting_fu_123_previousPhase_V_address0;
    end else begin
        previousPhase_V_address0 = ap_const_lv64_0;
    end
end

/// previousPhase_V_ce0 assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_previousPhase_V_ce0 or grp_cal_mag_phase_fu_143_ap_done)
begin
    if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_cal_mag_phase_fu_143_ap_done))) begin
        previousPhase_V_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        previousPhase_V_ce0 = grp_pitchshifting_fu_123_previousPhase_V_ce0;
    end else begin
        previousPhase_V_ce0 = ap_const_logic_0;
    end
end

/// previousPhase_V_we0 assign process. ///
always @ (ap_CS_fsm or grp_cal_mag_phase_fu_143_ap_done)
begin
    if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_cal_mag_phase_fu_143_ap_done))) begin
        previousPhase_V_we0 = ap_const_logic_1;
    end else begin
        previousPhase_V_we0 = ap_const_logic_0;
    end
end

/// time_domain_V_ce0 assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_time_domain_V_ce0)
begin
    if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        time_domain_V_ce0 = grp_pitchshifting_fu_123_time_domain_V_ce0;
    end else begin
        time_domain_V_ce0 = ap_const_logic_0;
    end
end

/// time_domain_V_we0 assign process. ///
always @ (ap_CS_fsm or grp_pitchshifting_fu_123_time_domain_V_we0)
begin
    if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        time_domain_V_we0 = grp_pitchshifting_fu_123_time_domain_V_we0;
    end else begin
        time_domain_V_we0 = ap_const_logic_0;
    end
end

/// wn_V_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_155_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_155_p2 == ap_const_lv1_0))) begin
        wn_V_ce0 = ap_const_logic_1;
    end else begin
        wn_V_ce0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond1_fu_155_p2 or grp_pitchshifting_fu_123_ap_done or grp_FFT_fu_135_ap_done or grp_cal_mag_phase_fu_143_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(exitcond1_fu_155_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
        ap_ST_st9_fsm_8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
        ap_ST_st10_fsm_9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
        ap_ST_st11_fsm_10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
        ap_ST_st13_fsm_12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
        ap_ST_st14_fsm_13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
        ap_ST_st15_fsm_14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
        ap_ST_st16_fsm_15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
        ap_ST_st17_fsm_16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
        ap_ST_st18_fsm_17 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        ap_ST_st19_fsm_18 : 
            if (~(ap_const_logic_0 == grp_FFT_fu_135_ap_done)) begin
                ap_NS_fsm = ap_ST_st20_fsm_19;
            end else begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end
        ap_ST_st20_fsm_19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
        ap_ST_st21_fsm_20 : 
            if (~(ap_const_logic_0 == grp_cal_mag_phase_fu_143_ap_done)) begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end else begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end
        ap_ST_st22_fsm_21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
        ap_ST_st23_fsm_22 : 
            if (~(ap_const_logic_0 == grp_pitchshifting_fu_123_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign currentFrameWindowed_V_address1 = grp_FFT_fu_135_xreal_V_address1;
assign currentFrame_V_address0 = tmp_fu_167_p1;
assign exitcond1_fu_155_p2 = (i_reg_111 == ap_const_lv11_400? 1'b1: 1'b0);
assign grp_FFT_fu_135_ap_start = grp_FFT_fu_135_ap_start_ap_start_reg;
assign grp_FFT_fu_135_ximag_V_q0 = imag_V_q0;
assign grp_FFT_fu_135_ximag_V_q1 = imag_V_q1;
assign grp_FFT_fu_135_xreal_V_q0 = currentFrameWindowed_V_q0;
assign grp_FFT_fu_135_xreal_V_q1 = currentFrameWindowed_V_q1;
assign grp_cal_mag_phase_fu_143_ap_start = grp_cal_mag_phase_fu_143_ap_start_ap_start_reg;
assign grp_cal_mag_phase_fu_143_imag_V_q0 = imag_V_q0;
assign grp_cal_mag_phase_fu_143_real_V_q0 = currentFrameWindowed_V_q0;
assign grp_fu_196_ce = ap_const_logic_1;
assign grp_fu_196_p0 = grp_fu_196_p00;
assign grp_fu_196_p00 = $unsigned(t_V_tr_fu_185_p3);
assign grp_fu_196_p1 = ap_const_lv116_B504F667F3CB4B6;
assign grp_pitchshifting_fu_123_amplitude_V_q0 = magFrame_V_q0;
assign grp_pitchshifting_fu_123_angle_V_q0 = phaseFrame_V_q0;
assign grp_pitchshifting_fu_123_ap_start = grp_pitchshifting_fu_123_ap_start_ap_start_reg;
assign grp_pitchshifting_fu_123_previousPhase_V_q0 = previousPhase_V_q0;
assign i_1_fu_161_p2 = (i_reg_111 + ap_const_lv11_1);
assign imag_V_address1 = grp_FFT_fu_135_ximag_V_address1;
assign imag_V_d0 = grp_FFT_fu_135_ximag_V_d0;
assign magFrame_V_d0 = grp_cal_mag_phase_fu_143_magFrame_V_d0;
assign phaseFrame_V_d0 = grp_cal_mag_phase_fu_143_phaseFrame_V_d0;
assign previousPhase_V_d0 = ap_const_lv1_0;
assign t_V_tr_fu_185_p3 = {{tmp_3_reg_250}, {ap_const_lv20_0}};
assign time_domain_V_address0 = grp_pitchshifting_fu_123_time_domain_V_address0;
assign time_domain_V_d0 = grp_pitchshifting_fu_123_time_domain_V_d0;
assign tmp_3_fu_179_p0 = tmp_3_fu_179_p00;
assign tmp_3_fu_179_p00 = $unsigned(wn_V_load_reg_245);
assign tmp_3_fu_179_p1 = tmp_3_fu_179_p10;
assign tmp_3_fu_179_p10 = $unsigned(currentFrame_V_load_reg_240);
assign tmp_3_fu_179_p2 = ($signed({{1'b0}, {tmp_3_fu_179_p0}}) * $signed({{1'b0}, {tmp_3_fu_179_p1}}));
assign tmp_6_fu_212_p1 = $unsigned(trunc_cast_fu_202_p4);
assign tmp_fu_167_p1 = $unsigned(i_reg_111);
assign trunc_cast_fu_202_p4 = {{grp_fu_196_p2[ap_const_lv32_73 : ap_const_lv32_64]}};
assign wn_V_address0 = tmp_fu_167_p1;
always @ (posedge ap_clk)
begin
    tmp_reg_225[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end



endmodule //combine

