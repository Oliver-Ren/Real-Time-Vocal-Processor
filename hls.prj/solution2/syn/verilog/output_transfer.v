// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module output_transfer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_array_V_address0,
        output_array_V_ce0,
        output_array_V_q0,
        transfer_array_V_address0,
        transfer_array_V_ce0,
        transfer_array_V_we0,
        transfer_array_V_d0
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] output_array_V_address0;
output   output_array_V_ce0;
input  [31:0] output_array_V_q0;
output  [8:0] transfer_array_V_address0;
output   transfer_array_V_ce0;
output   transfer_array_V_we0;
output  [31:0] transfer_array_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_array_V_ce0;
reg transfer_array_V_ce0;
reg transfer_array_V_we0;
reg   [3:0] ap_CS_fsm = 4'b0000;
reg   [31:0] base_output = 32'b00000000000000000000000000000000;
reg   [10:0] output_buffer_V_address0;
reg    output_buffer_V_ce0;
reg    output_buffer_V_we0;
reg   [31:0] output_buffer_V_d0;
wire   [31:0] output_buffer_V_q0;
wire   [10:0] output_buffer_V_address1;
reg    output_buffer_V_ce1;
reg    output_buffer_V_we1;
wire   [31:0] output_buffer_V_d1;
reg   [31:0] base_output_load_reg_394;
wire   [0:0] sel_tmp_fu_188_p2;
reg   [0:0] sel_tmp_reg_400;
wire   [10:0] offset_cast_fu_236_p1;
reg   [10:0] offset_cast_reg_404;
wire   [0:0] exitcond7_fu_240_p2;
reg   [0:0] exitcond7_reg_410;
wire   [10:0] i_5_fu_246_p2;
reg   [10:0] i_5_reg_414;
reg   [10:0] output_buffer_V_addr_reg_419;
wire   [0:0] exitcond6_fu_274_p2;
reg   [0:0] exitcond6_reg_429;
wire   [8:0] jj_1_fu_280_p2;
reg   [8:0] jj_1_reg_433;
reg   [10:0] output_buffer_V_addr_1_reg_438;
wire   [0:0] exitcond5_fu_305_p2;
reg   [0:0] exitcond5_reg_443;
wire   [9:0] j_1_fu_311_p2;
reg   [9:0] j_1_reg_447;
reg   [10:0] output_buffer_V_addr_2_reg_452;
reg   [10:0] i_reg_152;
reg   [8:0] jj_reg_163;
reg   [9:0] j_reg_175;
wire   [63:0] tmp_22_fu_262_p1;
wire   [63:0] tmp_fu_252_p1;
wire   [63:0] tmp_25_fu_295_p1;
wire   [63:0] tmp_26_fu_300_p1;
wire   [63:0] tmp_30_fu_327_p1;
wire   [63:0] tmp_31_fu_332_p1;
wire   [31:0] tmp_28_fu_385_p3;
wire   [31:0] r_V_fu_267_p2;
wire   [0:0] sel_tmp5_fu_194_p2;
wire   [0:0] tmp_32_fu_208_p2;
wire   [9:0] sel_tmp4_cast_fu_200_p3;
wire   [0:0] sel_tmp7_fu_222_p2;
wire   [9:0] sel_tmp6_fu_214_p3;
wire   [9:0] offset_fu_228_p3;
wire   [10:0] tmp_s_fu_257_p2;
wire   [10:0] jj_cast_fu_286_p1;
wire   [10:0] tmp_24_fu_290_p2;
wire   [10:0] j_cast9_fu_317_p1;
wire   [10:0] tmp_29_fu_321_p2;
wire   [31:0] tmp_27_fu_337_p2;
wire   [1:0] tmp_99_fu_350_p1;
wire   [31:0] p_neg_fu_362_p2;
wire   [1:0] tmp_100_fu_367_p1;
wire   [31:0] p_and_t_fu_371_p3;
wire   [0:0] tmp_98_fu_342_p3;
wire   [31:0] p_neg_t_fu_379_p2;
wire   [31:0] p_and_f_fu_354_p3;
reg   [3:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b0000;
parameter    ap_ST_st2_fsm_1 = 4'b1;
parameter    ap_ST_st3_fsm_2 = 4'b10;
parameter    ap_ST_st4_fsm_3 = 4'b11;
parameter    ap_ST_st5_fsm_4 = 4'b100;
parameter    ap_ST_st6_fsm_5 = 4'b101;
parameter    ap_ST_st7_fsm_6 = 4'b110;
parameter    ap_ST_st8_fsm_7 = 4'b111;
parameter    ap_ST_st9_fsm_8 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv10_286 = 10'b1010000110;
parameter    ap_const_lv10_3C9 = 10'b1111001001;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv10_143 = 10'b101000011;
parameter    ap_const_lv11_400 = 11'b10000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv9_143 = 9'b101000011;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv10_2BD = 10'b1010111101;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv11_50C = 11'b10100001100;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv30_0 = 30'b000000000000000000000000000000;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_true = 1'b1;


output_transfer_output_buffer_V #(
    .DataWidth( 32 ),
    .AddressRange( 1993 ),
    .AddressWidth( 11 ))
output_buffer_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( output_buffer_V_address0 ),
    .ce0( output_buffer_V_ce0 ),
    .we0( output_buffer_V_we0 ),
    .d0( output_buffer_V_d0 ),
    .q0( output_buffer_V_q0 ),
    .address1( output_buffer_V_address1 ),
    .ce1( output_buffer_V_ce1 ),
    .we1( output_buffer_V_we1 ),
    .d1( output_buffer_V_d1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond7_reg_410 == ap_const_lv1_0))) begin
        i_reg_152 <= i_5_reg_414;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_152 <= ap_const_lv11_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st6_fsm_5 == ap_CS_fsm) & ~(sel_tmp_reg_400 == ap_const_lv1_0))) begin
        j_reg_175 <= ap_const_lv10_0;
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond5_reg_443))) begin
        j_reg_175 <= j_1_reg_447;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond7_fu_240_p2 == ap_const_lv1_0))) begin
        jj_reg_163 <= ap_const_lv9_0;
    end else if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond6_reg_429))) begin
        jj_reg_163 <= jj_1_reg_433;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        base_output <= tmp_28_fu_385_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        base_output_load_reg_394 <= base_output;
        offset_cast_reg_404[0] <= offset_cast_fu_236_p1[0];
offset_cast_reg_404[1] <= offset_cast_fu_236_p1[1];
offset_cast_reg_404[2] <= offset_cast_fu_236_p1[2];
offset_cast_reg_404[3] <= offset_cast_fu_236_p1[3];
offset_cast_reg_404[6] <= offset_cast_fu_236_p1[6];
offset_cast_reg_404[7] <= offset_cast_fu_236_p1[7];
offset_cast_reg_404[8] <= offset_cast_fu_236_p1[8];
offset_cast_reg_404[9] <= offset_cast_fu_236_p1[9];
        sel_tmp_reg_400 <= sel_tmp_fu_188_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        exitcond5_reg_443 <= exitcond5_fu_305_p2;
        j_1_reg_447 <= j_1_fu_311_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        exitcond6_reg_429 <= exitcond6_fu_274_p2;
        jj_1_reg_433 <= jj_1_fu_280_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        exitcond7_reg_410 <= exitcond7_fu_240_p2;
        i_5_reg_414 <= i_5_fu_246_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond6_fu_274_p2))) begin
        output_buffer_V_addr_1_reg_438 <= tmp_25_fu_295_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond5_fu_305_p2))) begin
        output_buffer_V_addr_2_reg_452 <= tmp_30_fu_327_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond7_fu_240_p2 == ap_const_lv1_0))) begin
        output_buffer_V_addr_reg_419 <= tmp_22_fu_262_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | (ap_ST_st9_fsm_8 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// output_array_V_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond7_fu_240_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond7_fu_240_p2 == ap_const_lv1_0))) begin
        output_array_V_ce0 = ap_const_logic_1;
    end else begin
        output_array_V_ce0 = ap_const_logic_0;
    end
end

/// output_buffer_V_address0 assign process. ///
always @ (ap_CS_fsm or output_buffer_V_addr_reg_419 or output_buffer_V_addr_1_reg_438 or tmp_22_fu_262_p1 or tmp_25_fu_295_p1 or tmp_30_fu_327_p1 or tmp_31_fu_332_p1)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        output_buffer_V_address0 = tmp_31_fu_332_p1;
    end else if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        output_buffer_V_address0 = output_buffer_V_addr_1_reg_438;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        output_buffer_V_address0 = output_buffer_V_addr_reg_419;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        output_buffer_V_address0 = tmp_30_fu_327_p1;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        output_buffer_V_address0 = tmp_25_fu_295_p1;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        output_buffer_V_address0 = tmp_22_fu_262_p1;
    end else begin
        output_buffer_V_address0 = tmp_31_fu_332_p1;
    end
end

/// output_buffer_V_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond7_fu_240_p2 or exitcond7_reg_410 or exitcond6_fu_274_p2 or exitcond6_reg_429 or exitcond5_fu_305_p2 or exitcond5_reg_443)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond7_fu_240_p2 == ap_const_lv1_0)) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond6_fu_274_p2)) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond5_fu_305_p2)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond7_reg_410 == ap_const_lv1_0)) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond6_reg_429)) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond5_reg_443)))) begin
        output_buffer_V_ce0 = ap_const_logic_1;
    end else begin
        output_buffer_V_ce0 = ap_const_logic_0;
    end
end

/// output_buffer_V_ce1 assign process. ///
always @ (ap_CS_fsm or exitcond5_reg_443)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond5_reg_443))) begin
        output_buffer_V_ce1 = ap_const_logic_1;
    end else begin
        output_buffer_V_ce1 = ap_const_logic_0;
    end
end

/// output_buffer_V_d0 assign process. ///
always @ (ap_CS_fsm or output_buffer_V_q0 or r_V_fu_267_p2)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        output_buffer_V_d0 = output_buffer_V_q0;
    end else if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        output_buffer_V_d0 = ap_const_lv32_0;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        output_buffer_V_d0 = r_V_fu_267_p2;
    end else begin
        output_buffer_V_d0 = r_V_fu_267_p2;
    end
end

/// output_buffer_V_we0 assign process. ///
always @ (ap_CS_fsm or exitcond7_reg_410 or exitcond6_reg_429 or exitcond5_reg_443)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond7_reg_410 == ap_const_lv1_0)) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond6_reg_429)) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond5_reg_443)))) begin
        output_buffer_V_we0 = ap_const_logic_1;
    end else begin
        output_buffer_V_we0 = ap_const_logic_0;
    end
end

/// output_buffer_V_we1 assign process. ///
always @ (ap_CS_fsm or exitcond5_reg_443)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond5_reg_443))) begin
        output_buffer_V_we1 = ap_const_logic_1;
    end else begin
        output_buffer_V_we1 = ap_const_logic_0;
    end
end

/// transfer_array_V_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond6_reg_429)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond6_reg_429))) begin
        transfer_array_V_ce0 = ap_const_logic_1;
    end else begin
        transfer_array_V_ce0 = ap_const_logic_0;
    end
end

/// transfer_array_V_we0 assign process. ///
always @ (ap_CS_fsm or exitcond6_reg_429)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond6_reg_429))) begin
        transfer_array_V_we0 = ap_const_logic_1;
    end else begin
        transfer_array_V_we0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or sel_tmp_reg_400 or exitcond7_fu_240_p2 or exitcond6_fu_274_p2 or exitcond5_fu_305_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((exitcond7_fu_240_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        ap_ST_st4_fsm_3 : 
            if ((ap_const_lv1_0 == exitcond6_fu_274_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st6_fsm_5 : 
            if ((sel_tmp_reg_400 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        ap_ST_st7_fsm_6 : 
            if ((ap_const_lv1_0 == exitcond5_fu_305_p2)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st9_fsm_8 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign exitcond5_fu_305_p2 = (j_reg_175 == ap_const_lv10_2BD? 1'b1: 1'b0);
assign exitcond6_fu_274_p2 = (jj_reg_163 == ap_const_lv9_143? 1'b1: 1'b0);
assign exitcond7_fu_240_p2 = (i_reg_152 == ap_const_lv11_400? 1'b1: 1'b0);
assign i_5_fu_246_p2 = (i_reg_152 + ap_const_lv11_1);
assign j_1_fu_311_p2 = (j_reg_175 + ap_const_lv10_1);
assign j_cast9_fu_317_p1 = $unsigned(j_reg_175);
assign jj_1_fu_280_p2 = (jj_reg_163 + ap_const_lv9_1);
assign jj_cast_fu_286_p1 = $unsigned(jj_reg_163);
assign offset_cast_fu_236_p1 = $unsigned(offset_fu_228_p3);
assign offset_fu_228_p3 = ((sel_tmp7_fu_222_p2)? ap_const_lv10_143: sel_tmp6_fu_214_p3);
assign output_array_V_address0 = tmp_fu_252_p1;
assign output_buffer_V_address1 = output_buffer_V_addr_2_reg_452;
assign output_buffer_V_d1 = ap_const_lv32_0;
assign p_and_f_fu_354_p3 = {{ap_const_lv30_0}, {tmp_99_fu_350_p1}};
assign p_and_t_fu_371_p3 = {{ap_const_lv30_0}, {tmp_100_fu_367_p1}};
assign p_neg_fu_362_p2 = (base_output_load_reg_394 ^ ap_const_lv32_FFFFFFFF);
assign p_neg_t_fu_379_p2 = (ap_const_lv32_0 - p_and_t_fu_371_p3);
assign r_V_fu_267_p2 = (output_array_V_q0 + output_buffer_V_q0);
assign sel_tmp4_cast_fu_200_p3 = ((sel_tmp5_fu_194_p2)? ap_const_lv10_286: ap_const_lv10_3C9);
assign sel_tmp5_fu_194_p2 = (base_output == ap_const_lv32_2? 1'b1: 1'b0);
assign sel_tmp6_fu_214_p3 = ((tmp_32_fu_208_p2)? sel_tmp4_cast_fu_200_p3: ap_const_lv10_0);
assign sel_tmp7_fu_222_p2 = (base_output == ap_const_lv32_1? 1'b1: 1'b0);
assign sel_tmp_fu_188_p2 = (base_output == ap_const_lv32_3? 1'b1: 1'b0);
assign tmp_100_fu_367_p1 = p_neg_fu_362_p2[1:0];
assign tmp_22_fu_262_p1 = $unsigned(tmp_s_fu_257_p2);
assign tmp_24_fu_290_p2 = (jj_cast_fu_286_p1 + offset_cast_reg_404);
assign tmp_25_fu_295_p1 = $unsigned(tmp_24_fu_290_p2);
assign tmp_26_fu_300_p1 = $unsigned(jj_reg_163);
assign tmp_27_fu_337_p2 = (base_output_load_reg_394 + ap_const_lv32_1);
assign tmp_28_fu_385_p3 = ((tmp_98_fu_342_p3)? p_neg_t_fu_379_p2: p_and_f_fu_354_p3);
assign tmp_29_fu_321_p2 = (j_cast9_fu_317_p1 + ap_const_lv11_50C);
assign tmp_30_fu_327_p1 = $unsigned(tmp_29_fu_321_p2);
assign tmp_31_fu_332_p1 = $unsigned(j_reg_175);
assign tmp_32_fu_208_p2 = (sel_tmp5_fu_194_p2 | sel_tmp_fu_188_p2);
assign tmp_98_fu_342_p3 = tmp_27_fu_337_p2[ap_const_lv32_1F];
assign tmp_99_fu_350_p1 = tmp_27_fu_337_p2[1:0];
assign tmp_fu_252_p1 = $unsigned(i_reg_152);
assign tmp_s_fu_257_p2 = (i_reg_152 + offset_cast_reg_404);
assign transfer_array_V_address0 = tmp_26_fu_300_p1;
assign transfer_array_V_d0 = output_buffer_V_q0;
always @ (posedge ap_clk)
begin
    offset_cast_reg_404[5:4] <= 2'b00;
    offset_cast_reg_404[10] <= 1'b0;
end



endmodule //output_transfer

