-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity combine is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_array_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_array_V_ce0 : OUT STD_LOGIC;
    input_array_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_array_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_array_V_ce0 : OUT STD_LOGIC;
    output_array_V_we0 : OUT STD_LOGIC;
    output_array_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of combine is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st11_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st12_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st13_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st14_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st15_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st16_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv44_2D : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000101101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal wn_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal wn_V_1_ce0 : STD_LOGIC;
    signal wn_V_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_145 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_rec1_fu_196_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_rec_fu_213_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_225_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_296 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_296_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_296_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_296_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_296_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_296_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_reg_321 : STD_LOGIC_VECTOR (37 downto 0);
    signal exitcond6_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentFrameWindowed_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal currentFrameWindowed_V_ce0 : STD_LOGIC;
    signal currentFrameWindowed_V_we0 : STD_LOGIC;
    signal currentFrameWindowed_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentFrameWindowed_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentFrameWindowed_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal currentFrameWindowed_V_ce1 : STD_LOGIC;
    signal currentFrameWindowed_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal imag_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_V_ce0 : STD_LOGIC;
    signal imag_V_we0 : STD_LOGIC;
    signal imag_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal imag_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal imag_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_V_ce1 : STD_LOGIC;
    signal imag_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal magFrame_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal magFrame_V_ce0 : STD_LOGIC;
    signal magFrame_V_we0 : STD_LOGIC;
    signal magFrame_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal magFrame_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal phaseFrame_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal phaseFrame_V_ce0 : STD_LOGIC;
    signal phaseFrame_V_we0 : STD_LOGIC;
    signal phaseFrame_V_d0 : STD_LOGIC_VECTOR (10 downto 0);
    signal phaseFrame_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal phaseFrame_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal phaseFrame_V_ce1 : STD_LOGIC;
    signal phaseFrame_V_we1 : STD_LOGIC;
    signal phaseFrame_V_d1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pitchshifting_fu_157_ap_start : STD_LOGIC;
    signal grp_pitchshifting_fu_157_ap_done : STD_LOGIC;
    signal grp_pitchshifting_fu_157_ap_idle : STD_LOGIC;
    signal grp_pitchshifting_fu_157_ap_ready : STD_LOGIC;
    signal grp_pitchshifting_fu_157_amplitude_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pitchshifting_fu_157_amplitude_V_ce0 : STD_LOGIC;
    signal grp_pitchshifting_fu_157_amplitude_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pitchshifting_fu_157_angle_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pitchshifting_fu_157_angle_V_ce0 : STD_LOGIC;
    signal grp_pitchshifting_fu_157_angle_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pitchshifting_fu_157_output_array_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pitchshifting_fu_157_output_array_V_ce0 : STD_LOGIC;
    signal grp_pitchshifting_fu_157_output_array_V_we0 : STD_LOGIC;
    signal grp_pitchshifting_fu_157_output_array_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cal_mag_phase_fu_171_ap_start : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_ap_done : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_ap_idle : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_ap_ready : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_magFrame_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cal_mag_phase_fu_171_magFrame_V_ce0 : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_magFrame_V_we0 : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_magFrame_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cal_mag_phase_fu_171_phaseFrame_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cal_mag_phase_fu_171_phaseFrame_V_ce0 : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_phaseFrame_V_we0 : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_phaseFrame_V_d0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_cal_mag_phase_fu_171_phaseFrame_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cal_mag_phase_fu_171_phaseFrame_V_ce1 : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_phaseFrame_V_we1 : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_phaseFrame_V_d1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_cal_mag_phase_fu_171_real_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cal_mag_phase_fu_171_real_V_ce0 : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_real_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cal_mag_phase_fu_171_imag_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cal_mag_phase_fu_171_imag_V_ce0 : STD_LOGIC;
    signal grp_cal_mag_phase_fu_171_imag_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_fu_179_ap_start : STD_LOGIC;
    signal grp_FFT_fu_179_ap_done : STD_LOGIC;
    signal grp_FFT_fu_179_ap_idle : STD_LOGIC;
    signal grp_FFT_fu_179_ap_ready : STD_LOGIC;
    signal grp_FFT_fu_179_xreal_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_FFT_fu_179_xreal_V_ce0 : STD_LOGIC;
    signal grp_FFT_fu_179_xreal_V_we0 : STD_LOGIC;
    signal grp_FFT_fu_179_xreal_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_fu_179_xreal_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_fu_179_xreal_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_FFT_fu_179_xreal_V_ce1 : STD_LOGIC;
    signal grp_FFT_fu_179_xreal_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_fu_179_ximag_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_FFT_fu_179_ximag_V_ce0 : STD_LOGIC;
    signal grp_FFT_fu_179_ximag_V_we0 : STD_LOGIC;
    signal grp_FFT_fu_179_ximag_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_fu_179_ximag_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_fu_179_ximag_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_FFT_fu_179_ximag_V_ce1 : STD_LOGIC;
    signal grp_FFT_fu_179_ximag_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_036_rec_reg_123 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond7_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_039_rec_reg_134 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pitchshifting_fu_157_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_cal_mag_phase_fu_171_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_FFT_fu_179_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal p_036_rec_cast_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_039_rec_cast_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_245_ce : STD_LOGIC;
    signal grp_fu_254_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_245_p00 : STD_LOGIC_VECTOR (37 downto 0);

    component pitchshifting IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        amplitude_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        amplitude_V_ce0 : OUT STD_LOGIC;
        amplitude_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        angle_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        angle_V_ce0 : OUT STD_LOGIC;
        angle_V_q0 : IN STD_LOGIC_VECTOR (10 downto 0);
        output_array_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_array_V_ce0 : OUT STD_LOGIC;
        output_array_V_we0 : OUT STD_LOGIC;
        output_array_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cal_mag_phase IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        magFrame_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        magFrame_V_ce0 : OUT STD_LOGIC;
        magFrame_V_we0 : OUT STD_LOGIC;
        magFrame_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        phaseFrame_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        phaseFrame_V_ce0 : OUT STD_LOGIC;
        phaseFrame_V_we0 : OUT STD_LOGIC;
        phaseFrame_V_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        phaseFrame_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        phaseFrame_V_ce1 : OUT STD_LOGIC;
        phaseFrame_V_we1 : OUT STD_LOGIC;
        phaseFrame_V_d1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        real_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        real_V_ce0 : OUT STD_LOGIC;
        real_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        imag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        imag_V_ce0 : OUT STD_LOGIC;
        imag_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xreal_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        xreal_V_ce0 : OUT STD_LOGIC;
        xreal_V_we0 : OUT STD_LOGIC;
        xreal_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        xreal_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        xreal_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        xreal_V_ce1 : OUT STD_LOGIC;
        xreal_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ximag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ximag_V_ce0 : OUT STD_LOGIC;
        ximag_V_we0 : OUT STD_LOGIC;
        ximag_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ximag_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ximag_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ximag_V_ce1 : OUT STD_LOGIC;
        ximag_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_6ns_32s_38_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component top_mul_38s_6ns_44_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (37 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component pitchshifting_wn_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component pitchshifting_real_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combine_magFrame_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combine_phaseFrame_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (10 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    wn_V_1_U : component pitchshifting_wn_V
    generic map (
        DataWidth => 6,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wn_V_1_address0,
        ce0 => wn_V_1_ce0,
        q0 => wn_V_1_q0);

    currentFrameWindowed_V_U : component pitchshifting_real_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => currentFrameWindowed_V_address0,
        ce0 => currentFrameWindowed_V_ce0,
        we0 => currentFrameWindowed_V_we0,
        d0 => currentFrameWindowed_V_d0,
        q0 => currentFrameWindowed_V_q0,
        address1 => currentFrameWindowed_V_address1,
        ce1 => currentFrameWindowed_V_ce1,
        q1 => currentFrameWindowed_V_q1);

    imag_V_U : component pitchshifting_real_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => imag_V_address0,
        ce0 => imag_V_ce0,
        we0 => imag_V_we0,
        d0 => imag_V_d0,
        q0 => imag_V_q0,
        address1 => imag_V_address1,
        ce1 => imag_V_ce1,
        q1 => imag_V_q1);

    magFrame_V_U : component combine_magFrame_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => magFrame_V_address0,
        ce0 => magFrame_V_ce0,
        we0 => magFrame_V_we0,
        d0 => magFrame_V_d0,
        q0 => magFrame_V_q0);

    phaseFrame_V_U : component combine_phaseFrame_V
    generic map (
        DataWidth => 11,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => phaseFrame_V_address0,
        ce0 => phaseFrame_V_ce0,
        we0 => phaseFrame_V_we0,
        d0 => phaseFrame_V_d0,
        q0 => phaseFrame_V_q0,
        address1 => phaseFrame_V_address1,
        ce1 => phaseFrame_V_ce1,
        we1 => phaseFrame_V_we1,
        d1 => phaseFrame_V_d1);

    grp_pitchshifting_fu_157 : component pitchshifting
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pitchshifting_fu_157_ap_start,
        ap_done => grp_pitchshifting_fu_157_ap_done,
        ap_idle => grp_pitchshifting_fu_157_ap_idle,
        ap_ready => grp_pitchshifting_fu_157_ap_ready,
        amplitude_V_address0 => grp_pitchshifting_fu_157_amplitude_V_address0,
        amplitude_V_ce0 => grp_pitchshifting_fu_157_amplitude_V_ce0,
        amplitude_V_q0 => grp_pitchshifting_fu_157_amplitude_V_q0,
        angle_V_address0 => grp_pitchshifting_fu_157_angle_V_address0,
        angle_V_ce0 => grp_pitchshifting_fu_157_angle_V_ce0,
        angle_V_q0 => grp_pitchshifting_fu_157_angle_V_q0,
        output_array_V_address0 => grp_pitchshifting_fu_157_output_array_V_address0,
        output_array_V_ce0 => grp_pitchshifting_fu_157_output_array_V_ce0,
        output_array_V_we0 => grp_pitchshifting_fu_157_output_array_V_we0,
        output_array_V_d0 => grp_pitchshifting_fu_157_output_array_V_d0);

    grp_cal_mag_phase_fu_171 : component cal_mag_phase
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cal_mag_phase_fu_171_ap_start,
        ap_done => grp_cal_mag_phase_fu_171_ap_done,
        ap_idle => grp_cal_mag_phase_fu_171_ap_idle,
        ap_ready => grp_cal_mag_phase_fu_171_ap_ready,
        magFrame_V_address0 => grp_cal_mag_phase_fu_171_magFrame_V_address0,
        magFrame_V_ce0 => grp_cal_mag_phase_fu_171_magFrame_V_ce0,
        magFrame_V_we0 => grp_cal_mag_phase_fu_171_magFrame_V_we0,
        magFrame_V_d0 => grp_cal_mag_phase_fu_171_magFrame_V_d0,
        phaseFrame_V_address0 => grp_cal_mag_phase_fu_171_phaseFrame_V_address0,
        phaseFrame_V_ce0 => grp_cal_mag_phase_fu_171_phaseFrame_V_ce0,
        phaseFrame_V_we0 => grp_cal_mag_phase_fu_171_phaseFrame_V_we0,
        phaseFrame_V_d0 => grp_cal_mag_phase_fu_171_phaseFrame_V_d0,
        phaseFrame_V_address1 => grp_cal_mag_phase_fu_171_phaseFrame_V_address1,
        phaseFrame_V_ce1 => grp_cal_mag_phase_fu_171_phaseFrame_V_ce1,
        phaseFrame_V_we1 => grp_cal_mag_phase_fu_171_phaseFrame_V_we1,
        phaseFrame_V_d1 => grp_cal_mag_phase_fu_171_phaseFrame_V_d1,
        real_V_address0 => grp_cal_mag_phase_fu_171_real_V_address0,
        real_V_ce0 => grp_cal_mag_phase_fu_171_real_V_ce0,
        real_V_q0 => grp_cal_mag_phase_fu_171_real_V_q0,
        imag_V_address0 => grp_cal_mag_phase_fu_171_imag_V_address0,
        imag_V_ce0 => grp_cal_mag_phase_fu_171_imag_V_ce0,
        imag_V_q0 => grp_cal_mag_phase_fu_171_imag_V_q0);

    grp_FFT_fu_179 : component FFT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_FFT_fu_179_ap_start,
        ap_done => grp_FFT_fu_179_ap_done,
        ap_idle => grp_FFT_fu_179_ap_idle,
        ap_ready => grp_FFT_fu_179_ap_ready,
        xreal_V_address0 => grp_FFT_fu_179_xreal_V_address0,
        xreal_V_ce0 => grp_FFT_fu_179_xreal_V_ce0,
        xreal_V_we0 => grp_FFT_fu_179_xreal_V_we0,
        xreal_V_d0 => grp_FFT_fu_179_xreal_V_d0,
        xreal_V_q0 => grp_FFT_fu_179_xreal_V_q0,
        xreal_V_address1 => grp_FFT_fu_179_xreal_V_address1,
        xreal_V_ce1 => grp_FFT_fu_179_xreal_V_ce1,
        xreal_V_q1 => grp_FFT_fu_179_xreal_V_q1,
        ximag_V_address0 => grp_FFT_fu_179_ximag_V_address0,
        ximag_V_ce0 => grp_FFT_fu_179_ximag_V_ce0,
        ximag_V_we0 => grp_FFT_fu_179_ximag_V_we0,
        ximag_V_d0 => grp_FFT_fu_179_ximag_V_d0,
        ximag_V_q0 => grp_FFT_fu_179_ximag_V_q0,
        ximag_V_address1 => grp_FFT_fu_179_ximag_V_address1,
        ximag_V_ce1 => grp_FFT_fu_179_ximag_V_ce1,
        ximag_V_q1 => grp_FFT_fu_179_ximag_V_q1);

    top_mul_6ns_32s_38_3_U51 : component top_mul_6ns_32s_38_3
    generic map (
        ID => 51,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 32,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_245_p0,
        din1 => grp_fu_245_p1,
        ce => grp_fu_245_ce,
        dout => grp_fu_245_p2);

    top_mul_38s_6ns_44_3_U52 : component top_mul_38s_6ns_44_3
    generic map (
        ID => 52,
        NUM_STAGE => 3,
        din0_WIDTH => 38,
        din1_WIDTH => 6,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p2);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and not((exitcond_fu_219_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_207_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (exitcond_fu_219_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_207_p2))) or ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and not((exitcond_fu_219_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_207_p2)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_207_p2)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_207_p2)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_207_p2)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_207_p2)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_FFT_fu_179_ap_start_ap_start_reg assign process. --
    grp_FFT_fu_179_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_FFT_fu_179_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st11_fsm_4 = ap_CS_fsm)) then 
                    grp_FFT_fu_179_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_FFT_fu_179_ap_ready)) then 
                    grp_FFT_fu_179_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_cal_mag_phase_fu_171_ap_start_ap_start_reg assign process. --
    grp_cal_mag_phase_fu_171_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cal_mag_phase_fu_171_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st13_fsm_6 = ap_CS_fsm)) then 
                    grp_cal_mag_phase_fu_171_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_cal_mag_phase_fu_171_ap_ready)) then 
                    grp_cal_mag_phase_fu_171_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_pitchshifting_fu_157_ap_start_ap_start_reg assign process. --
    grp_pitchshifting_fu_157_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pitchshifting_fu_157_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st15_fsm_8 = ap_CS_fsm)) then 
                    grp_pitchshifting_fu_157_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_pitchshifting_fu_157_ap_ready)) then 
                    grp_pitchshifting_fu_157_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_145 assign process. --
    i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_207_p2)))) then 
                i_reg_145 <= ap_const_lv11_0;
            elsif (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_219_p2 = ap_const_lv1_0))) then 
                i_reg_145 <= i_1_fu_225_p2;
            end if; 
        end if;
    end process;

    -- p_036_rec_reg_123 assign process. --
    p_036_rec_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_190_p2))) then 
                p_036_rec_reg_123 <= p_rec1_fu_196_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                p_036_rec_reg_123 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- p_039_rec_reg_134 assign process. --
    p_039_rec_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_190_p2)))) then 
                p_039_rec_reg_134 <= ap_const_lv11_0;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_fu_207_p2))) then 
                p_039_rec_reg_134 <= p_rec_fu_213_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond_reg_287_pp0_it1 <= exitcond_reg_287;
                ap_reg_ppstg_exitcond_reg_287_pp0_it2 <= ap_reg_ppstg_exitcond_reg_287_pp0_it1;
                ap_reg_ppstg_exitcond_reg_287_pp0_it3 <= ap_reg_ppstg_exitcond_reg_287_pp0_it2;
                ap_reg_ppstg_exitcond_reg_287_pp0_it4 <= ap_reg_ppstg_exitcond_reg_287_pp0_it3;
                ap_reg_ppstg_exitcond_reg_287_pp0_it5 <= ap_reg_ppstg_exitcond_reg_287_pp0_it4;
                ap_reg_ppstg_tmp_reg_296_pp0_it1(0) <= tmp_reg_296(0);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(1) <= tmp_reg_296(1);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(2) <= tmp_reg_296(2);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(3) <= tmp_reg_296(3);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(4) <= tmp_reg_296(4);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(5) <= tmp_reg_296(5);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(6) <= tmp_reg_296(6);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(7) <= tmp_reg_296(7);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(8) <= tmp_reg_296(8);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(9) <= tmp_reg_296(9);
    ap_reg_ppstg_tmp_reg_296_pp0_it1(10) <= tmp_reg_296(10);
                ap_reg_ppstg_tmp_reg_296_pp0_it2(0) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(0);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(1) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(1);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(2) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(2);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(3) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(3);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(4) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(4);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(5) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(5);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(6) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(6);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(7) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(7);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(8) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(8);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(9) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(9);
    ap_reg_ppstg_tmp_reg_296_pp0_it2(10) <= ap_reg_ppstg_tmp_reg_296_pp0_it1(10);
                ap_reg_ppstg_tmp_reg_296_pp0_it3(0) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(0);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(1) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(1);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(2) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(2);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(3) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(3);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(4) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(4);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(5) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(5);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(6) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(6);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(7) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(7);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(8) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(8);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(9) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(9);
    ap_reg_ppstg_tmp_reg_296_pp0_it3(10) <= ap_reg_ppstg_tmp_reg_296_pp0_it2(10);
                ap_reg_ppstg_tmp_reg_296_pp0_it4(0) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(0);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(1) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(1);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(2) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(2);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(3) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(3);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(4) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(4);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(5) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(5);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(6) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(6);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(7) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(7);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(8) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(8);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(9) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(9);
    ap_reg_ppstg_tmp_reg_296_pp0_it4(10) <= ap_reg_ppstg_tmp_reg_296_pp0_it3(10);
                ap_reg_ppstg_tmp_reg_296_pp0_it5(0) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(0);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(1) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(1);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(2) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(2);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(3) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(3);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(4) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(4);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(5) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(5);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(6) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(6);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(7) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(7);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(8) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(8);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(9) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(9);
    ap_reg_ppstg_tmp_reg_296_pp0_it5(10) <= ap_reg_ppstg_tmp_reg_296_pp0_it4(10);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                exitcond_reg_287 <= exitcond_fu_219_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_reg_ppstg_exitcond_reg_287_pp0_it2 = ap_const_lv1_0))) then
                r_V_reg_321 <= grp_fu_245_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_219_p2 = ap_const_lv1_0))) then
                tmp_reg_296(0) <= tmp_fu_231_p1(0);
    tmp_reg_296(1) <= tmp_fu_231_p1(1);
    tmp_reg_296(2) <= tmp_fu_231_p1(2);
    tmp_reg_296(3) <= tmp_fu_231_p1(3);
    tmp_reg_296(4) <= tmp_fu_231_p1(4);
    tmp_reg_296(5) <= tmp_fu_231_p1(5);
    tmp_reg_296(6) <= tmp_fu_231_p1(6);
    tmp_reg_296(7) <= tmp_fu_231_p1(7);
    tmp_reg_296(8) <= tmp_fu_231_p1(8);
    tmp_reg_296(9) <= tmp_fu_231_p1(9);
    tmp_reg_296(10) <= tmp_fu_231_p1(10);
            end if;
        end if;
    end process;
    tmp_reg_296(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_296_pp0_it1(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_296_pp0_it2(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_296_pp0_it3(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_296_pp0_it4(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_296_pp0_it5(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond_fu_219_p2 , ap_reg_ppiten_pp0_it0 , ap_reg_ppiten_pp0_it1 , ap_reg_ppiten_pp0_it5 , ap_reg_ppiten_pp0_it6 , exitcond6_fu_207_p2 , grp_pitchshifting_fu_157_ap_done , grp_cal_mag_phase_fu_171_ap_done , grp_FFT_fu_179_ap_done , exitcond7_fu_190_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond7_fu_190_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond6_fu_207_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                end if;
            when ap_ST_pp0_stg0_fsm_3 => 
                if ((not(((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_219_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_219_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_4;
                end if;
            when ap_ST_st11_fsm_4 => 
                ap_NS_fsm <= ap_ST_st12_fsm_5;
            when ap_ST_st12_fsm_5 => 
                if (not((ap_const_logic_0 = grp_FFT_fu_179_ap_done))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_5;
                end if;
            when ap_ST_st13_fsm_6 => 
                ap_NS_fsm <= ap_ST_st14_fsm_7;
            when ap_ST_st14_fsm_7 => 
                if (not((ap_const_logic_0 = grp_cal_mag_phase_fu_171_ap_done))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_7;
                end if;
            when ap_ST_st15_fsm_8 => 
                ap_NS_fsm <= ap_ST_st16_fsm_9;
            when ap_ST_st16_fsm_9 => 
                if (not((ap_const_logic_0 = grp_pitchshifting_fu_157_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, grp_pitchshifting_fu_157_ap_done)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st16_fsm_9 = ap_CS_fsm) and not((ap_const_logic_0 = grp_pitchshifting_fu_157_ap_done))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, grp_pitchshifting_fu_157_ap_done)
    begin
        if (((ap_ST_st16_fsm_9 = ap_CS_fsm) and not((ap_const_logic_0 = grp_pitchshifting_fu_157_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- currentFrameWindowed_V_address0 assign process. --
    currentFrameWindowed_V_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_tmp_reg_296_pp0_it5, grp_cal_mag_phase_fu_171_real_V_address0, grp_FFT_fu_179_xreal_V_address0, p_036_rec_cast_fu_185_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) then 
            currentFrameWindowed_V_address0 <= ap_reg_ppstg_tmp_reg_296_pp0_it5(10 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            currentFrameWindowed_V_address0 <= p_036_rec_cast_fu_185_p1(10 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            currentFrameWindowed_V_address0 <= grp_FFT_fu_179_xreal_V_address0;
        elsif ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            currentFrameWindowed_V_address0 <= grp_cal_mag_phase_fu_171_real_V_address0;
        else 
            currentFrameWindowed_V_address0 <= ap_reg_ppstg_tmp_reg_296_pp0_it5(10 - 1 downto 0);
        end if; 
    end process;

    currentFrameWindowed_V_address1 <= grp_FFT_fu_179_xreal_V_address1;

    -- currentFrameWindowed_V_ce0 assign process. --
    currentFrameWindowed_V_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_reg_287_pp0_it5, grp_cal_mag_phase_fu_171_real_V_ce0, grp_FFT_fu_179_xreal_V_ce0, exitcond7_fu_190_p2)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_190_p2)) or ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_reg_287_pp0_it5 = ap_const_lv1_0)))) then 
            currentFrameWindowed_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            currentFrameWindowed_V_ce0 <= grp_FFT_fu_179_xreal_V_ce0;
        elsif ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            currentFrameWindowed_V_ce0 <= grp_cal_mag_phase_fu_171_real_V_ce0;
        else 
            currentFrameWindowed_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- currentFrameWindowed_V_ce1 assign process. --
    currentFrameWindowed_V_ce1_assign_proc : process(ap_CS_fsm, grp_FFT_fu_179_xreal_V_ce1)
    begin
        if ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            currentFrameWindowed_V_ce1 <= grp_FFT_fu_179_xreal_V_ce1;
        else 
            currentFrameWindowed_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- currentFrameWindowed_V_d0 assign process. --
    currentFrameWindowed_V_d0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it6, grp_FFT_fu_179_xreal_V_d0, grp_fu_254_p2)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) then 
            currentFrameWindowed_V_d0 <= grp_fu_254_p2(43 downto 12);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            currentFrameWindowed_V_d0 <= ap_const_lv32_0;
        elsif ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            currentFrameWindowed_V_d0 <= grp_FFT_fu_179_xreal_V_d0;
        else 
            currentFrameWindowed_V_d0 <= grp_fu_254_p2(43 downto 12);
        end if; 
    end process;


    -- currentFrameWindowed_V_we0 assign process. --
    currentFrameWindowed_V_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_reg_287_pp0_it5, grp_FFT_fu_179_xreal_V_we0, exitcond7_fu_190_p2)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_190_p2)) or ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_reg_287_pp0_it5 = ap_const_lv1_0)))) then 
            currentFrameWindowed_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            currentFrameWindowed_V_we0 <= grp_FFT_fu_179_xreal_V_we0;
        else 
            currentFrameWindowed_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond6_fu_207_p2 <= "1" when (p_039_rec_reg_134 = ap_const_lv11_400) else "0";
    exitcond7_fu_190_p2 <= "1" when (p_036_rec_reg_123 = ap_const_lv11_400) else "0";
    exitcond_fu_219_p2 <= "1" when (i_reg_145 = ap_const_lv11_400) else "0";
    grp_FFT_fu_179_ap_start <= grp_FFT_fu_179_ap_start_ap_start_reg;
    grp_FFT_fu_179_ximag_V_q0 <= imag_V_q0;
    grp_FFT_fu_179_ximag_V_q1 <= imag_V_q1;
    grp_FFT_fu_179_xreal_V_q0 <= currentFrameWindowed_V_q0;
    grp_FFT_fu_179_xreal_V_q1 <= currentFrameWindowed_V_q1;
    grp_cal_mag_phase_fu_171_ap_start <= grp_cal_mag_phase_fu_171_ap_start_ap_start_reg;
    grp_cal_mag_phase_fu_171_imag_V_q0 <= imag_V_q0;
    grp_cal_mag_phase_fu_171_real_V_q0 <= currentFrameWindowed_V_q0;
    grp_fu_245_ce <= ap_const_logic_1;
    grp_fu_245_p0 <= grp_fu_245_p00(6 - 1 downto 0);
    grp_fu_245_p00 <= std_logic_vector(resize(unsigned(wn_V_1_q0),38));
    grp_fu_245_p1 <= input_array_V_q0;
    grp_fu_254_ce <= ap_const_logic_1;
    grp_fu_254_p0 <= r_V_reg_321;
    grp_fu_254_p1 <= ap_const_lv44_2D(6 - 1 downto 0);
    grp_pitchshifting_fu_157_amplitude_V_q0 <= magFrame_V_q0;
    grp_pitchshifting_fu_157_angle_V_q0 <= phaseFrame_V_q0;
    grp_pitchshifting_fu_157_ap_start <= grp_pitchshifting_fu_157_ap_start_ap_start_reg;
    i_1_fu_225_p2 <= std_logic_vector(unsigned(i_reg_145) + unsigned(ap_const_lv11_1));

    -- imag_V_address0 assign process. --
    imag_V_address0_assign_proc : process(ap_CS_fsm, grp_cal_mag_phase_fu_171_imag_V_address0, grp_FFT_fu_179_ximag_V_address0, p_039_rec_cast_fu_202_p1)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            imag_V_address0 <= p_039_rec_cast_fu_202_p1(10 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            imag_V_address0 <= grp_FFT_fu_179_ximag_V_address0;
        elsif ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            imag_V_address0 <= grp_cal_mag_phase_fu_171_imag_V_address0;
        else 
            imag_V_address0 <= p_039_rec_cast_fu_202_p1(10 - 1 downto 0);
        end if; 
    end process;

    imag_V_address1 <= grp_FFT_fu_179_ximag_V_address1;

    -- imag_V_ce0 assign process. --
    imag_V_ce0_assign_proc : process(ap_CS_fsm, exitcond6_fu_207_p2, grp_cal_mag_phase_fu_171_imag_V_ce0, grp_FFT_fu_179_ximag_V_ce0)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_fu_207_p2))) then 
            imag_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            imag_V_ce0 <= grp_FFT_fu_179_ximag_V_ce0;
        elsif ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            imag_V_ce0 <= grp_cal_mag_phase_fu_171_imag_V_ce0;
        else 
            imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- imag_V_ce1 assign process. --
    imag_V_ce1_assign_proc : process(ap_CS_fsm, grp_FFT_fu_179_ximag_V_ce1)
    begin
        if ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            imag_V_ce1 <= grp_FFT_fu_179_ximag_V_ce1;
        else 
            imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- imag_V_d0 assign process. --
    imag_V_d0_assign_proc : process(ap_CS_fsm, grp_FFT_fu_179_ximag_V_d0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            imag_V_d0 <= ap_const_lv32_0;
        elsif ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            imag_V_d0 <= grp_FFT_fu_179_ximag_V_d0;
        else 
            imag_V_d0 <= ap_const_lv32_0;
        end if; 
    end process;


    -- imag_V_we0 assign process. --
    imag_V_we0_assign_proc : process(ap_CS_fsm, exitcond6_fu_207_p2, grp_FFT_fu_179_ximag_V_we0)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_fu_207_p2)))) then 
            imag_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st12_fsm_5 = ap_CS_fsm)) then 
            imag_V_we0 <= grp_FFT_fu_179_ximag_V_we0;
        else 
            imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_array_V_address0 <= tmp_fu_231_p1(10 - 1 downto 0);

    -- input_array_V_ce0 assign process. --
    input_array_V_ce0_assign_proc : process(ap_CS_fsm, exitcond_fu_219_p2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_219_p2 = ap_const_lv1_0))) then 
            input_array_V_ce0 <= ap_const_logic_1;
        else 
            input_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- magFrame_V_address0 assign process. --
    magFrame_V_address0_assign_proc : process(ap_CS_fsm, grp_pitchshifting_fu_157_amplitude_V_address0, grp_cal_mag_phase_fu_171_magFrame_V_address0)
    begin
        if ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            magFrame_V_address0 <= grp_cal_mag_phase_fu_171_magFrame_V_address0;
        elsif ((ap_ST_st16_fsm_9 = ap_CS_fsm)) then 
            magFrame_V_address0 <= grp_pitchshifting_fu_157_amplitude_V_address0;
        else 
            magFrame_V_address0 <= grp_cal_mag_phase_fu_171_magFrame_V_address0;
        end if; 
    end process;


    -- magFrame_V_ce0 assign process. --
    magFrame_V_ce0_assign_proc : process(ap_CS_fsm, grp_pitchshifting_fu_157_amplitude_V_ce0, grp_cal_mag_phase_fu_171_magFrame_V_ce0)
    begin
        if ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            magFrame_V_ce0 <= grp_cal_mag_phase_fu_171_magFrame_V_ce0;
        elsif ((ap_ST_st16_fsm_9 = ap_CS_fsm)) then 
            magFrame_V_ce0 <= grp_pitchshifting_fu_157_amplitude_V_ce0;
        else 
            magFrame_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    magFrame_V_d0 <= grp_cal_mag_phase_fu_171_magFrame_V_d0;

    -- magFrame_V_we0 assign process. --
    magFrame_V_we0_assign_proc : process(ap_CS_fsm, grp_cal_mag_phase_fu_171_magFrame_V_we0)
    begin
        if ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            magFrame_V_we0 <= grp_cal_mag_phase_fu_171_magFrame_V_we0;
        else 
            magFrame_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_array_V_address0 <= grp_pitchshifting_fu_157_output_array_V_address0;

    -- output_array_V_ce0 assign process. --
    output_array_V_ce0_assign_proc : process(ap_CS_fsm, grp_pitchshifting_fu_157_output_array_V_ce0)
    begin
        if ((ap_ST_st16_fsm_9 = ap_CS_fsm)) then 
            output_array_V_ce0 <= grp_pitchshifting_fu_157_output_array_V_ce0;
        else 
            output_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_array_V_d0 <= grp_pitchshifting_fu_157_output_array_V_d0;

    -- output_array_V_we0 assign process. --
    output_array_V_we0_assign_proc : process(ap_CS_fsm, grp_pitchshifting_fu_157_output_array_V_we0)
    begin
        if ((ap_ST_st16_fsm_9 = ap_CS_fsm)) then 
            output_array_V_we0 <= grp_pitchshifting_fu_157_output_array_V_we0;
        else 
            output_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_036_rec_cast_fu_185_p1 <= std_logic_vector(resize(unsigned(p_036_rec_reg_123),64));
    p_039_rec_cast_fu_202_p1 <= std_logic_vector(resize(unsigned(p_039_rec_reg_134),64));
    p_rec1_fu_196_p2 <= std_logic_vector(unsigned(p_036_rec_reg_123) + unsigned(ap_const_lv11_1));
    p_rec_fu_213_p2 <= std_logic_vector(unsigned(p_039_rec_reg_134) + unsigned(ap_const_lv11_1));

    -- phaseFrame_V_address0 assign process. --
    phaseFrame_V_address0_assign_proc : process(ap_CS_fsm, grp_pitchshifting_fu_157_angle_V_address0, grp_cal_mag_phase_fu_171_phaseFrame_V_address0)
    begin
        if ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            phaseFrame_V_address0 <= grp_cal_mag_phase_fu_171_phaseFrame_V_address0;
        elsif ((ap_ST_st16_fsm_9 = ap_CS_fsm)) then 
            phaseFrame_V_address0 <= grp_pitchshifting_fu_157_angle_V_address0;
        else 
            phaseFrame_V_address0 <= grp_cal_mag_phase_fu_171_phaseFrame_V_address0;
        end if; 
    end process;

    phaseFrame_V_address1 <= grp_cal_mag_phase_fu_171_phaseFrame_V_address1;

    -- phaseFrame_V_ce0 assign process. --
    phaseFrame_V_ce0_assign_proc : process(ap_CS_fsm, grp_pitchshifting_fu_157_angle_V_ce0, grp_cal_mag_phase_fu_171_phaseFrame_V_ce0)
    begin
        if ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            phaseFrame_V_ce0 <= grp_cal_mag_phase_fu_171_phaseFrame_V_ce0;
        elsif ((ap_ST_st16_fsm_9 = ap_CS_fsm)) then 
            phaseFrame_V_ce0 <= grp_pitchshifting_fu_157_angle_V_ce0;
        else 
            phaseFrame_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- phaseFrame_V_ce1 assign process. --
    phaseFrame_V_ce1_assign_proc : process(ap_CS_fsm, grp_cal_mag_phase_fu_171_phaseFrame_V_ce1)
    begin
        if ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            phaseFrame_V_ce1 <= grp_cal_mag_phase_fu_171_phaseFrame_V_ce1;
        else 
            phaseFrame_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    phaseFrame_V_d0 <= grp_cal_mag_phase_fu_171_phaseFrame_V_d0;
    phaseFrame_V_d1 <= grp_cal_mag_phase_fu_171_phaseFrame_V_d1;

    -- phaseFrame_V_we0 assign process. --
    phaseFrame_V_we0_assign_proc : process(ap_CS_fsm, grp_cal_mag_phase_fu_171_phaseFrame_V_we0)
    begin
        if ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            phaseFrame_V_we0 <= grp_cal_mag_phase_fu_171_phaseFrame_V_we0;
        else 
            phaseFrame_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- phaseFrame_V_we1 assign process. --
    phaseFrame_V_we1_assign_proc : process(ap_CS_fsm, grp_cal_mag_phase_fu_171_phaseFrame_V_we1)
    begin
        if ((ap_ST_st14_fsm_7 = ap_CS_fsm)) then 
            phaseFrame_V_we1 <= grp_cal_mag_phase_fu_171_phaseFrame_V_we1;
        else 
            phaseFrame_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_231_p1 <= std_logic_vector(resize(unsigned(i_reg_145),64));
    wn_V_1_address0 <= tmp_fu_231_p1(10 - 1 downto 0);

    -- wn_V_1_ce0 assign process. --
    wn_V_1_ce0_assign_proc : process(ap_CS_fsm, exitcond_fu_219_p2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_219_p2 = ap_const_lv1_0))) then 
            wn_V_1_ce0 <= ap_const_logic_1;
        else 
            wn_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
