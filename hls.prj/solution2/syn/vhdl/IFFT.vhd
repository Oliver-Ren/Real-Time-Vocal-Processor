-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IFFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xreal_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    xreal_V_ce0 : OUT STD_LOGIC;
    xreal_V_we0 : OUT STD_LOGIC;
    xreal_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xreal_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xreal_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    xreal_V_ce1 : OUT STD_LOGIC;
    xreal_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ximag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ximag_V_ce0 : OUT STD_LOGIC;
    ximag_V_we0 : OUT STD_LOGIC;
    ximag_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ximag_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ximag_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ximag_V_ce1 : OUT STD_LOGIC;
    ximag_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of IFFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal j_fu_285_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_627 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond8_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_372_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_next1_reg_649 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_26_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_378_p4_temp: signed (31-1 downto 0);
    signal tmp_26_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond7_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax7_fu_408_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal smax7_reg_659 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_next_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_fu_473_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal j_4_reg_691 : STD_LOGIC_VECTOR (29 downto 0);
    signal exitcond6_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ximag_V_addr_1_reg_701 : STD_LOGIC_VECTOR (9 downto 0);
    signal xreal_V_addr_1_reg_706 : STD_LOGIC_VECTOR (9 downto 0);
    signal xreal_V_addr_2_reg_711 : STD_LOGIC_VECTOR (9 downto 0);
    signal ximag_V_addr_2_reg_716 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_53_fu_515_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal ximag_V_q0_temp: signed (32-1 downto 0);
    signal tmp_54_fu_519_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal wimag_V_q0_temp: signed (32-1 downto 0);
    signal tmp_55_fu_523_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal xreal_V_q0_temp: signed (32-1 downto 0);
    signal tmp_56_fu_527_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal wreal_V_q0_temp: signed (32-1 downto 0);
    signal grp_fu_531_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal lhs_V_cast_reg_755 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_537_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal rhs_V_2_cast_reg_760 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_543_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal lhs_V_1_cast_reg_765 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_549_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal rhs_V_3_cast_reg_770 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_6_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_7_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_7_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_fu_615_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal wreal_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal wreal_V_ce0 : STD_LOGIC;
    signal wreal_V_we0 : STD_LOGIC;
    signal wreal_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wreal_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wimag_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal wimag_V_ce0 : STD_LOGIC;
    signal wimag_V_we0 : STD_LOGIC;
    signal wimag_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wimag_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_277_ap_start : STD_LOGIC;
    signal grp_bitrp_fu_277_ap_done : STD_LOGIC;
    signal grp_bitrp_fu_277_ap_idle : STD_LOGIC;
    signal grp_bitrp_fu_277_ap_ready : STD_LOGIC;
    signal grp_bitrp_fu_277_xreal_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bitrp_fu_277_xreal_V_ce0 : STD_LOGIC;
    signal grp_bitrp_fu_277_xreal_V_we0 : STD_LOGIC;
    signal grp_bitrp_fu_277_xreal_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_277_xreal_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_277_xreal_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bitrp_fu_277_xreal_V_ce1 : STD_LOGIC;
    signal grp_bitrp_fu_277_xreal_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_277_ximag_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bitrp_fu_277_ximag_V_ce0 : STD_LOGIC;
    signal grp_bitrp_fu_277_ximag_V_we0 : STD_LOGIC;
    signal grp_bitrp_fu_277_ximag_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_277_ximag_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_277_ximag_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bitrp_fu_277_ximag_V_ce1 : STD_LOGIC;
    signal grp_bitrp_fu_277_ximag_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar1_reg_208 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar2_reg_219 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_254 : STD_LOGIC_VECTOR (29 downto 0);
    signal j_2_reg_265 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitrp_fu_277_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index2_fu_458_p2_temp: signed (32-1 downto 0);
    signal tmp_34_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index1_fu_463_p2_temp: signed (32-1 downto 0);
    signal tmp_31_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_491_p2_temp: signed (32-1 downto 0);
    signal tmp_28_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_5_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_s_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_303_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal lhs_V13_cast_fu_315_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal lhs_V13_cast_fu_315_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_shl1_fu_337_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal rhs_V_cast_fu_349_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal rhs_V_cast_fu_349_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_52_fu_378_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp6_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_cast_fu_392_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_416_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tr_fu_428_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal j_1_cast_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_112_fu_479_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_491_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index2_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index1_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_531_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_537_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_543_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_549_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_555_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_134_fu_569_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal treal_V_fu_559_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal timag_V_fu_573_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_ce : STD_LOGIC;
    signal grp_fu_491_ce : STD_LOGIC;
    signal grp_fu_531_ce : STD_LOGIC;
    signal grp_fu_537_ce : STD_LOGIC;
    signal grp_fu_543_ce : STD_LOGIC;
    signal grp_fu_549_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component bitrp IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xreal_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        xreal_V_ce0 : OUT STD_LOGIC;
        xreal_V_we0 : OUT STD_LOGIC;
        xreal_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        xreal_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        xreal_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        xreal_V_ce1 : OUT STD_LOGIC;
        xreal_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ximag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ximag_V_ce0 : OUT STD_LOGIC;
        ximag_V_we0 : OUT STD_LOGIC;
        ximag_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ximag_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ximag_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ximag_V_ce1 : OUT STD_LOGIC;
        ximag_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_sdiv_32ns_32s_32_35 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_32s_32s_38_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component FFT_wreal_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    wreal_V_U : component FFT_wreal_V
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wreal_V_address0,
        ce0 => wreal_V_ce0,
        we0 => wreal_V_we0,
        d0 => wreal_V_d0,
        q0 => wreal_V_q0);

    wimag_V_U : component FFT_wreal_V
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wimag_V_address0,
        ce0 => wimag_V_ce0,
        we0 => wimag_V_we0,
        d0 => wimag_V_d0,
        q0 => wimag_V_q0);

    grp_bitrp_fu_277 : component bitrp
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bitrp_fu_277_ap_start,
        ap_done => grp_bitrp_fu_277_ap_done,
        ap_idle => grp_bitrp_fu_277_ap_idle,
        ap_ready => grp_bitrp_fu_277_ap_ready,
        xreal_V_address0 => grp_bitrp_fu_277_xreal_V_address0,
        xreal_V_ce0 => grp_bitrp_fu_277_xreal_V_ce0,
        xreal_V_we0 => grp_bitrp_fu_277_xreal_V_we0,
        xreal_V_d0 => grp_bitrp_fu_277_xreal_V_d0,
        xreal_V_q0 => grp_bitrp_fu_277_xreal_V_q0,
        xreal_V_address1 => grp_bitrp_fu_277_xreal_V_address1,
        xreal_V_ce1 => grp_bitrp_fu_277_xreal_V_ce1,
        xreal_V_q1 => grp_bitrp_fu_277_xreal_V_q1,
        ximag_V_address0 => grp_bitrp_fu_277_ximag_V_address0,
        ximag_V_ce0 => grp_bitrp_fu_277_ximag_V_ce0,
        ximag_V_we0 => grp_bitrp_fu_277_ximag_V_we0,
        ximag_V_d0 => grp_bitrp_fu_277_ximag_V_d0,
        ximag_V_q0 => grp_bitrp_fu_277_ximag_V_q0,
        ximag_V_address1 => grp_bitrp_fu_277_ximag_V_address1,
        ximag_V_ce1 => grp_bitrp_fu_277_ximag_V_ce1,
        ximag_V_q1 => grp_bitrp_fu_277_ximag_V_q1);

    top_mul_32s_32s_32_6_U28 : component top_mul_32s_32s_32_6
    generic map (
        ID => 28,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_416_p0,
        din1 => grp_fu_416_p1,
        ce => grp_fu_416_ce,
        dout => grp_fu_416_p2);

    top_sdiv_32ns_32s_32_35_U29 : component top_sdiv_32ns_32s_32_35
    generic map (
        ID => 29,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_491_p0,
        din1 => grp_fu_491_p1,
        ce => grp_fu_491_ce,
        dout => grp_fu_491_p2);

    top_mul_32s_32s_38_6_U30 : component top_mul_32s_32s_38_6
    generic map (
        ID => 30,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_531_p0,
        din1 => grp_fu_531_p1,
        ce => grp_fu_531_ce,
        dout => grp_fu_531_p2);

    top_mul_32s_32s_38_6_U31 : component top_mul_32s_32s_38_6
    generic map (
        ID => 31,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_537_p0,
        din1 => grp_fu_537_p1,
        ce => grp_fu_537_ce,
        dout => grp_fu_537_p2);

    top_mul_32s_32s_38_6_U32 : component top_mul_32s_32s_38_6
    generic map (
        ID => 32,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_543_p0,
        din1 => grp_fu_543_p1,
        ce => grp_fu_543_ce,
        dout => grp_fu_543_p2);

    top_mul_32s_32s_38_6_U33 : component top_mul_32s_32s_38_6
    generic map (
        ID => 33,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_549_p0,
        din1 => grp_fu_549_p1,
        ce => grp_fu_549_ce,
        dout => grp_fu_549_p2);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_bitrp_fu_277_ap_start_ap_start_reg assign process. --
    grp_bitrp_fu_277_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bitrp_fu_277_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    grp_bitrp_fu_277_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_bitrp_fu_277_ap_ready)) then 
                    grp_bitrp_fu_277_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar1_reg_208 assign process. --
    indvar1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_277_ap_done)))) then 
                indvar1_reg_208 <= ap_const_lv9_0;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                indvar1_reg_208 <= j_reg_627;
            end if; 
        end if;
    end process;

    -- indvar2_reg_219 assign process. --
    indvar2_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond8_fu_291_p2 = ap_const_lv1_0)))) then 
                indvar2_reg_219 <= ap_const_lv4_0;
            elsif (((ap_ST_st11_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = icmp_fu_438_p2))) then 
                indvar2_reg_219 <= indvar_next1_reg_649;
            end if; 
        end if;
    end process;

    -- indvar_reg_242 assign process. --
    indvar_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_468_p2)))) then 
                indvar_reg_242 <= indvar_next_reg_664;
            elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_366_p2))) then 
                indvar_reg_242 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_254 assign process. --
    j_1_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
                j_1_reg_254 <= ap_const_lv30_0;
            elsif ((ap_ST_st55_fsm_54 = ap_CS_fsm)) then 
                j_1_reg_254 <= j_4_reg_691;
            end if; 
        end if;
    end process;

    -- j_2_reg_265 assign process. --
    j_2_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_366_p2)))) then 
                j_2_reg_265 <= ap_const_lv11_0;
            elsif (((ap_ST_st56_fsm_55 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_609_p2))) then 
                j_2_reg_265 <= j_3_fu_615_p2;
            end if; 
        end if;
    end process;

    -- m_reg_230 assign process. --
    m_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond8_fu_291_p2 = ap_const_lv1_0)))) then 
                m_reg_230(1) <= '1';
                m_reg_230(2) <= '0';
                m_reg_230(3) <= '0';
                m_reg_230(4) <= '0';
                m_reg_230(5) <= '0';
                m_reg_230(6) <= '0';
                m_reg_230(7) <= '0';
                m_reg_230(8) <= '0';
                m_reg_230(9) <= '0';
                m_reg_230(10) <= '0';
                m_reg_230(11) <= '0';
                m_reg_230(12) <= '0';
                m_reg_230(13) <= '0';
                m_reg_230(14) <= '0';
                m_reg_230(15) <= '0';
                m_reg_230(16) <= '0';
                m_reg_230(17) <= '0';
                m_reg_230(18) <= '0';
                m_reg_230(19) <= '0';
                m_reg_230(20) <= '0';
                m_reg_230(21) <= '0';
                m_reg_230(22) <= '0';
                m_reg_230(23) <= '0';
                m_reg_230(24) <= '0';
                m_reg_230(25) <= '0';
                m_reg_230(26) <= '0';
                m_reg_230(27) <= '0';
                m_reg_230(28) <= '0';
                m_reg_230(29) <= '0';
                m_reg_230(30) <= '0';
                m_reg_230(31) <= '0';
            elsif (((ap_ST_st11_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = icmp_fu_438_p2))) then 
                m_reg_230(1) <= m_1_fu_444_p2(1);
                m_reg_230(2) <= m_1_fu_444_p2(2);
                m_reg_230(3) <= m_1_fu_444_p2(3);
                m_reg_230(4) <= m_1_fu_444_p2(4);
                m_reg_230(5) <= m_1_fu_444_p2(5);
                m_reg_230(6) <= m_1_fu_444_p2(6);
                m_reg_230(7) <= m_1_fu_444_p2(7);
                m_reg_230(8) <= m_1_fu_444_p2(8);
                m_reg_230(9) <= m_1_fu_444_p2(9);
                m_reg_230(10) <= m_1_fu_444_p2(10);
                m_reg_230(11) <= m_1_fu_444_p2(11);
                m_reg_230(12) <= m_1_fu_444_p2(12);
                m_reg_230(13) <= m_1_fu_444_p2(13);
                m_reg_230(14) <= m_1_fu_444_p2(14);
                m_reg_230(15) <= m_1_fu_444_p2(15);
                m_reg_230(16) <= m_1_fu_444_p2(16);
                m_reg_230(17) <= m_1_fu_444_p2(17);
                m_reg_230(18) <= m_1_fu_444_p2(18);
                m_reg_230(19) <= m_1_fu_444_p2(19);
                m_reg_230(20) <= m_1_fu_444_p2(20);
                m_reg_230(21) <= m_1_fu_444_p2(21);
                m_reg_230(22) <= m_1_fu_444_p2(22);
                m_reg_230(23) <= m_1_fu_444_p2(23);
                m_reg_230(24) <= m_1_fu_444_p2(24);
                m_reg_230(25) <= m_1_fu_444_p2(25);
                m_reg_230(26) <= m_1_fu_444_p2(26);
                m_reg_230(27) <= m_1_fu_444_p2(27);
                m_reg_230(28) <= m_1_fu_444_p2(28);
                m_reg_230(29) <= m_1_fu_444_p2(29);
                m_reg_230(30) <= m_1_fu_444_p2(30);
                m_reg_230(31) <= m_1_fu_444_p2(31);
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                indvar_next1_reg_649 <= indvar_next1_fu_372_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                indvar_next_reg_664 <= indvar_next_fu_422_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then
                j_4_reg_691 <= j_4_fu_473_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                j_reg_627 <= j_fu_285_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then
                k_reg_669 <= grp_fu_416_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st53_fsm_52 = ap_CS_fsm)) then
                lhs_V_1_cast_reg_765 <= grp_fu_543_p2;
                lhs_V_cast_reg_755 <= grp_fu_531_p2;
                rhs_V_2_cast_reg_760 <= grp_fu_537_p2;
                rhs_V_3_cast_reg_770 <= grp_fu_549_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st54_fsm_53 = ap_CS_fsm)) then
                r_V_6_reg_775 <= r_V_6_fu_597_p2;
                r_V_7_reg_780 <= r_V_7_fu_603_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_366_p2))) then
                smax7_reg_659 <= smax7_fu_408_p3;
                tmp_26_reg_654 <= tmp_26_fu_388_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
                tmp11_reg_683 <= tmp11_fu_450_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_fu_468_p2))) then
                ximag_V_addr_1_reg_701 <= tmp_30_fu_497_p1(10 - 1 downto 0);
                ximag_V_addr_2_reg_716 <= tmp_34_fu_503_p1(10 - 1 downto 0);
                xreal_V_addr_1_reg_706 <= tmp_30_fu_497_p1(10 - 1 downto 0);
                xreal_V_addr_2_reg_711 <= tmp_34_fu_503_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    m_reg_230(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond8_fu_291_p2 , exitcond7_fu_366_p2 , icmp_fu_438_p2 , exitcond6_fu_468_p2 , grp_bitrp_fu_277_ap_done , exitcond_fu_609_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_bitrp_fu_277_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond8_fu_291_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond7_fu_366_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st56_fsm_55;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                if ((ap_const_lv1_0 = icmp_fu_438_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if ((ap_const_lv1_0 = exitcond6_fu_468_p2)) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st56_fsm_55 => 
                if (not((ap_const_lv1_0 = exitcond_fu_609_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st56_fsm_55;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond_fu_609_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st56_fsm_55 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_609_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_609_p2)
    begin
        if (((ap_ST_st56_fsm_55 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_609_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond6_fu_468_p2 <= "1" when (j_1_reg_254 = smax7_reg_659) else "0";
    exitcond7_fu_366_p2 <= "1" when (indvar2_reg_219 = ap_const_lv4_A) else "0";
    exitcond8_fu_291_p2 <= "1" when (indvar1_reg_208 = ap_const_lv9_1FF) else "0";
    exitcond_fu_609_p2 <= "1" when (j_2_reg_265 = ap_const_lv11_400) else "0";
    grp_bitrp_fu_277_ap_start <= grp_bitrp_fu_277_ap_start_ap_start_reg;
    grp_bitrp_fu_277_ximag_V_q0 <= ximag_V_q0;
    grp_bitrp_fu_277_ximag_V_q1 <= ximag_V_q1;
    grp_bitrp_fu_277_xreal_V_q0 <= xreal_V_q0;
    grp_bitrp_fu_277_xreal_V_q1 <= xreal_V_q1;
    grp_fu_416_ce <= ap_const_logic_1;
    grp_fu_416_p0 <= m_reg_230;
    grp_fu_416_p1 <= indvar_reg_242;

    -- grp_fu_491_ce assign process. --
    grp_fu_491_ce_assign_proc : process(ap_CS_fsm, exitcond6_fu_468_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st5_fsm_4 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st48_fsm_47 = ap_CS_fsm) or (ap_ST_st53_fsm_52 = ap_CS_fsm) or (ap_ST_st54_fsm_53 = ap_CS_fsm) or (ap_ST_st56_fsm_55 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_468_p2))) or (ap_ST_st55_fsm_54 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st49_fsm_48 = ap_CS_fsm) or (ap_ST_st50_fsm_49 = ap_CS_fsm) or (ap_ST_st51_fsm_50 = ap_CS_fsm) or (ap_ST_st52_fsm_51 = ap_CS_fsm))) then 
            grp_fu_491_ce <= ap_const_logic_0;
        else 
            grp_fu_491_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_491_p0 <= (tmp_112_fu_479_p1 & ap_const_lv10_0);
    grp_fu_491_p1 <= m_reg_230;
    grp_fu_531_ce <= ap_const_logic_1;
    grp_fu_531_p0 <= tmp_55_fu_523_p1(32 - 1 downto 0);
    grp_fu_531_p1 <= tmp_56_fu_527_p1(32 - 1 downto 0);
    grp_fu_537_ce <= ap_const_logic_1;
    grp_fu_537_p0 <= tmp_53_fu_515_p1(32 - 1 downto 0);
    grp_fu_537_p1 <= tmp_54_fu_519_p1(32 - 1 downto 0);
    grp_fu_543_ce <= ap_const_logic_1;
    grp_fu_543_p0 <= tmp_53_fu_515_p1(32 - 1 downto 0);
    grp_fu_543_p1 <= tmp_56_fu_527_p1(32 - 1 downto 0);
    grp_fu_549_ce <= ap_const_logic_1;
    grp_fu_549_p0 <= tmp_55_fu_523_p1(32 - 1 downto 0);
    grp_fu_549_p1 <= tmp_54_fu_519_p1(32 - 1 downto 0);
    icmp_fu_438_p2 <= "1" when (signed(tr_fu_428_p4) < signed(ap_const_lv22_1)) else "0";
    index1_fu_463_p2 <= std_logic_vector(unsigned(k_reg_669) + unsigned(j_1_cast_fu_454_p1));
    index2_fu_458_p2 <= std_logic_vector(unsigned(tmp11_reg_683) + unsigned(j_1_cast_fu_454_p1));
    indvar_next1_fu_372_p2 <= std_logic_vector(unsigned(indvar2_reg_219) + unsigned(ap_const_lv4_1));
    indvar_next_fu_422_p2 <= std_logic_vector(unsigned(indvar_reg_242) + unsigned(ap_const_lv32_1));
    j_1_cast_fu_454_p1 <= std_logic_vector(resize(unsigned(j_1_reg_254),32));
    j_3_fu_615_p2 <= std_logic_vector(unsigned(j_2_reg_265) + unsigned(ap_const_lv11_1));
    j_4_fu_473_p2 <= std_logic_vector(unsigned(j_1_reg_254) + unsigned(ap_const_lv30_1));
    j_fu_285_p2 <= std_logic_vector(unsigned(indvar1_reg_208) + unsigned(ap_const_lv9_1));
    
    wreal_V_q0_temp <= signed(wreal_V_q0);
    lhs_V13_cast_fu_315_p1 <= std_logic_vector(resize(wreal_V_q0_temp,38));

    lhs_V13_cast_fu_315_p2 <= std_logic_vector(unsigned(p_shl_fu_303_p3) - unsigned(lhs_V13_cast_fu_315_p1));
    m_1_fu_444_p2 <= std_logic_vector(shift_left(unsigned(m_reg_230),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    p_shl1_fu_337_p3 <= (wimag_V_q0 & ap_const_lv6_0);
    p_shl_fu_303_p3 <= (wreal_V_q0 & ap_const_lv6_0);
    r_V_134_fu_569_p2 <= std_logic_vector(unsigned(rhs_V_3_cast_reg_770) + unsigned(lhs_V_1_cast_reg_765));
    r_V_5_fu_590_p2 <= std_logic_vector(unsigned(timag_V_fu_573_p4) + unsigned(ximag_V_q0));
    r_V_6_fu_597_p2 <= std_logic_vector(unsigned(xreal_V_q0) - unsigned(treal_V_fu_559_p4));
    r_V_7_fu_603_p2 <= std_logic_vector(unsigned(ximag_V_q0) - unsigned(timag_V_fu_573_p4));
    r_V_fu_555_p2 <= std_logic_vector(unsigned(lhs_V_cast_reg_755) - unsigned(rhs_V_2_cast_reg_760));
    r_V_s_fu_583_p2 <= std_logic_vector(unsigned(treal_V_fu_559_p4) + unsigned(xreal_V_q0));
    
    wimag_V_q0_temp <= signed(wimag_V_q0);
    rhs_V_cast_fu_349_p1 <= std_logic_vector(resize(wimag_V_q0_temp,38));

    rhs_V_cast_fu_349_p2 <= std_logic_vector(unsigned(p_shl1_fu_337_p3) - unsigned(rhs_V_cast_fu_349_p1));
    smax7_fu_408_p3 <= 
        tmp_26_cast_fu_392_p4 when (tmp6_fu_402_p2(0) = '1') else 
        ap_const_lv30_0;
    timag_V_fu_573_p4 <= r_V_134_fu_569_p2(37 downto 6);
    tmp11_fu_450_p2 <= std_logic_vector(unsigned(k_reg_669) + unsigned(tmp_26_reg_654));
    tmp6_fu_402_p2 <= "1" when (signed(tmp_52_fu_378_p4) > signed(ap_const_lv31_0)) else "0";
    tmp_112_fu_479_p1 <= j_1_reg_254(22 - 1 downto 0);
    tmp_23_fu_332_p1 <= std_logic_vector(resize(unsigned(j_reg_627),64));
    tmp_26_cast_fu_392_p4 <= m_reg_230(30 downto 1);
    
    tmp_52_fu_378_p4_temp <= signed(tmp_52_fu_378_p4);
    tmp_26_fu_388_p1 <= std_logic_vector(resize(tmp_52_fu_378_p4_temp,32));

    tmp_28_fu_621_p1 <= std_logic_vector(resize(unsigned(j_2_reg_265),64));
    
    index2_fu_458_p2_temp <= signed(index2_fu_458_p2);
    tmp_30_fu_497_p1 <= std_logic_vector(resize(index2_fu_458_p2_temp,64));

    
    grp_fu_491_p2_temp <= signed(grp_fu_491_p2);
    tmp_31_fu_509_p1 <= std_logic_vector(resize(grp_fu_491_p2_temp,64));

    
    index1_fu_463_p2_temp <= signed(index1_fu_463_p2);
    tmp_34_fu_503_p1 <= std_logic_vector(resize(index1_fu_463_p2_temp,64));

    tmp_52_fu_378_p4 <= m_reg_230(31 downto 1);
    
    ximag_V_q0_temp <= signed(ximag_V_q0);
    tmp_53_fu_515_p1 <= std_logic_vector(resize(ximag_V_q0_temp,38));

    
    wimag_V_q0_temp <= signed(wimag_V_q0);
    tmp_54_fu_519_p1 <= std_logic_vector(resize(wimag_V_q0_temp,38));

    
    xreal_V_q0_temp <= signed(xreal_V_q0);
    tmp_55_fu_523_p1 <= std_logic_vector(resize(xreal_V_q0_temp,38));

    
    wreal_V_q0_temp <= signed(wreal_V_q0);
    tmp_56_fu_527_p1 <= std_logic_vector(resize(wreal_V_q0_temp,38));

    tmp_fu_297_p1 <= std_logic_vector(resize(unsigned(indvar1_reg_208),64));
    tr_fu_428_p4 <= grp_fu_416_p2(31 downto 10);
    treal_V_fu_559_p4 <= r_V_fu_555_p2(37 downto 6);

    -- wimag_V_address0 assign process. --
    wimag_V_address0_assign_proc : process(ap_CS_fsm, tmp_fu_297_p1, tmp_23_fu_332_p1, tmp_31_fu_509_p1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            wimag_V_address0 <= tmp_23_fu_332_p1(9 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            wimag_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_ST_st47_fsm_46 = ap_CS_fsm)) then 
            wimag_V_address0 <= tmp_31_fu_509_p1(9 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            wimag_V_address0 <= tmp_fu_297_p1(9 - 1 downto 0);
        else 
            wimag_V_address0 <= tmp_23_fu_332_p1(9 - 1 downto 0);
        end if; 
    end process;


    -- wimag_V_ce0 assign process. --
    wimag_V_ce0_assign_proc : process(ap_CS_fsm, exitcond8_fu_291_p2, grp_bitrp_fu_277_ap_done)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond8_fu_291_p2 = ap_const_lv1_0)) or (ap_ST_st47_fsm_46 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_277_ap_done))))) then 
            wimag_V_ce0 <= ap_const_logic_1;
        else 
            wimag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- wimag_V_d0 assign process. --
    wimag_V_d0_assign_proc : process(ap_CS_fsm, rhs_V_cast_fu_349_p2)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            wimag_V_d0 <= rhs_V_cast_fu_349_p2(37 downto 6);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            wimag_V_d0 <= ap_const_lv32_0;
        else 
            wimag_V_d0 <= rhs_V_cast_fu_349_p2(37 downto 6);
        end if; 
    end process;


    -- wimag_V_we0 assign process. --
    wimag_V_we0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_277_ap_done)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_277_ap_done))))) then 
            wimag_V_we0 <= ap_const_logic_1;
        else 
            wimag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- wreal_V_address0 assign process. --
    wreal_V_address0_assign_proc : process(ap_CS_fsm, tmp_fu_297_p1, tmp_23_fu_332_p1, tmp_31_fu_509_p1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            wreal_V_address0 <= tmp_23_fu_332_p1(9 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            wreal_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_ST_st47_fsm_46 = ap_CS_fsm)) then 
            wreal_V_address0 <= tmp_31_fu_509_p1(9 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            wreal_V_address0 <= tmp_fu_297_p1(9 - 1 downto 0);
        else 
            wreal_V_address0 <= tmp_23_fu_332_p1(9 - 1 downto 0);
        end if; 
    end process;


    -- wreal_V_ce0 assign process. --
    wreal_V_ce0_assign_proc : process(ap_CS_fsm, exitcond8_fu_291_p2, grp_bitrp_fu_277_ap_done)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond8_fu_291_p2 = ap_const_lv1_0)) or (ap_ST_st47_fsm_46 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_277_ap_done))))) then 
            wreal_V_ce0 <= ap_const_logic_1;
        else 
            wreal_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- wreal_V_d0 assign process. --
    wreal_V_d0_assign_proc : process(ap_CS_fsm, lhs_V13_cast_fu_315_p2)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            wreal_V_d0 <= lhs_V13_cast_fu_315_p2(37 downto 6);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            wreal_V_d0 <= ap_const_lv32_40;
        else 
            wreal_V_d0 <= lhs_V13_cast_fu_315_p2(37 downto 6);
        end if; 
    end process;


    -- wreal_V_we0 assign process. --
    wreal_V_we0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_277_ap_done)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_277_ap_done))))) then 
            wreal_V_we0 <= ap_const_logic_1;
        else 
            wreal_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ximag_V_address0 assign process. --
    ximag_V_address0_assign_proc : process(ap_CS_fsm, ximag_V_addr_1_reg_701, ximag_V_addr_2_reg_716, grp_bitrp_fu_277_ximag_V_address0, tmp_28_fu_621_p1)
    begin
        if ((ap_ST_st56_fsm_55 = ap_CS_fsm)) then 
            ximag_V_address0 <= tmp_28_fu_621_p1(10 - 1 downto 0);
        elsif (((ap_ST_st53_fsm_52 = ap_CS_fsm) or (ap_ST_st54_fsm_53 = ap_CS_fsm))) then 
            ximag_V_address0 <= ximag_V_addr_2_reg_716;
        elsif (((ap_ST_st47_fsm_46 = ap_CS_fsm) or (ap_ST_st55_fsm_54 = ap_CS_fsm))) then 
            ximag_V_address0 <= ximag_V_addr_1_reg_701;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_address0 <= grp_bitrp_fu_277_ximag_V_address0;
        else 
            ximag_V_address0 <= tmp_28_fu_621_p1(10 - 1 downto 0);
        end if; 
    end process;

    ximag_V_address1 <= grp_bitrp_fu_277_ximag_V_address1;

    -- ximag_V_ce0 assign process. --
    ximag_V_ce0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_277_ximag_V_ce0, exitcond_fu_609_p2)
    begin
        if (((ap_ST_st47_fsm_46 = ap_CS_fsm) or (ap_ST_st53_fsm_52 = ap_CS_fsm) or (ap_ST_st54_fsm_53 = ap_CS_fsm) or (ap_ST_st55_fsm_54 = ap_CS_fsm) or ((ap_ST_st56_fsm_55 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_609_p2)))) then 
            ximag_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_ce0 <= grp_bitrp_fu_277_ximag_V_ce0;
        else 
            ximag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ximag_V_ce1 assign process. --
    ximag_V_ce1_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_277_ximag_V_ce1)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_ce1 <= grp_bitrp_fu_277_ximag_V_ce1;
        else 
            ximag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ximag_V_d0 assign process. --
    ximag_V_d0_assign_proc : process(ap_CS_fsm, r_V_7_reg_780, grp_bitrp_fu_277_ximag_V_d0, r_V_5_fu_590_p2)
    begin
        if ((ap_ST_st56_fsm_55 = ap_CS_fsm)) then 
            ximag_V_d0 <= ap_const_lv32_0;
        elsif ((ap_ST_st55_fsm_54 = ap_CS_fsm)) then 
            ximag_V_d0 <= r_V_7_reg_780;
        elsif ((ap_ST_st54_fsm_53 = ap_CS_fsm)) then 
            ximag_V_d0 <= r_V_5_fu_590_p2;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_d0 <= grp_bitrp_fu_277_ximag_V_d0;
        else 
            ximag_V_d0 <= r_V_5_fu_590_p2;
        end if; 
    end process;


    -- ximag_V_we0 assign process. --
    ximag_V_we0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_277_ximag_V_we0, exitcond_fu_609_p2)
    begin
        if (((ap_ST_st54_fsm_53 = ap_CS_fsm) or (ap_ST_st55_fsm_54 = ap_CS_fsm) or ((ap_ST_st56_fsm_55 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_609_p2)))) then 
            ximag_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_we0 <= grp_bitrp_fu_277_ximag_V_we0;
        else 
            ximag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- xreal_V_address0 assign process. --
    xreal_V_address0_assign_proc : process(ap_CS_fsm, xreal_V_addr_1_reg_706, xreal_V_addr_2_reg_711, grp_bitrp_fu_277_xreal_V_address0, tmp_28_fu_621_p1)
    begin
        if ((ap_ST_st56_fsm_55 = ap_CS_fsm)) then 
            xreal_V_address0 <= tmp_28_fu_621_p1(10 - 1 downto 0);
        elsif (((ap_ST_st53_fsm_52 = ap_CS_fsm) or (ap_ST_st54_fsm_53 = ap_CS_fsm))) then 
            xreal_V_address0 <= xreal_V_addr_2_reg_711;
        elsif (((ap_ST_st47_fsm_46 = ap_CS_fsm) or (ap_ST_st55_fsm_54 = ap_CS_fsm))) then 
            xreal_V_address0 <= xreal_V_addr_1_reg_706;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_address0 <= grp_bitrp_fu_277_xreal_V_address0;
        else 
            xreal_V_address0 <= tmp_28_fu_621_p1(10 - 1 downto 0);
        end if; 
    end process;

    xreal_V_address1 <= grp_bitrp_fu_277_xreal_V_address1;

    -- xreal_V_ce0 assign process. --
    xreal_V_ce0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_277_xreal_V_ce0, exitcond_fu_609_p2)
    begin
        if (((ap_ST_st47_fsm_46 = ap_CS_fsm) or (ap_ST_st53_fsm_52 = ap_CS_fsm) or (ap_ST_st54_fsm_53 = ap_CS_fsm) or (ap_ST_st55_fsm_54 = ap_CS_fsm) or ((ap_ST_st56_fsm_55 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_609_p2)))) then 
            xreal_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_ce0 <= grp_bitrp_fu_277_xreal_V_ce0;
        else 
            xreal_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- xreal_V_ce1 assign process. --
    xreal_V_ce1_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_277_xreal_V_ce1)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_ce1 <= grp_bitrp_fu_277_xreal_V_ce1;
        else 
            xreal_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- xreal_V_d0 assign process. --
    xreal_V_d0_assign_proc : process(ap_CS_fsm, r_V_6_reg_775, grp_bitrp_fu_277_xreal_V_d0, r_V_s_fu_583_p2)
    begin
        if ((ap_ST_st56_fsm_55 = ap_CS_fsm)) then 
            xreal_V_d0 <= ap_const_lv32_0;
        elsif ((ap_ST_st55_fsm_54 = ap_CS_fsm)) then 
            xreal_V_d0 <= r_V_6_reg_775;
        elsif ((ap_ST_st54_fsm_53 = ap_CS_fsm)) then 
            xreal_V_d0 <= r_V_s_fu_583_p2;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_d0 <= grp_bitrp_fu_277_xreal_V_d0;
        else 
            xreal_V_d0 <= r_V_s_fu_583_p2;
        end if; 
    end process;


    -- xreal_V_we0 assign process. --
    xreal_V_we0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_277_xreal_V_we0, exitcond_fu_609_p2)
    begin
        if (((ap_ST_st54_fsm_53 = ap_CS_fsm) or (ap_ST_st55_fsm_54 = ap_CS_fsm) or ((ap_ST_st56_fsm_55 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_609_p2)))) then 
            xreal_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_we0 <= grp_bitrp_fu_277_xreal_V_we0;
        else 
            xreal_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
