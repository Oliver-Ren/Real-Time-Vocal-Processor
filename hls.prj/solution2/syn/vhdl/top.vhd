-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_ap_vld : OUT STD_LOGIC );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2013_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=41,HLS_SYN_DSP=81,HLS_SYN_FF=18724,HLS_SYN_LUT=31065}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_pp1_stg0_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st10_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st11_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_ST_st12_fsm_10 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_ST_st13_fsm_11 : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_143 : STD_LOGIC_VECTOR (8 downto 0) := "101000011";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv17_142 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101000010";
    constant ap_const_lv36_80809 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000100000001001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal input_buffer_pointer : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal initialize : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal input_array_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_array_V_ce0 : STD_LOGIC;
    signal input_array_V_we0 : STD_LOGIC;
    signal input_array_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_array_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_array_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_array_V_ce0 : STD_LOGIC;
    signal output_array_V_we0 : STD_LOGIC;
    signal output_array_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_array_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal transfer_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal transfer_array_V_ce0 : STD_LOGIC;
    signal transfer_array_V_we0 : STD_LOGIC;
    signal transfer_array_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal transfer_array_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal transfer_array_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal transfer_array_V_ce1 : STD_LOGIC;
    signal transfer_array_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_input_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal index_input_V_ce0 : STD_LOGIC;
    signal index_input_V_we0 : STD_LOGIC;
    signal index_input_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_input_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_input_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal index_input_V_ce1 : STD_LOGIC;
    signal index_input_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_output_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_output_V_ce0 : STD_LOGIC;
    signal index_output_V_we0 : STD_LOGIC;
    signal index_output_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_output_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_realtime_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_realtime_V_ce0 : STD_LOGIC;
    signal output_realtime_V_we0 : STD_LOGIC;
    signal output_realtime_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_realtime_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal jj_reg_197 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_209 : STD_LOGIC_VECTOR (16 downto 0);
    signal input0_V_fu_276_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal input0_V_reg_569 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_s_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_574 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_578 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_586 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_fu_371_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond8_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal jj_2_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal jj_2_reg_602 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_fu_407_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_44_reg_612 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_combine_fu_221_ap_start : STD_LOGIC;
    signal grp_combine_fu_221_ap_done : STD_LOGIC;
    signal grp_combine_fu_221_ap_idle : STD_LOGIC;
    signal grp_combine_fu_221_ap_ready : STD_LOGIC;
    signal grp_combine_fu_221_input_array_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_combine_fu_221_input_array_V_ce0 : STD_LOGIC;
    signal grp_combine_fu_221_input_array_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_combine_fu_221_output_array_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_combine_fu_221_output_array_V_ce0 : STD_LOGIC;
    signal grp_combine_fu_221_output_array_V_we0 : STD_LOGIC;
    signal grp_combine_fu_221_output_array_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_input_transfer_fu_237_ap_start : STD_LOGIC;
    signal grp_input_transfer_fu_237_ap_done : STD_LOGIC;
    signal grp_input_transfer_fu_237_ap_idle : STD_LOGIC;
    signal grp_input_transfer_fu_237_ap_ready : STD_LOGIC;
    signal grp_input_transfer_fu_237_input_V : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_input_transfer_fu_237_input_buffer_pointer_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_input_transfer_fu_237_input_buffer_pointer_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_input_transfer_fu_237_input_buffer_pointer_o_ap_vld : STD_LOGIC;
    signal grp_input_transfer_fu_237_initialize_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_input_transfer_fu_237_initialize_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_input_transfer_fu_237_initialize_o_ap_vld : STD_LOGIC;
    signal grp_input_transfer_fu_237_input_array_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_input_transfer_fu_237_input_array_V_ce0 : STD_LOGIC;
    signal grp_input_transfer_fu_237_input_array_V_we0 : STD_LOGIC;
    signal grp_input_transfer_fu_237_input_array_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_interp1_fu_252_ap_start : STD_LOGIC;
    signal grp_interp1_fu_252_ap_done : STD_LOGIC;
    signal grp_interp1_fu_252_ap_idle : STD_LOGIC;
    signal grp_interp1_fu_252_ap_ready : STD_LOGIC;
    signal grp_interp1_fu_252_index_input_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_interp1_fu_252_index_input_V_ce0 : STD_LOGIC;
    signal grp_interp1_fu_252_index_input_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_interp1_fu_252_index_input_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_interp1_fu_252_index_input_V_ce1 : STD_LOGIC;
    signal grp_interp1_fu_252_index_input_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_interp1_fu_252_transfer_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_interp1_fu_252_transfer_array_V_ce0 : STD_LOGIC;
    signal grp_interp1_fu_252_transfer_array_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_interp1_fu_252_transfer_array_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_interp1_fu_252_transfer_array_V_ce1 : STD_LOGIC;
    signal grp_interp1_fu_252_transfer_array_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_interp1_fu_252_index_output_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_interp1_fu_252_index_output_V_ce0 : STD_LOGIC;
    signal grp_interp1_fu_252_index_output_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_interp1_fu_252_output_realtime_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_interp1_fu_252_output_realtime_V_ce0 : STD_LOGIC;
    signal grp_interp1_fu_252_output_realtime_V_we0 : STD_LOGIC;
    signal grp_interp1_fu_252_output_realtime_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_output_transfer_fu_264_ap_start : STD_LOGIC;
    signal grp_output_transfer_fu_264_ap_done : STD_LOGIC;
    signal grp_output_transfer_fu_264_ap_idle : STD_LOGIC;
    signal grp_output_transfer_fu_264_ap_ready : STD_LOGIC;
    signal grp_output_transfer_fu_264_output_array_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_output_transfer_fu_264_output_array_V_ce0 : STD_LOGIC;
    signal grp_output_transfer_fu_264_output_array_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_output_transfer_fu_264_transfer_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_output_transfer_fu_264_transfer_array_V_ce0 : STD_LOGIC;
    signal grp_output_transfer_fu_264_transfer_array_V_we0 : STD_LOGIC;
    signal grp_output_transfer_fu_264_transfer_array_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_2_reg_186 : STD_LOGIC_VECTOR (8 downto 0);
    signal jj_phi_fu_201_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_combine_fu_221_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_input_transfer_fu_237_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_interp1_fu_252_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_output_transfer_fu_264_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_42_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_count_temp: signed (32-1 downto 0);
    signal tmp_50_fu_505_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_neg_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_329_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_and_t_fu_333_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_355_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_fu_377_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_cast5_fu_417_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_cast5_fu_417_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_45_fu_433_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_49_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_fu_469_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_neg5_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_and_t6_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t7_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f4_fu_473_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_514_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_106_fu_532_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_3_fu_536_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_105_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_548_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_4_fu_556_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_cast5_fu_417_p00 : STD_LOGIC_VECTOR (35 downto 0);

    component combine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_array_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_array_V_ce0 : OUT STD_LOGIC;
        input_array_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_array_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_array_V_ce0 : OUT STD_LOGIC;
        output_array_V_we0 : OUT STD_LOGIC;
        output_array_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component input_transfer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V : IN STD_LOGIC_VECTOR (21 downto 0);
        input_buffer_pointer_i : IN STD_LOGIC_VECTOR (31 downto 0);
        input_buffer_pointer_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_buffer_pointer_o_ap_vld : OUT STD_LOGIC;
        initialize_i : IN STD_LOGIC_VECTOR (31 downto 0);
        initialize_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        initialize_o_ap_vld : OUT STD_LOGIC;
        input_array_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_array_V_ce0 : OUT STD_LOGIC;
        input_array_V_we0 : OUT STD_LOGIC;
        input_array_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component interp1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        index_input_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        index_input_V_ce0 : OUT STD_LOGIC;
        index_input_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_input_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        index_input_V_ce1 : OUT STD_LOGIC;
        index_input_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        transfer_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        transfer_array_V_ce0 : OUT STD_LOGIC;
        transfer_array_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        transfer_array_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        transfer_array_V_ce1 : OUT STD_LOGIC;
        transfer_array_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_output_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        index_output_V_ce0 : OUT STD_LOGIC;
        index_output_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_realtime_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_realtime_V_ce0 : OUT STD_LOGIC;
        output_realtime_V_we0 : OUT STD_LOGIC;
        output_realtime_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component output_transfer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_array_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_array_V_ce0 : OUT STD_LOGIC;
        output_array_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        transfer_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        transfer_array_V_ce0 : OUT STD_LOGIC;
        transfer_array_V_we0 : OUT STD_LOGIC;
        transfer_array_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_input_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_transfer_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_index_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_array_V_U : component top_input_array_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_array_V_address0,
        ce0 => input_array_V_ce0,
        we0 => input_array_V_we0,
        d0 => input_array_V_d0,
        q0 => input_array_V_q0);

    output_array_V_U : component top_input_array_V
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_array_V_address0,
        ce0 => output_array_V_ce0,
        we0 => output_array_V_we0,
        d0 => output_array_V_d0,
        q0 => output_array_V_q0);

    transfer_array_V_U : component top_transfer_array_V
    generic map (
        DataWidth => 32,
        AddressRange => 323,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => transfer_array_V_address0,
        ce0 => transfer_array_V_ce0,
        we0 => transfer_array_V_we0,
        d0 => transfer_array_V_d0,
        q0 => transfer_array_V_q0,
        address1 => transfer_array_V_address1,
        ce1 => transfer_array_V_ce1,
        q1 => transfer_array_V_q1);

    index_input_V_U : component top_transfer_array_V
    generic map (
        DataWidth => 32,
        AddressRange => 323,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => index_input_V_address0,
        ce0 => index_input_V_ce0,
        we0 => index_input_V_we0,
        d0 => index_input_V_d0,
        q0 => index_input_V_q0,
        address1 => index_input_V_address1,
        ce1 => index_input_V_ce1,
        q1 => index_input_V_q1);

    index_output_V_U : component top_index_output_V
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => index_output_V_address0,
        ce0 => index_output_V_ce0,
        we0 => index_output_V_we0,
        d0 => index_output_V_d0,
        q0 => index_output_V_q0);

    output_realtime_V_U : component top_index_output_V
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_realtime_V_address0,
        ce0 => output_realtime_V_ce0,
        we0 => output_realtime_V_we0,
        d0 => output_realtime_V_d0,
        q0 => output_realtime_V_q0);

    grp_combine_fu_221 : component combine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_combine_fu_221_ap_start,
        ap_done => grp_combine_fu_221_ap_done,
        ap_idle => grp_combine_fu_221_ap_idle,
        ap_ready => grp_combine_fu_221_ap_ready,
        input_array_V_address0 => grp_combine_fu_221_input_array_V_address0,
        input_array_V_ce0 => grp_combine_fu_221_input_array_V_ce0,
        input_array_V_q0 => grp_combine_fu_221_input_array_V_q0,
        output_array_V_address0 => grp_combine_fu_221_output_array_V_address0,
        output_array_V_ce0 => grp_combine_fu_221_output_array_V_ce0,
        output_array_V_we0 => grp_combine_fu_221_output_array_V_we0,
        output_array_V_d0 => grp_combine_fu_221_output_array_V_d0);

    grp_input_transfer_fu_237 : component input_transfer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_input_transfer_fu_237_ap_start,
        ap_done => grp_input_transfer_fu_237_ap_done,
        ap_idle => grp_input_transfer_fu_237_ap_idle,
        ap_ready => grp_input_transfer_fu_237_ap_ready,
        input_V => grp_input_transfer_fu_237_input_V,
        input_buffer_pointer_i => grp_input_transfer_fu_237_input_buffer_pointer_i,
        input_buffer_pointer_o => grp_input_transfer_fu_237_input_buffer_pointer_o,
        input_buffer_pointer_o_ap_vld => grp_input_transfer_fu_237_input_buffer_pointer_o_ap_vld,
        initialize_i => grp_input_transfer_fu_237_initialize_i,
        initialize_o => grp_input_transfer_fu_237_initialize_o,
        initialize_o_ap_vld => grp_input_transfer_fu_237_initialize_o_ap_vld,
        input_array_V_address0 => grp_input_transfer_fu_237_input_array_V_address0,
        input_array_V_ce0 => grp_input_transfer_fu_237_input_array_V_ce0,
        input_array_V_we0 => grp_input_transfer_fu_237_input_array_V_we0,
        input_array_V_d0 => grp_input_transfer_fu_237_input_array_V_d0);

    grp_interp1_fu_252 : component interp1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_interp1_fu_252_ap_start,
        ap_done => grp_interp1_fu_252_ap_done,
        ap_idle => grp_interp1_fu_252_ap_idle,
        ap_ready => grp_interp1_fu_252_ap_ready,
        index_input_V_address0 => grp_interp1_fu_252_index_input_V_address0,
        index_input_V_ce0 => grp_interp1_fu_252_index_input_V_ce0,
        index_input_V_q0 => grp_interp1_fu_252_index_input_V_q0,
        index_input_V_address1 => grp_interp1_fu_252_index_input_V_address1,
        index_input_V_ce1 => grp_interp1_fu_252_index_input_V_ce1,
        index_input_V_q1 => grp_interp1_fu_252_index_input_V_q1,
        transfer_array_V_address0 => grp_interp1_fu_252_transfer_array_V_address0,
        transfer_array_V_ce0 => grp_interp1_fu_252_transfer_array_V_ce0,
        transfer_array_V_q0 => grp_interp1_fu_252_transfer_array_V_q0,
        transfer_array_V_address1 => grp_interp1_fu_252_transfer_array_V_address1,
        transfer_array_V_ce1 => grp_interp1_fu_252_transfer_array_V_ce1,
        transfer_array_V_q1 => grp_interp1_fu_252_transfer_array_V_q1,
        index_output_V_address0 => grp_interp1_fu_252_index_output_V_address0,
        index_output_V_ce0 => grp_interp1_fu_252_index_output_V_ce0,
        index_output_V_q0 => grp_interp1_fu_252_index_output_V_q0,
        output_realtime_V_address0 => grp_interp1_fu_252_output_realtime_V_address0,
        output_realtime_V_ce0 => grp_interp1_fu_252_output_realtime_V_ce0,
        output_realtime_V_we0 => grp_interp1_fu_252_output_realtime_V_we0,
        output_realtime_V_d0 => grp_interp1_fu_252_output_realtime_V_d0);

    grp_output_transfer_fu_264 : component output_transfer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_output_transfer_fu_264_ap_start,
        ap_done => grp_output_transfer_fu_264_ap_done,
        ap_idle => grp_output_transfer_fu_264_ap_idle,
        ap_ready => grp_output_transfer_fu_264_ap_ready,
        output_array_V_address0 => grp_output_transfer_fu_264_output_array_V_address0,
        output_array_V_ce0 => grp_output_transfer_fu_264_output_array_V_ce0,
        output_array_V_q0 => grp_output_transfer_fu_264_output_array_V_q0,
        transfer_array_V_address0 => grp_output_transfer_fu_264_transfer_array_V_address0,
        transfer_array_V_ce0 => grp_output_transfer_fu_264_transfer_array_V_ce0,
        transfer_array_V_we0 => grp_output_transfer_fu_264_transfer_array_V_we0,
        transfer_array_V_d0 => grp_output_transfer_fu_264_transfer_array_V_d0);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_395_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_365_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_395_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_365_p2))) or ((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_395_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_combine_fu_221_ap_start_ap_start_reg assign process. --
    grp_combine_fu_221_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_combine_fu_221_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and ((not((tmp_s_fu_285_p2 = ap_const_lv1_0)) and not((tmp_36_fu_291_p2 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_fu_297_p2)) and not((ap_const_lv1_0 = tmp_39_fu_359_p2)))))) then 
                    grp_combine_fu_221_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_combine_fu_221_ap_ready)) then 
                    grp_combine_fu_221_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_input_transfer_fu_237_ap_start_ap_start_reg assign process. --
    grp_input_transfer_fu_237_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_input_transfer_fu_237_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    grp_input_transfer_fu_237_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_input_transfer_fu_237_ap_ready)) then 
                    grp_input_transfer_fu_237_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_interp1_fu_252_ap_start_ap_start_reg assign process. --
    grp_interp1_fu_252_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_interp1_fu_252_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st10_fsm_8 = ap_CS_fsm)) then 
                    grp_interp1_fu_252_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_interp1_fu_252_ap_ready)) then 
                    grp_interp1_fu_252_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_output_transfer_fu_264_ap_start_ap_start_reg assign process. --
    grp_output_transfer_fu_264_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_output_transfer_fu_264_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                    grp_output_transfer_fu_264_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_output_transfer_fu_264_ap_ready)) then 
                    grp_output_transfer_fu_264_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ii_2_reg_186 assign process. --
    ii_2_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_365_p2))) then 
                ii_2_reg_186 <= ii_fu_371_p2;
            elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_logic_0 = grp_output_transfer_fu_264_ap_done)))) then 
                ii_2_reg_186 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- jj_reg_197 assign process. --
    jj_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_365_p2)))) then 
                jj_reg_197 <= ap_const_lv9_0;
            elsif (((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond8_reg_598))) then 
                jj_reg_197 <= jj_2_reg_602;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_209 assign process. --
    phi_mul_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_365_p2)))) then 
                phi_mul_reg_209 <= ap_const_lv17_0;
            elsif (((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond8_fu_395_p2))) then 
                phi_mul_reg_209 <= next_mul_fu_407_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then
                exitcond8_reg_598 <= exitcond8_fu_395_p2;
                jj_2_reg_602 <= jj_2_fu_401_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = grp_input_transfer_fu_237_initialize_o_ap_vld)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = grp_input_transfer_fu_237_initialize_o_ap_vld)))) then
                initialize <= grp_input_transfer_fu_237_initialize_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                input0_V_reg_569(6) <= input0_V_fu_276_p3(6);
    input0_V_reg_569(7) <= input0_V_fu_276_p3(7);
    input0_V_reg_569(8) <= input0_V_fu_276_p3(8);
    input0_V_reg_569(9) <= input0_V_fu_276_p3(9);
    input0_V_reg_569(10) <= input0_V_fu_276_p3(10);
    input0_V_reg_569(11) <= input0_V_fu_276_p3(11);
    input0_V_reg_569(12) <= input0_V_fu_276_p3(12);
    input0_V_reg_569(13) <= input0_V_fu_276_p3(13);
    input0_V_reg_569(14) <= input0_V_fu_276_p3(14);
    input0_V_reg_569(15) <= input0_V_fu_276_p3(15);
    input0_V_reg_569(16) <= input0_V_fu_276_p3(16);
    input0_V_reg_569(17) <= input0_V_fu_276_p3(17);
    input0_V_reg_569(18) <= input0_V_fu_276_p3(18);
    input0_V_reg_569(19) <= input0_V_fu_276_p3(19);
    input0_V_reg_569(20) <= input0_V_fu_276_p3(20);
    input0_V_reg_569(21) <= input0_V_fu_276_p3(21);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = grp_input_transfer_fu_237_input_buffer_pointer_o_ap_vld)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = grp_input_transfer_fu_237_input_buffer_pointer_o_ap_vld)))) then
                input_buffer_pointer <= grp_input_transfer_fu_237_input_buffer_pointer_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_10 = ap_CS_fsm)) then
                output_count <= tmp_50_fu_505_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((tmp_s_fu_285_p2 = ap_const_lv1_0)))) then
                tmp_36_reg_578 <= tmp_36_fu_291_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and ((tmp_s_fu_285_p2 = ap_const_lv1_0) or (tmp_36_fu_291_p2 = ap_const_lv1_0)))) then
                tmp_37_reg_582 <= tmp_37_fu_297_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (((tmp_s_fu_285_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_37_fu_297_p2))) or ((tmp_36_fu_291_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_37_fu_297_p2)))))) then
                tmp_39_reg_586 <= tmp_39_fu_359_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond8_fu_395_p2))) then
                tmp_44_reg_612 <= mul_cast5_fu_417_p2(35 downto 27);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                tmp_s_reg_574 <= tmp_s_fu_285_p2;
            end if;
        end if;
    end process;
    input0_V_reg_569(5 downto 0) <= "000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_s_fu_285_p2 , tmp_s_reg_574 , tmp_36_fu_291_p2 , tmp_36_reg_578 , tmp_37_fu_297_p2 , tmp_37_reg_582 , tmp_39_fu_359_p2 , tmp_39_reg_586 , exitcond8_fu_395_p2 , ap_reg_ppiten_pp1_it0 , exitcond_fu_365_p2 , grp_combine_fu_221_ap_done , grp_input_transfer_fu_237_ap_done , grp_interp1_fu_252_ap_done , grp_output_transfer_fu_264_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_input_transfer_fu_237_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((((tmp_s_fu_285_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_37_fu_297_p2)) or ((tmp_s_fu_285_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_39_fu_359_p2)) or ((tmp_36_fu_291_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_37_fu_297_p2)) or ((tmp_36_fu_291_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_39_fu_359_p2)))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_combine_fu_221_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_output_transfer_fu_264_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond_fu_365_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
                end if;
            when ap_ST_pp1_stg0_fsm_7 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond8_fu_395_p2))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_8;
                end if;
            when ap_ST_st10_fsm_8 => 
                ap_NS_fsm <= ap_ST_st11_fsm_9;
            when ap_ST_st11_fsm_9 => 
                if (not((((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))) and (ap_const_logic_0 = grp_interp1_fu_252_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_9;
                end if;
            when ap_ST_st12_fsm_10 => 
                ap_NS_fsm <= ap_ST_st13_fsm_11;
            when ap_ST_st13_fsm_11 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st13_fsm_11 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st13_fsm_11 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond8_fu_395_p2 <= "1" when (jj_phi_fu_201_p4 = ap_const_lv9_100) else "0";
    exitcond_fu_365_p2 <= "1" when (ii_2_reg_186 = ap_const_lv9_143) else "0";
    grp_combine_fu_221_ap_start <= grp_combine_fu_221_ap_start_ap_start_reg;
    grp_combine_fu_221_input_array_V_q0 <= input_array_V_q0;
    grp_input_transfer_fu_237_ap_start <= grp_input_transfer_fu_237_ap_start_ap_start_reg;
    grp_input_transfer_fu_237_initialize_i <= initialize;
    grp_input_transfer_fu_237_input_V <= input0_V_reg_569;
    grp_input_transfer_fu_237_input_buffer_pointer_i <= input_buffer_pointer;
    grp_interp1_fu_252_ap_start <= grp_interp1_fu_252_ap_start_ap_start_reg;
    grp_interp1_fu_252_index_input_V_q0 <= index_input_V_q0;
    grp_interp1_fu_252_index_input_V_q1 <= index_input_V_q1;
    grp_interp1_fu_252_index_output_V_q0 <= index_output_V_q0;
    grp_interp1_fu_252_transfer_array_V_q0 <= transfer_array_V_q0;
    grp_interp1_fu_252_transfer_array_V_q1 <= transfer_array_V_q1;
    grp_output_transfer_fu_264_ap_start <= grp_output_transfer_fu_264_ap_start_ap_start_reg;
    grp_output_transfer_fu_264_output_array_V_q0 <= output_array_V_q0;
    ii_fu_371_p2 <= std_logic_vector(unsigned(ii_2_reg_186) + unsigned(ap_const_lv9_1));

    -- index_input_V_address0 assign process. --
    index_input_V_address0_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, grp_interp1_fu_252_index_input_V_address0, tmp_42_fu_390_p1)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            index_input_V_address0 <= tmp_42_fu_390_p1(9 - 1 downto 0);
        elsif (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            index_input_V_address0 <= grp_interp1_fu_252_index_input_V_address0;
        else 
            index_input_V_address0 <= tmp_42_fu_390_p1(9 - 1 downto 0);
        end if; 
    end process;

    index_input_V_address1 <= grp_interp1_fu_252_index_input_V_address1;

    -- index_input_V_ce0 assign process. --
    index_input_V_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, exitcond_fu_365_p2, grp_interp1_fu_252_index_input_V_ce0)
    begin
        if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_365_p2))) then 
            index_input_V_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            index_input_V_ce0 <= grp_interp1_fu_252_index_input_V_ce0;
        else 
            index_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- index_input_V_ce1 assign process. --
    index_input_V_ce1_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, grp_interp1_fu_252_index_input_V_ce1)
    begin
        if (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            index_input_V_ce1 <= grp_interp1_fu_252_index_input_V_ce1;
        else 
            index_input_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    index_input_V_d0 <= std_logic_vector(resize(unsigned(tmp_41_fu_377_p3),32));

    -- index_input_V_we0 assign process. --
    index_input_V_we0_assign_proc : process(ap_CS_fsm, exitcond_fu_365_p2)
    begin
        if ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_365_p2)))) then 
            index_input_V_we0 <= ap_const_logic_1;
        else 
            index_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- index_output_V_address0 assign process. --
    index_output_V_address0_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, ap_reg_ppiten_pp1_it1, grp_interp1_fu_252_index_output_V_address0, tmp_46_fu_445_p1)
    begin
        if (((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            index_output_V_address0 <= tmp_46_fu_445_p1(8 - 1 downto 0);
        elsif (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            index_output_V_address0 <= grp_interp1_fu_252_index_output_V_address0;
        else 
            index_output_V_address0 <= tmp_46_fu_445_p1(8 - 1 downto 0);
        end if; 
    end process;


    -- index_output_V_ce0 assign process. --
    index_output_V_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, exitcond8_reg_598, ap_reg_ppiten_pp1_it1, grp_interp1_fu_252_index_output_V_ce0)
    begin
        if (((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond8_reg_598))) then 
            index_output_V_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            index_output_V_ce0 <= grp_interp1_fu_252_index_output_V_ce0;
        else 
            index_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    index_output_V_d0 <= std_logic_vector(resize(unsigned(tmp_45_fu_433_p3),32));

    -- index_output_V_we0 assign process. --
    index_output_V_we0_assign_proc : process(ap_CS_fsm, exitcond8_reg_598, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond8_reg_598)))) then 
            index_output_V_we0 <= ap_const_logic_1;
        else 
            index_output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input0_V_fu_276_p3 <= (input_r & ap_const_lv6_0);

    -- input_array_V_address0 assign process. --
    input_array_V_address0_assign_proc : process(ap_CS_fsm, grp_combine_fu_221_input_array_V_address0, grp_input_transfer_fu_237_input_array_V_address0)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            input_array_V_address0 <= grp_input_transfer_fu_237_input_array_V_address0;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            input_array_V_address0 <= grp_combine_fu_221_input_array_V_address0;
        else 
            input_array_V_address0 <= grp_input_transfer_fu_237_input_array_V_address0;
        end if; 
    end process;


    -- input_array_V_ce0 assign process. --
    input_array_V_ce0_assign_proc : process(ap_CS_fsm, grp_combine_fu_221_input_array_V_ce0, grp_input_transfer_fu_237_input_array_V_ce0)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            input_array_V_ce0 <= grp_input_transfer_fu_237_input_array_V_ce0;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            input_array_V_ce0 <= grp_combine_fu_221_input_array_V_ce0;
        else 
            input_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_array_V_d0 <= grp_input_transfer_fu_237_input_array_V_d0;

    -- input_array_V_we0 assign process. --
    input_array_V_we0_assign_proc : process(ap_CS_fsm, grp_input_transfer_fu_237_input_array_V_we0)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            input_array_V_we0 <= grp_input_transfer_fu_237_input_array_V_we0;
        else 
            input_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    jj_2_fu_401_p2 <= std_logic_vector(unsigned(jj_phi_fu_201_p4) + unsigned(ap_const_lv9_1));

    -- jj_phi_fu_201_p4 assign process. --
    jj_phi_fu_201_p4_assign_proc : process(ap_CS_fsm, jj_reg_197, exitcond8_reg_598, ap_reg_ppiten_pp1_it1, jj_2_reg_602)
    begin
        if (((ap_ST_pp1_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond8_reg_598))) then 
            jj_phi_fu_201_p4 <= jj_2_reg_602;
        else 
            jj_phi_fu_201_p4 <= jj_reg_197;
        end if; 
    end process;

    mul_cast5_fu_417_p0 <= mul_cast5_fu_417_p00(17 - 1 downto 0);
    mul_cast5_fu_417_p00 <= std_logic_vector(resize(unsigned(phi_mul_reg_209),36));
    mul_cast5_fu_417_p2 <= std_logic_vector(resize(unsigned(mul_cast5_fu_417_p0) * unsigned(ap_const_lv36_80809), 36));
    next_mul_fu_407_p2 <= std_logic_vector(unsigned(phi_mul_reg_209) + unsigned(ap_const_lv17_142));

    -- output_array_V_address0 assign process. --
    output_array_V_address0_assign_proc : process(ap_CS_fsm, grp_combine_fu_221_output_array_V_address0, grp_output_transfer_fu_264_output_array_V_address0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            output_array_V_address0 <= grp_output_transfer_fu_264_output_array_V_address0;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            output_array_V_address0 <= grp_combine_fu_221_output_array_V_address0;
        else 
            output_array_V_address0 <= grp_output_transfer_fu_264_output_array_V_address0;
        end if; 
    end process;


    -- output_array_V_ce0 assign process. --
    output_array_V_ce0_assign_proc : process(ap_CS_fsm, grp_combine_fu_221_output_array_V_ce0, grp_output_transfer_fu_264_output_array_V_ce0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            output_array_V_ce0 <= grp_output_transfer_fu_264_output_array_V_ce0;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            output_array_V_ce0 <= grp_combine_fu_221_output_array_V_ce0;
        else 
            output_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_array_V_d0 <= grp_combine_fu_221_output_array_V_d0;

    -- output_array_V_we0 assign process. --
    output_array_V_we0_assign_proc : process(ap_CS_fsm, grp_combine_fu_221_output_array_V_we0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            output_array_V_we0 <= grp_combine_fu_221_output_array_V_we0;
        else 
            output_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r <= ret_V_4_fu_556_p3(16 - 1 downto 0);

    -- output_r_ap_vld assign process. --
    output_r_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st13_fsm_11 = ap_CS_fsm)) then 
            output_r_ap_vld <= ap_const_logic_1;
        else 
            output_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- output_realtime_V_address0 assign process. --
    output_realtime_V_address0_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, grp_interp1_fu_252_output_realtime_V_address0, tmp_47_fu_450_p1)
    begin
        if ((ap_ST_st12_fsm_10 = ap_CS_fsm)) then 
            output_realtime_V_address0 <= tmp_47_fu_450_p1(8 - 1 downto 0);
        elsif (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            output_realtime_V_address0 <= grp_interp1_fu_252_output_realtime_V_address0;
        else 
            output_realtime_V_address0 <= grp_interp1_fu_252_output_realtime_V_address0;
        end if; 
    end process;


    -- output_realtime_V_ce0 assign process. --
    output_realtime_V_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, grp_interp1_fu_252_output_realtime_V_ce0)
    begin
        if ((ap_ST_st12_fsm_10 = ap_CS_fsm)) then 
            output_realtime_V_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            output_realtime_V_ce0 <= grp_interp1_fu_252_output_realtime_V_ce0;
        else 
            output_realtime_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_realtime_V_d0 <= grp_interp1_fu_252_output_realtime_V_d0;

    -- output_realtime_V_we0 assign process. --
    output_realtime_V_we0_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, grp_interp1_fu_252_output_realtime_V_we0)
    begin
        if (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            output_realtime_V_we0 <= grp_interp1_fu_252_output_realtime_V_we0;
        else 
            output_realtime_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_and_f4_fu_473_p3 <= (ap_const_lv24_0 & tmp_109_fu_469_p1);
    p_and_f_fu_315_p3 <= (ap_const_lv24_0 & tmp_102_fu_311_p1);
    p_and_t6_fu_491_p3 <= (ap_const_lv24_0 & tmp_110_fu_487_p1);
    p_and_t_fu_333_p3 <= (ap_const_lv24_0 & tmp_103_fu_329_p1);
    p_neg5_fu_481_p2 <= (output_count xor ap_const_lv32_FFFFFFFF);
    p_neg_fu_323_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(input_buffer_pointer));
    p_neg_t7_fu_499_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t6_fu_491_p3));
    p_neg_t_fu_341_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t_fu_333_p3));
    p_s_fu_548_p3 <= 
        ret_V_fu_514_p4 when (tmp_48_fu_542_p2(0) = '1') else 
        ret_V_3_fu_536_p2;
    ret_V_3_fu_536_p2 <= std_logic_vector(unsigned(ret_V_fu_514_p4) + unsigned(ap_const_lv26_1));
    ret_V_4_fu_556_p3 <= 
        p_s_fu_548_p3 when (tmp_105_fu_524_p3(0) = '1') else 
        ret_V_fu_514_p4;
    ret_V_fu_514_p4 <= output_realtime_V_q0(31 downto 6);
    tmp_101_fu_303_p3 <= input_buffer_pointer(31 downto 31);
    tmp_102_fu_311_p1 <= input_buffer_pointer(8 - 1 downto 0);
    tmp_103_fu_329_p1 <= p_neg_fu_323_p2(8 - 1 downto 0);
    tmp_104_fu_355_p1 <= tmp_38_fu_347_p3(9 - 1 downto 0);
    tmp_105_fu_524_p3 <= output_realtime_V_q0(31 downto 31);
    tmp_106_fu_532_p1 <= output_realtime_V_q0(6 - 1 downto 0);
    tmp_108_fu_461_p3 <= tmp_49_fu_455_p2(31 downto 31);
    tmp_109_fu_469_p1 <= tmp_49_fu_455_p2(8 - 1 downto 0);
    tmp_110_fu_487_p1 <= p_neg5_fu_481_p2(8 - 1 downto 0);
    tmp_36_fu_291_p2 <= "1" when (input_buffer_pointer = ap_const_lv32_3FF) else "0";
    tmp_37_fu_297_p2 <= "1" when (initialize = ap_const_lv32_1) else "0";
    tmp_38_fu_347_p3 <= 
        p_neg_t_fu_341_p2 when (tmp_101_fu_303_p3(0) = '1') else 
        p_and_f_fu_315_p3;
    tmp_39_fu_359_p2 <= "1" when (tmp_104_fu_355_p1 = ap_const_lv9_FF) else "0";
    tmp_41_fu_377_p3 <= (ii_2_reg_186 & ap_const_lv6_0);
    tmp_42_fu_390_p1 <= std_logic_vector(resize(unsigned(ii_2_reg_186),64));
    tmp_45_fu_433_p3 <= (tmp_44_reg_612 & ap_const_lv6_0);
    tmp_46_fu_445_p1 <= std_logic_vector(resize(unsigned(jj_reg_197),64));
    
    output_count_temp <= signed(output_count);
    tmp_47_fu_450_p1 <= std_logic_vector(resize(output_count_temp,64));

    tmp_48_fu_542_p2 <= "1" when (tmp_106_fu_532_p1 = ap_const_lv6_0) else "0";
    tmp_49_fu_455_p2 <= std_logic_vector(unsigned(output_count) + unsigned(ap_const_lv32_1));
    tmp_50_fu_505_p3 <= 
        p_neg_t7_fu_499_p2 when (tmp_108_fu_461_p3(0) = '1') else 
        p_and_f4_fu_473_p3;
    tmp_s_fu_285_p2 <= "1" when (initialize = ap_const_lv32_0) else "0";

    -- transfer_array_V_address0 assign process. --
    transfer_array_V_address0_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, grp_interp1_fu_252_transfer_array_V_address0, grp_output_transfer_fu_264_transfer_array_V_address0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            transfer_array_V_address0 <= grp_output_transfer_fu_264_transfer_array_V_address0;
        elsif (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            transfer_array_V_address0 <= grp_interp1_fu_252_transfer_array_V_address0;
        else 
            transfer_array_V_address0 <= grp_output_transfer_fu_264_transfer_array_V_address0;
        end if; 
    end process;

    transfer_array_V_address1 <= grp_interp1_fu_252_transfer_array_V_address1;

    -- transfer_array_V_ce0 assign process. --
    transfer_array_V_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, grp_interp1_fu_252_transfer_array_V_ce0, grp_output_transfer_fu_264_transfer_array_V_ce0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            transfer_array_V_ce0 <= grp_output_transfer_fu_264_transfer_array_V_ce0;
        elsif (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            transfer_array_V_ce0 <= grp_interp1_fu_252_transfer_array_V_ce0;
        else 
            transfer_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- transfer_array_V_ce1 assign process. --
    transfer_array_V_ce1_assign_proc : process(ap_CS_fsm, tmp_s_reg_574, tmp_36_reg_578, tmp_37_reg_582, tmp_39_reg_586, grp_interp1_fu_252_transfer_array_V_ce1)
    begin
        if (((ap_ST_st11_fsm_9 = ap_CS_fsm) and ((not((tmp_s_reg_574 = ap_const_lv1_0)) and not((tmp_36_reg_578 = ap_const_lv1_0))) or (not((ap_const_lv1_0 = tmp_37_reg_582)) and not((ap_const_lv1_0 = tmp_39_reg_586)))))) then 
            transfer_array_V_ce1 <= grp_interp1_fu_252_transfer_array_V_ce1;
        else 
            transfer_array_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    transfer_array_V_d0 <= grp_output_transfer_fu_264_transfer_array_V_d0;

    -- transfer_array_V_we0 assign process. --
    transfer_array_V_we0_assign_proc : process(ap_CS_fsm, grp_output_transfer_fu_264_transfer_array_V_we0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            transfer_array_V_we0 <= grp_output_transfer_fu_264_transfer_array_V_we0;
        else 
            transfer_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
