-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity output_transfer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_array_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_array_V_ce0 : OUT STD_LOGIC;
    output_array_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    transfer_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    transfer_array_V_ce0 : OUT STD_LOGIC;
    transfer_array_V_we0 : OUT STD_LOGIC;
    transfer_array_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of output_transfer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_286 : STD_LOGIC_VECTOR (9 downto 0) := "1010000110";
    constant ap_const_lv10_3C9 : STD_LOGIC_VECTOR (9 downto 0) := "1111001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_143 : STD_LOGIC_VECTOR (9 downto 0) := "0101000011";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_143 : STD_LOGIC_VECTOR (8 downto 0) := "101000011";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_2BD : STD_LOGIC_VECTOR (9 downto 0) := "1010111101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_50C : STD_LOGIC_VECTOR (10 downto 0) := "10100001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal base_output : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal output_buffer_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_buffer_V_ce0 : STD_LOGIC;
    signal output_buffer_V_we0 : STD_LOGIC;
    signal output_buffer_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buffer_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buffer_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_buffer_V_ce1 : STD_LOGIC;
    signal output_buffer_V_we1 : STD_LOGIC;
    signal output_buffer_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_output_load_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_cast_fu_236_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal offset_cast_reg_404 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond7_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_246_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_5_reg_414 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_buffer_V_addr_reg_419 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond6_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj_1_fu_280_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal jj_1_reg_433 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_buffer_V_addr_1_reg_438 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_311_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_447 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_buffer_V_addr_2_reg_452 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_152 : STD_LOGIC_VECTOR (10 downto 0);
    signal jj_reg_163 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_175 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_cast_fu_200_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sel_tmp7_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_214_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal offset_fu_228_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_257_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal jj_cast_fu_286_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_290_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_cast9_fu_317_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_321_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_fu_350_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_neg_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_fu_367_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_t_fu_371_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_fu_342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f_fu_354_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component output_transfer_output_buffer_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    output_buffer_V_U : component output_transfer_output_buffer_V
    generic map (
        DataWidth => 32,
        AddressRange => 1993,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_buffer_V_address0,
        ce0 => output_buffer_V_ce0,
        we0 => output_buffer_V_we0,
        d0 => output_buffer_V_d0,
        q0 => output_buffer_V_q0,
        address1 => output_buffer_V_address1,
        ce1 => output_buffer_V_ce1,
        we1 => output_buffer_V_we1,
        d1 => output_buffer_V_d1);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_152 assign process. --
    i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond7_reg_410 = ap_const_lv1_0))) then 
                i_reg_152 <= i_5_reg_414;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_152 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- j_reg_175 assign process. --
    j_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((sel_tmp_reg_400 = ap_const_lv1_0)))) then 
                j_reg_175 <= ap_const_lv10_0;
            elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_reg_443))) then 
                j_reg_175 <= j_1_reg_447;
            end if; 
        end if;
    end process;

    -- jj_reg_163 assign process. --
    jj_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond7_fu_240_p2 = ap_const_lv1_0)))) then 
                jj_reg_163 <= ap_const_lv9_0;
            elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_reg_429))) then 
                jj_reg_163 <= jj_1_reg_433;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                base_output <= tmp_28_fu_385_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                base_output_load_reg_394 <= base_output;
                offset_cast_reg_404(0) <= offset_cast_fu_236_p1(0);
    offset_cast_reg_404(1) <= offset_cast_fu_236_p1(1);
    offset_cast_reg_404(2) <= offset_cast_fu_236_p1(2);
    offset_cast_reg_404(3) <= offset_cast_fu_236_p1(3);
    offset_cast_reg_404(6) <= offset_cast_fu_236_p1(6);
    offset_cast_reg_404(7) <= offset_cast_fu_236_p1(7);
    offset_cast_reg_404(8) <= offset_cast_fu_236_p1(8);
    offset_cast_reg_404(9) <= offset_cast_fu_236_p1(9);
                sel_tmp_reg_400 <= sel_tmp_fu_188_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                exitcond5_reg_443 <= exitcond5_fu_305_p2;
                j_1_reg_447 <= j_1_fu_311_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                exitcond6_reg_429 <= exitcond6_fu_274_p2;
                jj_1_reg_433 <= jj_1_fu_280_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                exitcond7_reg_410 <= exitcond7_fu_240_p2;
                i_5_reg_414 <= i_5_fu_246_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_fu_274_p2))) then
                output_buffer_V_addr_1_reg_438 <= tmp_25_fu_295_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_fu_305_p2))) then
                output_buffer_V_addr_2_reg_452 <= tmp_30_fu_327_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond7_fu_240_p2 = ap_const_lv1_0))) then
                output_buffer_V_addr_reg_419 <= tmp_22_fu_262_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    offset_cast_reg_404(5 downto 4) <= "00";
    offset_cast_reg_404(10) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , sel_tmp_reg_400 , exitcond7_fu_240_p2 , exitcond6_fu_274_p2 , exitcond5_fu_305_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond7_fu_240_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond6_fu_274_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st6_fsm_5 => 
                if ((sel_tmp_reg_400 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond5_fu_305_p2)) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_305_p2 <= "1" when (j_reg_175 = ap_const_lv10_2BD) else "0";
    exitcond6_fu_274_p2 <= "1" when (jj_reg_163 = ap_const_lv9_143) else "0";
    exitcond7_fu_240_p2 <= "1" when (i_reg_152 = ap_const_lv11_400) else "0";
    i_5_fu_246_p2 <= std_logic_vector(unsigned(i_reg_152) + unsigned(ap_const_lv11_1));
    j_1_fu_311_p2 <= std_logic_vector(unsigned(j_reg_175) + unsigned(ap_const_lv10_1));
    j_cast9_fu_317_p1 <= std_logic_vector(resize(unsigned(j_reg_175),11));
    jj_1_fu_280_p2 <= std_logic_vector(unsigned(jj_reg_163) + unsigned(ap_const_lv9_1));
    jj_cast_fu_286_p1 <= std_logic_vector(resize(unsigned(jj_reg_163),11));
    offset_cast_fu_236_p1 <= std_logic_vector(resize(unsigned(offset_fu_228_p3),11));
    offset_fu_228_p3 <= 
        ap_const_lv10_143 when (sel_tmp7_fu_222_p2(0) = '1') else 
        sel_tmp6_fu_214_p3;
    output_array_V_address0 <= tmp_fu_252_p1(10 - 1 downto 0);

    -- output_array_V_ce0 assign process. --
    output_array_V_ce0_assign_proc : process(ap_CS_fsm, exitcond7_fu_240_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond7_fu_240_p2 = ap_const_lv1_0))) then 
            output_array_V_ce0 <= ap_const_logic_1;
        else 
            output_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_buffer_V_address0 assign process. --
    output_buffer_V_address0_assign_proc : process(ap_CS_fsm, output_buffer_V_addr_reg_419, output_buffer_V_addr_1_reg_438, tmp_22_fu_262_p1, tmp_25_fu_295_p1, tmp_30_fu_327_p1, tmp_31_fu_332_p1)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            output_buffer_V_address0 <= tmp_31_fu_332_p1(11 - 1 downto 0);
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            output_buffer_V_address0 <= output_buffer_V_addr_1_reg_438;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            output_buffer_V_address0 <= output_buffer_V_addr_reg_419;
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            output_buffer_V_address0 <= tmp_30_fu_327_p1(11 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            output_buffer_V_address0 <= tmp_25_fu_295_p1(11 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            output_buffer_V_address0 <= tmp_22_fu_262_p1(11 - 1 downto 0);
        else 
            output_buffer_V_address0 <= tmp_31_fu_332_p1(11 - 1 downto 0);
        end if; 
    end process;

    output_buffer_V_address1 <= output_buffer_V_addr_2_reg_452;

    -- output_buffer_V_ce0 assign process. --
    output_buffer_V_ce0_assign_proc : process(ap_CS_fsm, exitcond7_fu_240_p2, exitcond7_reg_410, exitcond6_fu_274_p2, exitcond6_reg_429, exitcond5_fu_305_p2, exitcond5_reg_443)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond7_fu_240_p2 = ap_const_lv1_0)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_fu_274_p2)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_fu_305_p2)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond7_reg_410 = ap_const_lv1_0)) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_reg_429)) or ((ap_ST_st8_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_reg_443)))) then 
            output_buffer_V_ce0 <= ap_const_logic_1;
        else 
            output_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_buffer_V_ce1 assign process. --
    output_buffer_V_ce1_assign_proc : process(ap_CS_fsm, exitcond5_reg_443)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_reg_443))) then 
            output_buffer_V_ce1 <= ap_const_logic_1;
        else 
            output_buffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_buffer_V_d0 assign process. --
    output_buffer_V_d0_assign_proc : process(ap_CS_fsm, output_buffer_V_q0, r_V_fu_267_p2)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            output_buffer_V_d0 <= output_buffer_V_q0;
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            output_buffer_V_d0 <= ap_const_lv32_0;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            output_buffer_V_d0 <= r_V_fu_267_p2;
        else 
            output_buffer_V_d0 <= r_V_fu_267_p2;
        end if; 
    end process;

    output_buffer_V_d1 <= ap_const_lv32_0;

    -- output_buffer_V_we0 assign process. --
    output_buffer_V_we0_assign_proc : process(ap_CS_fsm, exitcond7_reg_410, exitcond6_reg_429, exitcond5_reg_443)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond7_reg_410 = ap_const_lv1_0)) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_reg_429)) or ((ap_ST_st8_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_reg_443)))) then 
            output_buffer_V_we0 <= ap_const_logic_1;
        else 
            output_buffer_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_buffer_V_we1 assign process. --
    output_buffer_V_we1_assign_proc : process(ap_CS_fsm, exitcond5_reg_443)
    begin
        if ((((ap_ST_st8_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_reg_443)))) then 
            output_buffer_V_we1 <= ap_const_logic_1;
        else 
            output_buffer_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_and_f_fu_354_p3 <= (ap_const_lv30_0 & tmp_99_fu_350_p1);
    p_and_t_fu_371_p3 <= (ap_const_lv30_0 & tmp_100_fu_367_p1);
    p_neg_fu_362_p2 <= (base_output_load_reg_394 xor ap_const_lv32_FFFFFFFF);
    p_neg_t_fu_379_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t_fu_371_p3));
    r_V_fu_267_p2 <= std_logic_vector(unsigned(output_array_V_q0) + unsigned(output_buffer_V_q0));
    sel_tmp4_cast_fu_200_p3 <= 
        ap_const_lv10_286 when (sel_tmp5_fu_194_p2(0) = '1') else 
        ap_const_lv10_3C9;
    sel_tmp5_fu_194_p2 <= "1" when (base_output = ap_const_lv32_2) else "0";
    sel_tmp6_fu_214_p3 <= 
        sel_tmp4_cast_fu_200_p3 when (tmp_32_fu_208_p2(0) = '1') else 
        ap_const_lv10_0;
    sel_tmp7_fu_222_p2 <= "1" when (base_output = ap_const_lv32_1) else "0";
    sel_tmp_fu_188_p2 <= "1" when (base_output = ap_const_lv32_3) else "0";
    tmp_100_fu_367_p1 <= p_neg_fu_362_p2(2 - 1 downto 0);
    tmp_22_fu_262_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_257_p2),64));
    tmp_24_fu_290_p2 <= std_logic_vector(unsigned(jj_cast_fu_286_p1) + unsigned(offset_cast_reg_404));
    tmp_25_fu_295_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_290_p2),64));
    tmp_26_fu_300_p1 <= std_logic_vector(resize(unsigned(jj_reg_163),64));
    tmp_27_fu_337_p2 <= std_logic_vector(unsigned(base_output_load_reg_394) + unsigned(ap_const_lv32_1));
    tmp_28_fu_385_p3 <= 
        p_neg_t_fu_379_p2 when (tmp_98_fu_342_p3(0) = '1') else 
        p_and_f_fu_354_p3;
    tmp_29_fu_321_p2 <= std_logic_vector(unsigned(j_cast9_fu_317_p1) + unsigned(ap_const_lv11_50C));
    tmp_30_fu_327_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_321_p2),64));
    tmp_31_fu_332_p1 <= std_logic_vector(resize(unsigned(j_reg_175),64));
    tmp_32_fu_208_p2 <= (sel_tmp5_fu_194_p2 or sel_tmp_fu_188_p2);
    tmp_98_fu_342_p3 <= tmp_27_fu_337_p2(31 downto 31);
    tmp_99_fu_350_p1 <= tmp_27_fu_337_p2(2 - 1 downto 0);
    tmp_fu_252_p1 <= std_logic_vector(resize(unsigned(i_reg_152),64));
    tmp_s_fu_257_p2 <= std_logic_vector(unsigned(i_reg_152) + unsigned(offset_cast_reg_404));
    transfer_array_V_address0 <= tmp_26_fu_300_p1(9 - 1 downto 0);

    -- transfer_array_V_ce0 assign process. --
    transfer_array_V_ce0_assign_proc : process(ap_CS_fsm, exitcond6_reg_429)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_reg_429))) then 
            transfer_array_V_ce0 <= ap_const_logic_1;
        else 
            transfer_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    transfer_array_V_d0 <= output_buffer_V_q0;

    -- transfer_array_V_we0 assign process. --
    transfer_array_V_we0_assign_proc : process(ap_CS_fsm, exitcond6_reg_429)
    begin
        if ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_reg_429)))) then 
            transfer_array_V_we0 <= ap_const_logic_1;
        else 
            transfer_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
