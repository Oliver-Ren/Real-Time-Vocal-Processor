-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity input_transfer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (21 downto 0);
    input_buffer_pointer_i : IN STD_LOGIC_VECTOR (31 downto 0);
    input_buffer_pointer_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_buffer_pointer_o_ap_vld : OUT STD_LOGIC;
    initialize_i : IN STD_LOGIC_VECTOR (31 downto 0);
    initialize_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    initialize_o_ap_vld : OUT STD_LOGIC;
    input_array_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_array_V_ce0 : OUT STD_LOGIC;
    input_array_V_we0 : OUT STD_LOGIC;
    input_array_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of input_transfer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_ST_st6_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_ST_pp1_stg0_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_ST_st44_fsm_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_ST_st45_fsm_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st46_fsm_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_ST_st47_fsm_10 : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_ST_st48_fsm_11 : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_ST_st49_fsm_12 : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_ST_st50_fsm_13 : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_ST_st51_fsm_14 : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_ST_st52_fsm_15 : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_ST_st53_fsm_16 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st54_fsm_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010001";
    constant ap_ST_st55_fsm_18 : STD_LOGIC_VECTOR (6 downto 0) := "0010010";
    constant ap_ST_st56_fsm_19 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_ST_st57_fsm_20 : STD_LOGIC_VECTOR (6 downto 0) := "0010100";
    constant ap_ST_st58_fsm_21 : STD_LOGIC_VECTOR (6 downto 0) := "0010101";
    constant ap_ST_st59_fsm_22 : STD_LOGIC_VECTOR (6 downto 0) := "0010110";
    constant ap_ST_st60_fsm_23 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_ST_st61_fsm_24 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_ST_st62_fsm_25 : STD_LOGIC_VECTOR (6 downto 0) := "0011001";
    constant ap_ST_st63_fsm_26 : STD_LOGIC_VECTOR (6 downto 0) := "0011010";
    constant ap_ST_st64_fsm_27 : STD_LOGIC_VECTOR (6 downto 0) := "0011011";
    constant ap_ST_st65_fsm_28 : STD_LOGIC_VECTOR (6 downto 0) := "0011100";
    constant ap_ST_st66_fsm_29 : STD_LOGIC_VECTOR (6 downto 0) := "0011101";
    constant ap_ST_st67_fsm_30 : STD_LOGIC_VECTOR (6 downto 0) := "0011110";
    constant ap_ST_st68_fsm_31 : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_ST_st69_fsm_32 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st70_fsm_33 : STD_LOGIC_VECTOR (6 downto 0) := "0100001";
    constant ap_ST_st71_fsm_34 : STD_LOGIC_VECTOR (6 downto 0) := "0100010";
    constant ap_ST_st72_fsm_35 : STD_LOGIC_VECTOR (6 downto 0) := "0100011";
    constant ap_ST_st73_fsm_36 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_ST_st74_fsm_37 : STD_LOGIC_VECTOR (6 downto 0) := "0100101";
    constant ap_ST_st75_fsm_38 : STD_LOGIC_VECTOR (6 downto 0) := "0100110";
    constant ap_ST_st76_fsm_39 : STD_LOGIC_VECTOR (6 downto 0) := "0100111";
    constant ap_ST_st77_fsm_40 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_ST_st78_fsm_41 : STD_LOGIC_VECTOR (6 downto 0) := "0101001";
    constant ap_ST_st79_fsm_42 : STD_LOGIC_VECTOR (6 downto 0) := "0101010";
    constant ap_ST_st80_fsm_43 : STD_LOGIC_VECTOR (6 downto 0) := "0101011";
    constant ap_ST_st81_fsm_44 : STD_LOGIC_VECTOR (6 downto 0) := "0101100";
    constant ap_ST_st82_fsm_45 : STD_LOGIC_VECTOR (6 downto 0) := "0101101";
    constant ap_ST_st83_fsm_46 : STD_LOGIC_VECTOR (6 downto 0) := "0101110";
    constant ap_ST_st84_fsm_47 : STD_LOGIC_VECTOR (6 downto 0) := "0101111";
    constant ap_ST_st85_fsm_48 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_ST_st86_fsm_49 : STD_LOGIC_VECTOR (6 downto 0) := "0110001";
    constant ap_ST_st87_fsm_50 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_ST_st88_fsm_51 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_ST_st89_fsm_52 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_ST_st90_fsm_53 : STD_LOGIC_VECTOR (6 downto 0) := "0110101";
    constant ap_ST_st91_fsm_54 : STD_LOGIC_VECTOR (6 downto 0) := "0110110";
    constant ap_ST_st92_fsm_55 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_ST_st93_fsm_56 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_ST_st94_fsm_57 : STD_LOGIC_VECTOR (6 downto 0) := "0111001";
    constant ap_ST_st95_fsm_58 : STD_LOGIC_VECTOR (6 downto 0) := "0111010";
    constant ap_ST_st96_fsm_59 : STD_LOGIC_VECTOR (6 downto 0) := "0111011";
    constant ap_ST_st97_fsm_60 : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_ST_st98_fsm_61 : STD_LOGIC_VECTOR (6 downto 0) := "0111101";
    constant ap_ST_st99_fsm_62 : STD_LOGIC_VECTOR (6 downto 0) := "0111110";
    constant ap_ST_st100_fsm_63 : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_ST_st101_fsm_64 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_ST_st102_fsm_65 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_ST_st103_fsm_66 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_ST_st104_fsm_67 : STD_LOGIC_VECTOR (6 downto 0) := "1000011";
    constant ap_ST_st105_fsm_68 : STD_LOGIC_VECTOR (6 downto 0) := "1000100";
    constant ap_ST_st106_fsm_69 : STD_LOGIC_VECTOR (6 downto 0) := "1000101";
    constant ap_ST_st107_fsm_70 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_ST_st108_fsm_71 : STD_LOGIC_VECTOR (6 downto 0) := "1000111";
    constant ap_ST_st109_fsm_72 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_ST_st110_fsm_73 : STD_LOGIC_VECTOR (6 downto 0) := "1001001";
    constant ap_ST_st111_fsm_74 : STD_LOGIC_VECTOR (6 downto 0) := "1001010";
    constant ap_ST_st112_fsm_75 : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_500 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal input_buffer_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal input_buffer_V_ce0 : STD_LOGIC;
    signal input_buffer_V_we0 : STD_LOGIC;
    signal input_buffer_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_V_temp: signed (22-1 downto 0);
    signal input_buffer_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_input : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal input_counter_1_reg_149 : STD_LOGIC_VECTOR (10 downto 0);
    signal input_counter_reg_160 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it34 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it35 : STD_LOGIC := '0';
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it5 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it6 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it7 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it8 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it9 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it10 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it11 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it12 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it13 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it14 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it15 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it16 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it17 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it18 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it19 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it21 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it22 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it23 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it24 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it25 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it26 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it27 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it28 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it29 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it30 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it31 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it32 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it33 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_input_counter_reg_160_pp1_it34 : STD_LOGIC_VECTOR (10 downto 0);
    signal input_buffer_pointer_load_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal input_counter_3_fu_314_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_45_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_reg_421 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_431 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_431_pp1_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_counter_2_fu_331_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal input_counter_2_reg_435 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_counter_phi_fu_164_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_buffer_pointer_i_temp: signed (32-1 downto 0);
    signal tmp_42_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_353_p2_temp: signed (32-1 downto 0);
    signal tmp_43_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_fu_214_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_fu_225_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_and_t6_fu_229_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t7_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f4_fu_217_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_243_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_123_fu_251_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_118_fu_261_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_119_fu_272_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_and_t_fu_276_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f_fu_264_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_290_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_fu_298_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_124_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_counter_cast_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_ce : STD_LOGIC;
    signal grp_fu_369_ce : STD_LOGIC;
    signal grp_fu_381_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component top_srem_32ns_32ns_32_35 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component input_transfer_input_buffer_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_buffer_V_U : component input_transfer_input_buffer_V
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_buffer_V_address0,
        ce0 => input_buffer_V_ce0,
        we0 => input_buffer_V_we0,
        d0 => input_buffer_V_d0,
        q0 => input_buffer_V_q0);

    top_srem_32ns_32ns_32_35_U1 : component top_srem_32ns_32ns_32_35
    generic map (
        ID => 1,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_353_p0,
        din1 => grp_fu_353_p1,
        ce => grp_fu_353_ce,
        dout => grp_fu_353_p2);

    top_srem_32ns_32ns_32_35_U2 : component top_srem_32ns_32ns_32_35
    generic map (
        ID => 2,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_369_p0,
        din1 => grp_fu_369_p1,
        ce => grp_fu_369_ce,
        dout => grp_fu_369_p2);

    top_srem_32ns_32ns_32_35_U3 : component top_srem_32ns_32ns_32_35
    generic map (
        ID => 3,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_381_p0,
        din1 => grp_fu_381_p1,
        ce => grp_fu_381_ce,
        dout => grp_fu_381_p2);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_308_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((tmp_36_reg_404 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_308_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((tmp_36_reg_404 = ap_const_lv1_0))) or ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_308_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_325_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_325_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408))) or ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_325_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it10 assign process. --
    ap_reg_ppiten_pp1_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it10 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it10 <= ap_reg_ppiten_pp1_it9;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it11 assign process. --
    ap_reg_ppiten_pp1_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it11 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it11 <= ap_reg_ppiten_pp1_it10;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it12 assign process. --
    ap_reg_ppiten_pp1_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it12 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it12 <= ap_reg_ppiten_pp1_it11;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it13 assign process. --
    ap_reg_ppiten_pp1_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it13 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it13 <= ap_reg_ppiten_pp1_it12;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it14 assign process. --
    ap_reg_ppiten_pp1_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it14 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it14 <= ap_reg_ppiten_pp1_it13;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it15 assign process. --
    ap_reg_ppiten_pp1_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it15 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it15 <= ap_reg_ppiten_pp1_it14;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it15 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it16 assign process. --
    ap_reg_ppiten_pp1_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it16 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it16 <= ap_reg_ppiten_pp1_it15;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it17 assign process. --
    ap_reg_ppiten_pp1_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it17 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it17 <= ap_reg_ppiten_pp1_it16;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it17 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it18 assign process. --
    ap_reg_ppiten_pp1_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it18 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it18 <= ap_reg_ppiten_pp1_it17;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it18 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it19 assign process. --
    ap_reg_ppiten_pp1_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it19 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it19 <= ap_reg_ppiten_pp1_it18;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it19 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it20 assign process. --
    ap_reg_ppiten_pp1_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it20 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it20 <= ap_reg_ppiten_pp1_it19;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it20 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it21 assign process. --
    ap_reg_ppiten_pp1_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it21 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it21 <= ap_reg_ppiten_pp1_it20;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it21 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it22 assign process. --
    ap_reg_ppiten_pp1_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it22 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it22 <= ap_reg_ppiten_pp1_it21;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it22 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it23 assign process. --
    ap_reg_ppiten_pp1_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it23 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it23 <= ap_reg_ppiten_pp1_it22;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it23 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it24 assign process. --
    ap_reg_ppiten_pp1_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it24 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it24 <= ap_reg_ppiten_pp1_it23;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it24 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it25 assign process. --
    ap_reg_ppiten_pp1_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it25 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it25 <= ap_reg_ppiten_pp1_it24;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it25 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it26 assign process. --
    ap_reg_ppiten_pp1_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it26 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it26 <= ap_reg_ppiten_pp1_it25;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it26 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it27 assign process. --
    ap_reg_ppiten_pp1_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it27 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it27 <= ap_reg_ppiten_pp1_it26;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it27 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it28 assign process. --
    ap_reg_ppiten_pp1_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it28 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it28 <= ap_reg_ppiten_pp1_it27;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it28 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it29 assign process. --
    ap_reg_ppiten_pp1_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it29 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it29 <= ap_reg_ppiten_pp1_it28;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it29 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it30 assign process. --
    ap_reg_ppiten_pp1_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it30 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it30 <= ap_reg_ppiten_pp1_it29;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it30 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it31 assign process. --
    ap_reg_ppiten_pp1_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it31 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it31 <= ap_reg_ppiten_pp1_it30;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it31 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it32 assign process. --
    ap_reg_ppiten_pp1_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it32 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it32 <= ap_reg_ppiten_pp1_it31;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it32 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it33 assign process. --
    ap_reg_ppiten_pp1_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it33 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it33 <= ap_reg_ppiten_pp1_it32;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it33 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it34 assign process. --
    ap_reg_ppiten_pp1_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it34 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it34 <= ap_reg_ppiten_pp1_it33;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it34 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it35 assign process. --
    ap_reg_ppiten_pp1_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it35 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it35 <= ap_reg_ppiten_pp1_it34;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it35 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it5 assign process. --
    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it6 assign process. --
    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it7 assign process. --
    ap_reg_ppiten_pp1_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it8 assign process. --
    ap_reg_ppiten_pp1_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it8 <= ap_reg_ppiten_pp1_it7;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it9 assign process. --
    ap_reg_ppiten_pp1_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it9 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it9 <= ap_reg_ppiten_pp1_it8;
                elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                    ap_reg_ppiten_pp1_it9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- base_input assign process. --
    base_input_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st78_fsm_41 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)) and not((tmp_32_reg_400 = ap_const_lv1_0)))) then 
                base_input <= grp_fu_369_p2;
            elsif ((ap_ST_st6_fsm_4 = ap_CS_fsm)) then 
                base_input <= grp_fu_178_p2;
            end if; 
        end if;
    end process;

    -- input_counter_1_reg_149 assign process. --
    input_counter_1_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((tmp_36_reg_404 = ap_const_lv1_0)))) then 
                input_counter_1_reg_149 <= ap_const_lv11_0;
            elsif (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond8_fu_308_p2))) then 
                input_counter_1_reg_149 <= input_counter_3_fu_314_p2;
            end if; 
        end if;
    end process;

    -- input_counter_reg_160 assign process. --
    input_counter_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_34_reg_408)))) then 
                input_counter_reg_160 <= ap_const_lv11_0;
            elsif (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_reg_431))) then 
                input_counter_reg_160 <= input_counter_2_reg_435;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond_reg_431_pp1_it1 <= exitcond_reg_431;
                ap_reg_ppstg_exitcond_reg_431_pp1_it10 <= ap_reg_ppstg_exitcond_reg_431_pp1_it9;
                ap_reg_ppstg_exitcond_reg_431_pp1_it11 <= ap_reg_ppstg_exitcond_reg_431_pp1_it10;
                ap_reg_ppstg_exitcond_reg_431_pp1_it12 <= ap_reg_ppstg_exitcond_reg_431_pp1_it11;
                ap_reg_ppstg_exitcond_reg_431_pp1_it13 <= ap_reg_ppstg_exitcond_reg_431_pp1_it12;
                ap_reg_ppstg_exitcond_reg_431_pp1_it14 <= ap_reg_ppstg_exitcond_reg_431_pp1_it13;
                ap_reg_ppstg_exitcond_reg_431_pp1_it15 <= ap_reg_ppstg_exitcond_reg_431_pp1_it14;
                ap_reg_ppstg_exitcond_reg_431_pp1_it16 <= ap_reg_ppstg_exitcond_reg_431_pp1_it15;
                ap_reg_ppstg_exitcond_reg_431_pp1_it17 <= ap_reg_ppstg_exitcond_reg_431_pp1_it16;
                ap_reg_ppstg_exitcond_reg_431_pp1_it18 <= ap_reg_ppstg_exitcond_reg_431_pp1_it17;
                ap_reg_ppstg_exitcond_reg_431_pp1_it19 <= ap_reg_ppstg_exitcond_reg_431_pp1_it18;
                ap_reg_ppstg_exitcond_reg_431_pp1_it2 <= ap_reg_ppstg_exitcond_reg_431_pp1_it1;
                ap_reg_ppstg_exitcond_reg_431_pp1_it20 <= ap_reg_ppstg_exitcond_reg_431_pp1_it19;
                ap_reg_ppstg_exitcond_reg_431_pp1_it21 <= ap_reg_ppstg_exitcond_reg_431_pp1_it20;
                ap_reg_ppstg_exitcond_reg_431_pp1_it22 <= ap_reg_ppstg_exitcond_reg_431_pp1_it21;
                ap_reg_ppstg_exitcond_reg_431_pp1_it23 <= ap_reg_ppstg_exitcond_reg_431_pp1_it22;
                ap_reg_ppstg_exitcond_reg_431_pp1_it24 <= ap_reg_ppstg_exitcond_reg_431_pp1_it23;
                ap_reg_ppstg_exitcond_reg_431_pp1_it25 <= ap_reg_ppstg_exitcond_reg_431_pp1_it24;
                ap_reg_ppstg_exitcond_reg_431_pp1_it26 <= ap_reg_ppstg_exitcond_reg_431_pp1_it25;
                ap_reg_ppstg_exitcond_reg_431_pp1_it27 <= ap_reg_ppstg_exitcond_reg_431_pp1_it26;
                ap_reg_ppstg_exitcond_reg_431_pp1_it28 <= ap_reg_ppstg_exitcond_reg_431_pp1_it27;
                ap_reg_ppstg_exitcond_reg_431_pp1_it29 <= ap_reg_ppstg_exitcond_reg_431_pp1_it28;
                ap_reg_ppstg_exitcond_reg_431_pp1_it3 <= ap_reg_ppstg_exitcond_reg_431_pp1_it2;
                ap_reg_ppstg_exitcond_reg_431_pp1_it30 <= ap_reg_ppstg_exitcond_reg_431_pp1_it29;
                ap_reg_ppstg_exitcond_reg_431_pp1_it31 <= ap_reg_ppstg_exitcond_reg_431_pp1_it30;
                ap_reg_ppstg_exitcond_reg_431_pp1_it32 <= ap_reg_ppstg_exitcond_reg_431_pp1_it31;
                ap_reg_ppstg_exitcond_reg_431_pp1_it33 <= ap_reg_ppstg_exitcond_reg_431_pp1_it32;
                ap_reg_ppstg_exitcond_reg_431_pp1_it34 <= ap_reg_ppstg_exitcond_reg_431_pp1_it33;
                ap_reg_ppstg_exitcond_reg_431_pp1_it4 <= ap_reg_ppstg_exitcond_reg_431_pp1_it3;
                ap_reg_ppstg_exitcond_reg_431_pp1_it5 <= ap_reg_ppstg_exitcond_reg_431_pp1_it4;
                ap_reg_ppstg_exitcond_reg_431_pp1_it6 <= ap_reg_ppstg_exitcond_reg_431_pp1_it5;
                ap_reg_ppstg_exitcond_reg_431_pp1_it7 <= ap_reg_ppstg_exitcond_reg_431_pp1_it6;
                ap_reg_ppstg_exitcond_reg_431_pp1_it8 <= ap_reg_ppstg_exitcond_reg_431_pp1_it7;
                ap_reg_ppstg_exitcond_reg_431_pp1_it9 <= ap_reg_ppstg_exitcond_reg_431_pp1_it8;
                ap_reg_ppstg_input_counter_reg_160_pp1_it1 <= input_counter_reg_160;
                ap_reg_ppstg_input_counter_reg_160_pp1_it10 <= ap_reg_ppstg_input_counter_reg_160_pp1_it9;
                ap_reg_ppstg_input_counter_reg_160_pp1_it11 <= ap_reg_ppstg_input_counter_reg_160_pp1_it10;
                ap_reg_ppstg_input_counter_reg_160_pp1_it12 <= ap_reg_ppstg_input_counter_reg_160_pp1_it11;
                ap_reg_ppstg_input_counter_reg_160_pp1_it13 <= ap_reg_ppstg_input_counter_reg_160_pp1_it12;
                ap_reg_ppstg_input_counter_reg_160_pp1_it14 <= ap_reg_ppstg_input_counter_reg_160_pp1_it13;
                ap_reg_ppstg_input_counter_reg_160_pp1_it15 <= ap_reg_ppstg_input_counter_reg_160_pp1_it14;
                ap_reg_ppstg_input_counter_reg_160_pp1_it16 <= ap_reg_ppstg_input_counter_reg_160_pp1_it15;
                ap_reg_ppstg_input_counter_reg_160_pp1_it17 <= ap_reg_ppstg_input_counter_reg_160_pp1_it16;
                ap_reg_ppstg_input_counter_reg_160_pp1_it18 <= ap_reg_ppstg_input_counter_reg_160_pp1_it17;
                ap_reg_ppstg_input_counter_reg_160_pp1_it19 <= ap_reg_ppstg_input_counter_reg_160_pp1_it18;
                ap_reg_ppstg_input_counter_reg_160_pp1_it2 <= ap_reg_ppstg_input_counter_reg_160_pp1_it1;
                ap_reg_ppstg_input_counter_reg_160_pp1_it20 <= ap_reg_ppstg_input_counter_reg_160_pp1_it19;
                ap_reg_ppstg_input_counter_reg_160_pp1_it21 <= ap_reg_ppstg_input_counter_reg_160_pp1_it20;
                ap_reg_ppstg_input_counter_reg_160_pp1_it22 <= ap_reg_ppstg_input_counter_reg_160_pp1_it21;
                ap_reg_ppstg_input_counter_reg_160_pp1_it23 <= ap_reg_ppstg_input_counter_reg_160_pp1_it22;
                ap_reg_ppstg_input_counter_reg_160_pp1_it24 <= ap_reg_ppstg_input_counter_reg_160_pp1_it23;
                ap_reg_ppstg_input_counter_reg_160_pp1_it25 <= ap_reg_ppstg_input_counter_reg_160_pp1_it24;
                ap_reg_ppstg_input_counter_reg_160_pp1_it26 <= ap_reg_ppstg_input_counter_reg_160_pp1_it25;
                ap_reg_ppstg_input_counter_reg_160_pp1_it27 <= ap_reg_ppstg_input_counter_reg_160_pp1_it26;
                ap_reg_ppstg_input_counter_reg_160_pp1_it28 <= ap_reg_ppstg_input_counter_reg_160_pp1_it27;
                ap_reg_ppstg_input_counter_reg_160_pp1_it29 <= ap_reg_ppstg_input_counter_reg_160_pp1_it28;
                ap_reg_ppstg_input_counter_reg_160_pp1_it3 <= ap_reg_ppstg_input_counter_reg_160_pp1_it2;
                ap_reg_ppstg_input_counter_reg_160_pp1_it30 <= ap_reg_ppstg_input_counter_reg_160_pp1_it29;
                ap_reg_ppstg_input_counter_reg_160_pp1_it31 <= ap_reg_ppstg_input_counter_reg_160_pp1_it30;
                ap_reg_ppstg_input_counter_reg_160_pp1_it32 <= ap_reg_ppstg_input_counter_reg_160_pp1_it31;
                ap_reg_ppstg_input_counter_reg_160_pp1_it33 <= ap_reg_ppstg_input_counter_reg_160_pp1_it32;
                ap_reg_ppstg_input_counter_reg_160_pp1_it34 <= ap_reg_ppstg_input_counter_reg_160_pp1_it33;
                ap_reg_ppstg_input_counter_reg_160_pp1_it4 <= ap_reg_ppstg_input_counter_reg_160_pp1_it3;
                ap_reg_ppstg_input_counter_reg_160_pp1_it5 <= ap_reg_ppstg_input_counter_reg_160_pp1_it4;
                ap_reg_ppstg_input_counter_reg_160_pp1_it6 <= ap_reg_ppstg_input_counter_reg_160_pp1_it5;
                ap_reg_ppstg_input_counter_reg_160_pp1_it7 <= ap_reg_ppstg_input_counter_reg_160_pp1_it6;
                ap_reg_ppstg_input_counter_reg_160_pp1_it8 <= ap_reg_ppstg_input_counter_reg_160_pp1_it7;
                ap_reg_ppstg_input_counter_reg_160_pp1_it9 <= ap_reg_ppstg_input_counter_reg_160_pp1_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                exitcond8_reg_412 <= exitcond8_fu_308_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then
                exitcond_reg_431 <= exitcond_fu_325_p2;
                input_counter_2_reg_435 <= input_counter_2_fu_331_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                input_buffer_pointer_load_reg_388 <= input_buffer_pointer_i;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                tmp_32_reg_400 <= tmp_32_fu_201_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_32_fu_201_p2 = ap_const_lv1_0)))) then
                tmp_34_reg_408 <= tmp_34_fu_302_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_32_fu_201_p2 = ap_const_lv1_0))) then
                tmp_36_reg_404 <= tmp_36_fu_255_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond8_fu_308_p2))) then
                tmp_45_reg_421(0) <= tmp_45_fu_320_p1(0);
    tmp_45_reg_421(1) <= tmp_45_fu_320_p1(1);
    tmp_45_reg_421(2) <= tmp_45_fu_320_p1(2);
    tmp_45_reg_421(3) <= tmp_45_fu_320_p1(3);
    tmp_45_reg_421(4) <= tmp_45_fu_320_p1(4);
    tmp_45_reg_421(5) <= tmp_45_fu_320_p1(5);
    tmp_45_reg_421(6) <= tmp_45_fu_320_p1(6);
    tmp_45_reg_421(7) <= tmp_45_fu_320_p1(7);
    tmp_45_reg_421(8) <= tmp_45_fu_320_p1(8);
    tmp_45_reg_421(9) <= tmp_45_fu_320_p1(9);
    tmp_45_reg_421(10) <= tmp_45_fu_320_p1(10);
            end if;
        end if;
    end process;
    tmp_45_reg_421(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , ap_reg_ppiten_pp1_it0 , ap_reg_ppiten_pp1_it1 , ap_reg_ppiten_pp1_it34 , ap_reg_ppiten_pp1_it35 , tmp_32_fu_201_p2 , tmp_36_reg_404 , tmp_34_reg_408 , exitcond8_fu_308_p2 , ap_reg_ppiten_pp0_it0 , exitcond_fu_325_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((tmp_32_fu_201_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((tmp_36_reg_404 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st78_fsm_41;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                end if;
            when ap_ST_pp0_stg0_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond8_fu_308_p2))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_4;
                end if;
            when ap_ST_st6_fsm_4 => 
                ap_NS_fsm <= ap_ST_st78_fsm_41;
            when ap_ST_st7_fsm_5 => 
                if ((ap_const_lv1_0 = tmp_34_reg_408)) then
                    ap_NS_fsm <= ap_ST_st78_fsm_41;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                end if;
            when ap_ST_pp1_stg0_fsm_6 => 
                if ((not(((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it35) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it34)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_fu_325_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_fu_325_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st44_fsm_7;
                end if;
            when ap_ST_st44_fsm_7 => 
                ap_NS_fsm <= ap_ST_st45_fsm_8;
            when ap_ST_st45_fsm_8 => 
                ap_NS_fsm <= ap_ST_st46_fsm_9;
            when ap_ST_st46_fsm_9 => 
                ap_NS_fsm <= ap_ST_st47_fsm_10;
            when ap_ST_st47_fsm_10 => 
                ap_NS_fsm <= ap_ST_st48_fsm_11;
            when ap_ST_st48_fsm_11 => 
                ap_NS_fsm <= ap_ST_st49_fsm_12;
            when ap_ST_st49_fsm_12 => 
                ap_NS_fsm <= ap_ST_st50_fsm_13;
            when ap_ST_st50_fsm_13 => 
                ap_NS_fsm <= ap_ST_st51_fsm_14;
            when ap_ST_st51_fsm_14 => 
                ap_NS_fsm <= ap_ST_st52_fsm_15;
            when ap_ST_st52_fsm_15 => 
                ap_NS_fsm <= ap_ST_st53_fsm_16;
            when ap_ST_st53_fsm_16 => 
                ap_NS_fsm <= ap_ST_st54_fsm_17;
            when ap_ST_st54_fsm_17 => 
                ap_NS_fsm <= ap_ST_st55_fsm_18;
            when ap_ST_st55_fsm_18 => 
                ap_NS_fsm <= ap_ST_st56_fsm_19;
            when ap_ST_st56_fsm_19 => 
                ap_NS_fsm <= ap_ST_st57_fsm_20;
            when ap_ST_st57_fsm_20 => 
                ap_NS_fsm <= ap_ST_st58_fsm_21;
            when ap_ST_st58_fsm_21 => 
                ap_NS_fsm <= ap_ST_st59_fsm_22;
            when ap_ST_st59_fsm_22 => 
                ap_NS_fsm <= ap_ST_st60_fsm_23;
            when ap_ST_st60_fsm_23 => 
                ap_NS_fsm <= ap_ST_st61_fsm_24;
            when ap_ST_st61_fsm_24 => 
                ap_NS_fsm <= ap_ST_st62_fsm_25;
            when ap_ST_st62_fsm_25 => 
                ap_NS_fsm <= ap_ST_st63_fsm_26;
            when ap_ST_st63_fsm_26 => 
                ap_NS_fsm <= ap_ST_st64_fsm_27;
            when ap_ST_st64_fsm_27 => 
                ap_NS_fsm <= ap_ST_st65_fsm_28;
            when ap_ST_st65_fsm_28 => 
                ap_NS_fsm <= ap_ST_st66_fsm_29;
            when ap_ST_st66_fsm_29 => 
                ap_NS_fsm <= ap_ST_st67_fsm_30;
            when ap_ST_st67_fsm_30 => 
                ap_NS_fsm <= ap_ST_st68_fsm_31;
            when ap_ST_st68_fsm_31 => 
                ap_NS_fsm <= ap_ST_st69_fsm_32;
            when ap_ST_st69_fsm_32 => 
                ap_NS_fsm <= ap_ST_st70_fsm_33;
            when ap_ST_st70_fsm_33 => 
                ap_NS_fsm <= ap_ST_st71_fsm_34;
            when ap_ST_st71_fsm_34 => 
                ap_NS_fsm <= ap_ST_st72_fsm_35;
            when ap_ST_st72_fsm_35 => 
                ap_NS_fsm <= ap_ST_st73_fsm_36;
            when ap_ST_st73_fsm_36 => 
                ap_NS_fsm <= ap_ST_st74_fsm_37;
            when ap_ST_st74_fsm_37 => 
                ap_NS_fsm <= ap_ST_st75_fsm_38;
            when ap_ST_st75_fsm_38 => 
                ap_NS_fsm <= ap_ST_st76_fsm_39;
            when ap_ST_st76_fsm_39 => 
                ap_NS_fsm <= ap_ST_st77_fsm_40;
            when ap_ST_st77_fsm_40 => 
                ap_NS_fsm <= ap_ST_st78_fsm_41;
            when ap_ST_st78_fsm_41 => 
                ap_NS_fsm <= ap_ST_st79_fsm_42;
            when ap_ST_st79_fsm_42 => 
                ap_NS_fsm <= ap_ST_st80_fsm_43;
            when ap_ST_st80_fsm_43 => 
                ap_NS_fsm <= ap_ST_st81_fsm_44;
            when ap_ST_st81_fsm_44 => 
                ap_NS_fsm <= ap_ST_st82_fsm_45;
            when ap_ST_st82_fsm_45 => 
                ap_NS_fsm <= ap_ST_st83_fsm_46;
            when ap_ST_st83_fsm_46 => 
                ap_NS_fsm <= ap_ST_st84_fsm_47;
            when ap_ST_st84_fsm_47 => 
                ap_NS_fsm <= ap_ST_st85_fsm_48;
            when ap_ST_st85_fsm_48 => 
                ap_NS_fsm <= ap_ST_st86_fsm_49;
            when ap_ST_st86_fsm_49 => 
                ap_NS_fsm <= ap_ST_st87_fsm_50;
            when ap_ST_st87_fsm_50 => 
                ap_NS_fsm <= ap_ST_st88_fsm_51;
            when ap_ST_st88_fsm_51 => 
                ap_NS_fsm <= ap_ST_st89_fsm_52;
            when ap_ST_st89_fsm_52 => 
                ap_NS_fsm <= ap_ST_st90_fsm_53;
            when ap_ST_st90_fsm_53 => 
                ap_NS_fsm <= ap_ST_st91_fsm_54;
            when ap_ST_st91_fsm_54 => 
                ap_NS_fsm <= ap_ST_st92_fsm_55;
            when ap_ST_st92_fsm_55 => 
                ap_NS_fsm <= ap_ST_st93_fsm_56;
            when ap_ST_st93_fsm_56 => 
                ap_NS_fsm <= ap_ST_st94_fsm_57;
            when ap_ST_st94_fsm_57 => 
                ap_NS_fsm <= ap_ST_st95_fsm_58;
            when ap_ST_st95_fsm_58 => 
                ap_NS_fsm <= ap_ST_st96_fsm_59;
            when ap_ST_st96_fsm_59 => 
                ap_NS_fsm <= ap_ST_st97_fsm_60;
            when ap_ST_st97_fsm_60 => 
                ap_NS_fsm <= ap_ST_st98_fsm_61;
            when ap_ST_st98_fsm_61 => 
                ap_NS_fsm <= ap_ST_st99_fsm_62;
            when ap_ST_st99_fsm_62 => 
                ap_NS_fsm <= ap_ST_st100_fsm_63;
            when ap_ST_st100_fsm_63 => 
                ap_NS_fsm <= ap_ST_st101_fsm_64;
            when ap_ST_st101_fsm_64 => 
                ap_NS_fsm <= ap_ST_st102_fsm_65;
            when ap_ST_st102_fsm_65 => 
                ap_NS_fsm <= ap_ST_st103_fsm_66;
            when ap_ST_st103_fsm_66 => 
                ap_NS_fsm <= ap_ST_st104_fsm_67;
            when ap_ST_st104_fsm_67 => 
                ap_NS_fsm <= ap_ST_st105_fsm_68;
            when ap_ST_st105_fsm_68 => 
                ap_NS_fsm <= ap_ST_st106_fsm_69;
            when ap_ST_st106_fsm_69 => 
                ap_NS_fsm <= ap_ST_st107_fsm_70;
            when ap_ST_st107_fsm_70 => 
                ap_NS_fsm <= ap_ST_st108_fsm_71;
            when ap_ST_st108_fsm_71 => 
                ap_NS_fsm <= ap_ST_st109_fsm_72;
            when ap_ST_st109_fsm_72 => 
                ap_NS_fsm <= ap_ST_st110_fsm_73;
            when ap_ST_st110_fsm_73 => 
                ap_NS_fsm <= ap_ST_st111_fsm_74;
            when ap_ST_st111_fsm_74 => 
                ap_NS_fsm <= ap_ST_st112_fsm_75;
            when ap_ST_st112_fsm_75 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st112_fsm_75 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st112_fsm_75 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond8_fu_308_p2 <= "1" when (input_counter_1_reg_149 = ap_const_lv11_400) else "0";
    exitcond_fu_325_p2 <= "1" when (input_counter_phi_fu_164_p4 = ap_const_lv11_400) else "0";
    grp_fu_173_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(input_buffer_pointer_load_reg_388));
    grp_fu_178_p2 <= std_logic_vector(unsigned(base_input) + unsigned(ap_const_lv32_1));

    -- grp_fu_353_ce assign process. --
    grp_fu_353_ce_assign_proc : process(ap_CS_fsm, exitcond_fu_325_p2, exitcond_reg_431, ap_reg_ppstg_exitcond_reg_431_pp1_it1, ap_reg_ppstg_exitcond_reg_431_pp1_it2, ap_reg_ppstg_exitcond_reg_431_pp1_it3, ap_reg_ppstg_exitcond_reg_431_pp1_it4, ap_reg_ppstg_exitcond_reg_431_pp1_it5, ap_reg_ppstg_exitcond_reg_431_pp1_it6, ap_reg_ppstg_exitcond_reg_431_pp1_it7, ap_reg_ppstg_exitcond_reg_431_pp1_it8, ap_reg_ppstg_exitcond_reg_431_pp1_it9, ap_reg_ppstg_exitcond_reg_431_pp1_it10, ap_reg_ppstg_exitcond_reg_431_pp1_it11, ap_reg_ppstg_exitcond_reg_431_pp1_it12, ap_reg_ppstg_exitcond_reg_431_pp1_it13, ap_reg_ppstg_exitcond_reg_431_pp1_it14, ap_reg_ppstg_exitcond_reg_431_pp1_it15, ap_reg_ppstg_exitcond_reg_431_pp1_it16, ap_reg_ppstg_exitcond_reg_431_pp1_it17, ap_reg_ppstg_exitcond_reg_431_pp1_it18, ap_reg_ppstg_exitcond_reg_431_pp1_it19, ap_reg_ppstg_exitcond_reg_431_pp1_it20, ap_reg_ppstg_exitcond_reg_431_pp1_it21, ap_reg_ppstg_exitcond_reg_431_pp1_it22, ap_reg_ppstg_exitcond_reg_431_pp1_it23, ap_reg_ppstg_exitcond_reg_431_pp1_it24, ap_reg_ppstg_exitcond_reg_431_pp1_it25, ap_reg_ppstg_exitcond_reg_431_pp1_it26, ap_reg_ppstg_exitcond_reg_431_pp1_it27, ap_reg_ppstg_exitcond_reg_431_pp1_it28, ap_reg_ppstg_exitcond_reg_431_pp1_it29, ap_reg_ppstg_exitcond_reg_431_pp1_it30, ap_reg_ppstg_exitcond_reg_431_pp1_it31, ap_reg_ppstg_exitcond_reg_431_pp1_it32, ap_reg_ppstg_exitcond_reg_431_pp1_it33)
    begin
        if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and ((ap_const_lv1_0 = exitcond_fu_325_p2) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it33) or (ap_const_lv1_0 = exitcond_reg_431) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it2) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it3) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it4) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it5) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it6) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it7) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it8) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it9) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it10) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it11) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it12) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it13) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it14) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it15) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it16) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it17) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it18) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it19) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it20) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it21) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it22) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it23) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it24) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it25) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it26) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it27) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it28) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it29) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it30) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it31) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it32)))) then 
            grp_fu_353_ce <= ap_const_logic_1;
        else 
            grp_fu_353_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_353_p0 <= std_logic_vector(unsigned(tmp_124_fu_341_p2) + unsigned(input_counter_cast_fu_337_p1));
    grp_fu_353_p1 <= ap_const_lv32_500;
    grp_fu_369_ce <= ap_const_logic_1;
    grp_fu_369_p0 <= std_logic_vector(unsigned(base_input) + unsigned(ap_const_lv32_1));
    grp_fu_369_p1 <= ap_const_lv32_5;
    grp_fu_381_ce <= ap_const_logic_1;
    grp_fu_381_p0 <= std_logic_vector(unsigned(input_buffer_pointer_load_reg_388) + unsigned(ap_const_lv32_1));
    grp_fu_381_p1 <= ap_const_lv32_500;

    -- initialize_o assign process. --
    initialize_o_assign_proc : process(ap_start, ap_CS_fsm, initialize_i, tmp_s_fu_195_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_s_fu_195_p2)))) then 
            initialize_o <= ap_const_lv32_1;
        else 
            initialize_o <= initialize_i;
        end if; 
    end process;


    -- initialize_o_ap_vld assign process. --
    initialize_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm, tmp_s_fu_195_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_s_fu_195_p2)))) then 
            initialize_o_ap_vld <= ap_const_logic_1;
        else 
            initialize_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- input_array_V_address0 assign process. --
    input_array_V_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it35, ap_reg_ppiten_pp0_it1, tmp_45_reg_421, tmp_43_fu_364_p1)
    begin
        if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it35))) then 
            input_array_V_address0 <= tmp_43_fu_364_p1(10 - 1 downto 0);
        elsif (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            input_array_V_address0 <= tmp_45_reg_421(10 - 1 downto 0);
        else 
            input_array_V_address0 <= tmp_43_fu_364_p1(10 - 1 downto 0);
        end if; 
    end process;


    -- input_array_V_ce0 assign process. --
    input_array_V_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it35, exitcond8_reg_412, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_431_pp1_it34)
    begin
        if ((((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond8_reg_412)) or ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it35) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it34)))) then 
            input_array_V_ce0 <= ap_const_logic_1;
        else 
            input_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_array_V_d0 <= input_buffer_V_q0;

    -- input_array_V_we0 assign process. --
    input_array_V_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it35, exitcond8_reg_412, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_431_pp1_it34)
    begin
        if ((((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond8_reg_412)) or ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it35) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it34)))) then 
            input_array_V_we0 <= ap_const_logic_1;
        else 
            input_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- input_buffer_V_address0 assign process. --
    input_buffer_V_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it34, ap_reg_ppiten_pp0_it0, tmp_45_fu_320_p1, tmp_fu_190_p1, tmp_42_fu_359_p1)
    begin
        if ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            input_buffer_V_address0 <= tmp_fu_190_p1(11 - 1 downto 0);
        elsif (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it34))) then 
            input_buffer_V_address0 <= tmp_42_fu_359_p1(11 - 1 downto 0);
        elsif (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            input_buffer_V_address0 <= tmp_45_fu_320_p1(11 - 1 downto 0);
        else 
            input_buffer_V_address0 <= tmp_fu_190_p1(11 - 1 downto 0);
        end if; 
    end process;


    -- input_buffer_V_ce0 assign process. --
    input_buffer_V_ce0_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp1_it34, exitcond8_fu_308_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppstg_exitcond_reg_431_pp1_it33)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond8_fu_308_p2)) or ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it34) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_431_pp1_it33)))) then 
            input_buffer_V_ce0 <= ap_const_logic_1;
        else 
            input_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    input_V_temp <= signed(input_V);
    input_buffer_V_d0 <= std_logic_vector(resize(input_V_temp,32));


    -- input_buffer_V_we0 assign process. --
    input_buffer_V_we0_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))))) then 
            input_buffer_V_we0 <= ap_const_logic_1;
        else 
            input_buffer_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_pointer_o <= grp_fu_381_p2;

    -- input_buffer_pointer_o_ap_vld assign process. --
    input_buffer_pointer_o_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st112_fsm_75 = ap_CS_fsm)) then 
            input_buffer_pointer_o_ap_vld <= ap_const_logic_1;
        else 
            input_buffer_pointer_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    input_counter_2_fu_331_p2 <= std_logic_vector(unsigned(input_counter_phi_fu_164_p4) + unsigned(ap_const_lv11_1));
    input_counter_3_fu_314_p2 <= std_logic_vector(unsigned(input_counter_1_reg_149) + unsigned(ap_const_lv11_1));
    input_counter_cast_fu_337_p1 <= std_logic_vector(resize(unsigned(input_counter_phi_fu_164_p4),32));

    -- input_counter_phi_fu_164_p4 assign process. --
    input_counter_phi_fu_164_p4_assign_proc : process(ap_CS_fsm, input_counter_reg_160, ap_reg_ppiten_pp1_it1, exitcond_reg_431, input_counter_2_reg_435)
    begin
        if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_reg_431))) then 
            input_counter_phi_fu_164_p4 <= input_counter_2_reg_435;
        else 
            input_counter_phi_fu_164_p4 <= input_counter_reg_160;
        end if; 
    end process;

    p_and_f4_fu_217_p3 <= (ap_const_lv22_0 & tmp_121_fu_214_p1);
    p_and_f_fu_264_p3 <= (ap_const_lv24_0 & tmp_118_fu_261_p1);
    p_and_t6_fu_229_p3 <= (ap_const_lv22_0 & tmp_122_fu_225_p1);
    p_and_t_fu_276_p3 <= (ap_const_lv24_0 & tmp_119_fu_272_p1);
    p_neg_t7_fu_237_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t6_fu_229_p3));
    p_neg_t_fu_284_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t_fu_276_p3));
    tmp_117_fu_207_p3 <= input_buffer_pointer_load_reg_388(31 downto 31);
    tmp_118_fu_261_p1 <= input_buffer_pointer_load_reg_388(8 - 1 downto 0);
    tmp_119_fu_272_p1 <= grp_fu_173_p2(8 - 1 downto 0);
    tmp_120_fu_298_p1 <= tmp_33_fu_290_p3(9 - 1 downto 0);
    tmp_121_fu_214_p1 <= input_buffer_pointer_load_reg_388(10 - 1 downto 0);
    tmp_122_fu_225_p1 <= grp_fu_173_p2(10 - 1 downto 0);
    tmp_123_fu_251_p1 <= tmp_35_fu_243_p3(11 - 1 downto 0);
    tmp_124_fu_341_p2 <= std_logic_vector(shift_left(unsigned(base_input),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    tmp_32_fu_201_p2 <= "1" when (initialize_i = ap_const_lv32_1) else "0";
    tmp_33_fu_290_p3 <= 
        p_neg_t_fu_284_p2 when (tmp_117_fu_207_p3(0) = '1') else 
        p_and_f_fu_264_p3;
    tmp_34_fu_302_p2 <= "1" when (tmp_120_fu_298_p1 = ap_const_lv9_FF) else "0";
    tmp_35_fu_243_p3 <= 
        p_neg_t7_fu_237_p2 when (tmp_117_fu_207_p3(0) = '1') else 
        p_and_f4_fu_217_p3;
    tmp_36_fu_255_p2 <= "1" when (tmp_123_fu_251_p1 = ap_const_lv11_3FF) else "0";
    
    grp_fu_353_p2_temp <= signed(grp_fu_353_p2);
    tmp_42_fu_359_p1 <= std_logic_vector(resize(grp_fu_353_p2_temp,64));

    tmp_43_fu_364_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_input_counter_reg_160_pp1_it34),64));
    tmp_45_fu_320_p1 <= std_logic_vector(resize(unsigned(input_counter_1_reg_149),64));
    
    input_buffer_pointer_i_temp <= signed(input_buffer_pointer_i);
    tmp_fu_190_p1 <= std_logic_vector(resize(input_buffer_pointer_i_temp,64));

    tmp_s_fu_195_p2 <= "1" when (input_buffer_pointer_i = ap_const_lv32_400) else "0";
end behav;
