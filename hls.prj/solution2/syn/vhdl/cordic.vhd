-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    theta_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cordic is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9B74E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010011011011101001110";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_100000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_const_lv7_41 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal cordic_ctab_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_ctab_V_ce0 : STD_LOGIC;
    signal cordic_ctab_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal step_fu_128_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal step_reg_246 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_251 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_2_fu_184_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_V_2_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_2_fu_192_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_2_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_angle_V_fu_216_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_reg_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal step_1_reg_80 : STD_LOGIC_VECTOR (6 downto 0);
    signal UnifiedRetVal1_reg_91 : STD_LOGIC_VECTOR (31 downto 0);
    signal UnifiedRetVal_1_reg_103 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sh_assign_3_cast_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_1_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_1_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_cast_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_s_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component cal_mag_phase_cordic_ctab_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    cordic_ctab_V_U : component cal_mag_phase_cordic_ctab_V
    generic map (
        DataWidth => 20,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_ctab_V_address0,
        ce0 => cordic_ctab_V_ce0,
        q0 => cordic_ctab_V_q0);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_0_preg assign process. --
    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                    ap_return_0_preg <= UnifiedRetVal1_reg_91;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_1_preg assign process. --
    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                    ap_return_1_preg <= UnifiedRetVal_1_reg_103;
                end if; 
            end if;
        end if;
    end process;


    -- UnifiedRetVal1_reg_91 assign process. --
    UnifiedRetVal1_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_122_p2 = ap_const_lv1_0)))) then 
                UnifiedRetVal1_reg_91 <= p_Val2_3_reg_68;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_116_p2)))) then 
                UnifiedRetVal1_reg_91 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- UnifiedRetVal_1_reg_103 assign process. --
    UnifiedRetVal_1_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_122_p2 = ap_const_lv1_0)))) then 
                UnifiedRetVal_1_reg_103 <= p_Val2_s_reg_44;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_116_p2)))) then 
                UnifiedRetVal_1_reg_103 <= ap_const_lv32_100000;
            end if; 
        end if;
    end process;

    -- p_Val2_3_reg_68 assign process. --
    p_Val2_3_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_116_p2))) then 
                p_Val2_3_reg_68 <= ap_const_lv32_0;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                p_Val2_3_reg_68 <= y_V_2_reg_266;
            end if; 
        end if;
    end process;

    -- p_Val2_4_reg_56 assign process. --
    p_Val2_4_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_116_p2))) then 
                p_Val2_4_reg_56 <= ap_const_lv32_0;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                p_Val2_4_reg_56 <= current_angle_V_fu_216_p3;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_44 assign process. --
    p_Val2_s_reg_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_116_p2))) then 
                p_Val2_s_reg_44 <= ap_const_lv32_9B74E;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                p_Val2_s_reg_44 <= x_V_2_reg_261;
            end if; 
        end if;
    end process;

    -- step_1_reg_80 assign process. --
    step_1_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_116_p2))) then 
                step_1_reg_80 <= ap_const_lv7_0;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                step_1_reg_80 <= step_reg_246;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                step_reg_246 <= step_fu_128_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_122_p2 = ap_const_lv1_0))) then
                tmp_s_reg_251 <= tmp_s_fu_134_p2;
                x_V_2_reg_261 <= x_V_2_fu_184_p3;
                y_V_2_reg_266 <= y_V_2_fu_192_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond1_fu_122_p2 , tmp_fu_116_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_116_p2)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                elsif ((not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_116_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_122_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return_0 assign process. --
    ap_return_0_assign_proc : process(ap_CS_fsm, UnifiedRetVal1_reg_91, ap_return_0_preg)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ap_return_0 <= UnifiedRetVal1_reg_91;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    -- ap_return_1 assign process. --
    ap_return_1_assign_proc : process(ap_CS_fsm, UnifiedRetVal_1_reg_103, ap_return_1_preg)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ap_return_1 <= UnifiedRetVal_1_reg_103;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    cordic_ctab_V_address0 <= tmp_1_fu_167_p1(6 - 1 downto 0);

    -- cordic_ctab_V_ce0 assign process. --
    cordic_ctab_V_ce0_assign_proc : process(ap_CS_fsm, exitcond1_fu_122_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_122_p2 = ap_const_lv1_0))) then 
            cordic_ctab_V_ce0 <= ap_const_logic_1;
        else 
            cordic_ctab_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    current_angle_V_fu_216_p3 <= 
        r_V_s_fu_204_p2 when (tmp_s_reg_251(0) = '1') else 
        r_V_3_fu_210_p2;
    exitcond1_fu_122_p2 <= "1" when (step_1_reg_80 = ap_const_lv7_41) else "0";
    p_Val2_15_cast_fu_200_p1 <= std_logic_vector(resize(unsigned(cordic_ctab_V_q0),32));
    r_V_1_fu_155_p2 <= std_logic_vector(shift_right(signed(p_Val2_s_reg_44),to_integer(unsigned('0' & sh_assign_3_cast_fu_139_p1(31-1 downto 0)))));
    r_V_3_fu_210_p2 <= std_logic_vector(unsigned(p_Val2_4_reg_56) - unsigned(p_Val2_15_cast_fu_200_p1));
    r_V_fu_143_p2 <= std_logic_vector(shift_right(signed(p_Val2_3_reg_68),to_integer(unsigned('0' & sh_assign_3_cast_fu_139_p1(31-1 downto 0)))));
    r_V_s_fu_204_p2 <= std_logic_vector(unsigned(p_Val2_15_cast_fu_200_p1) + unsigned(p_Val2_4_reg_56));
    sh_assign_3_cast_fu_139_p1 <= std_logic_vector(resize(unsigned(step_1_reg_80),32));
    step_fu_128_p2 <= std_logic_vector(unsigned(step_1_reg_80) + unsigned(ap_const_lv7_1));
    t_V_1_fu_172_p2 <= std_logic_vector(unsigned(r_V_fu_143_p2) + unsigned(p_Val2_s_reg_44));
    t_V_fu_149_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_44) - unsigned(r_V_fu_143_p2));
    tmp_1_fu_167_p1 <= std_logic_vector(resize(unsigned(step_1_reg_80),64));
    tmp_fu_116_p2 <= "1" when (theta_V = ap_const_lv32_0) else "0";
    tmp_s_fu_134_p2 <= "1" when (signed(p_Val2_4_reg_56) < signed(theta_V)) else "0";
    x_V_2_fu_184_p3 <= 
        t_V_fu_149_p2 when (tmp_s_fu_134_p2(0) = '1') else 
        t_V_1_fu_172_p2;
    y_V_1_fu_178_p2 <= std_logic_vector(unsigned(p_Val2_3_reg_68) - unsigned(r_V_1_fu_155_p2));
    y_V_2_fu_192_p3 <= 
        y_V_fu_161_p2 when (tmp_s_fu_134_p2(0) = '1') else 
        y_V_1_fu_178_p2;
    y_V_fu_161_p2 <= std_logic_vector(unsigned(p_Val2_3_reg_68) + unsigned(r_V_1_fu_155_p2));
end behav;
