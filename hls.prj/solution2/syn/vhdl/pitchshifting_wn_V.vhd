-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pitchshifting_wn_V_rom is 
    generic(
             dwidth     : integer := 6; 
             awidth     : integer := 10; 
             mem_size    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pitchshifting_wn_V_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 40=> "000000", 41 to 57=> "000001", 58 to 70=> "000010", 71 to 81=> "000011", 82 to 91=> "000100", 
    92 to 100=> "000101", 101 to 109=> "000110", 110 to 117=> "000111", 118 to 124=> "001000", 125 to 131=> "001001", 
    132 to 138=> "001010", 139 to 145=> "001011", 146 to 151=> "001100", 152 to 158=> "001101", 159 to 164=> "001110", 
    165 to 170=> "001111", 171 to 175=> "010000", 176 to 181=> "010001", 182 to 187=> "010010", 188 to 192=> "010011", 
    193 to 198=> "010100", 199 to 203=> "010101", 204 to 209=> "010110", 210 to 214=> "010111", 215 to 219=> "011000", 
    220 to 224=> "011001", 225 to 229=> "011010", 230 to 235=> "011011", 236 to 240=> "011100", 241 to 245=> "011101", 
    246 to 250=> "011110", 251 to 255=> "011111", 256 to 260=> "100000", 261 to 265=> "100001", 266 to 270=> "100010", 
    271 to 275=> "100011", 276 to 281=> "100100", 282 to 286=> "100101", 287 to 291=> "100110", 292 to 296=> "100111", 
    297 to 301=> "101000", 302 to 307=> "101001", 308 to 312=> "101010", 313 to 318=> "101011", 319 to 323=> "101100", 
    324 to 329=> "101101", 330 to 335=> "101110", 336 to 340=> "101111", 341 to 346=> "110000", 347 to 352=> "110001", 
    353 to 359=> "110010", 360 to 365=> "110011", 366 to 372=> "110100", 373 to 379=> "110101", 380 to 386=> "110110", 
    387 to 393=> "110111", 394 to 401=> "111000", 402 to 410=> "111001", 411 to 419=> "111010", 420 to 429=> "111011", 
    430 to 440=> "111100", 441 to 453=> "111101", 454 to 470=> "111110", 471 to 552=> "111111", 553 to 569=> "111110", 
    570 to 582=> "111101", 583 to 593=> "111100", 594 to 603=> "111011", 604 to 612=> "111010", 613 to 621=> "111001", 
    622 to 629=> "111000", 630 to 636=> "110111", 637 to 643=> "110110", 644 to 650=> "110101", 651 to 657=> "110100", 
    658 to 663=> "110011", 664 to 670=> "110010", 671 to 676=> "110001", 677 to 682=> "110000", 683 to 687=> "101111", 
    688 to 693=> "101110", 694 to 699=> "101101", 700 to 704=> "101100", 705 to 710=> "101011", 711 to 715=> "101010", 
    716 to 721=> "101001", 722 to 726=> "101000", 727 to 731=> "100111", 732 to 736=> "100110", 737 to 741=> "100101", 
    742 to 747=> "100100", 748 to 752=> "100011", 753 to 757=> "100010", 758 to 762=> "100001", 763 to 767=> "100000", 
    768 to 772=> "011111", 773 to 777=> "011110", 778 to 782=> "011101", 783 to 787=> "011100", 788 to 793=> "011011", 
    794 to 798=> "011010", 799 to 803=> "011001", 804 to 808=> "011000", 809 to 813=> "010111", 814 to 819=> "010110", 
    820 to 824=> "010101", 825 to 830=> "010100", 831 to 835=> "010011", 836 to 841=> "010010", 842 to 847=> "010001", 
    848 to 852=> "010000", 853 to 858=> "001111", 859 to 864=> "001110", 865 to 871=> "001101", 872 to 877=> "001100", 
    878 to 884=> "001011", 885 to 891=> "001010", 892 to 898=> "001001", 899 to 905=> "001000", 906 to 913=> "000111", 
    914 to 922=> "000110", 923 to 931=> "000101", 932 to 941=> "000100", 942 to 952=> "000011", 953 to 965=> "000010", 
    966 to 982=> "000001", 983 to 1023=> "000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity pitchshifting_wn_V is
    generic (
        DataWidth : INTEGER := 6;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pitchshifting_wn_V is
    component pitchshifting_wn_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;




begin
    pitchshifting_wn_V_rom_U :  component pitchshifting_wn_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


