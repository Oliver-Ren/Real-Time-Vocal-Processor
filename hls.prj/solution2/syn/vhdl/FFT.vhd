-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xreal_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    xreal_V_ce0 : OUT STD_LOGIC;
    xreal_V_we0 : OUT STD_LOGIC;
    xreal_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xreal_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xreal_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    xreal_V_ce1 : OUT STD_LOGIC;
    xreal_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ximag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ximag_V_ce0 : OUT STD_LOGIC;
    ximag_V_we0 : OUT STD_LOGIC;
    ximag_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ximag_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ximag_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ximag_V_ce1 : OUT STD_LOGIC;
    ximag_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_100000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv45_1FFFFFFFE703 : STD_LOGIC_VECTOR (44 downto 0) := "111111111111111111111111111111110011100000011";
    constant ap_const_lv52_FFFEC : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000011111111111111101100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal j_fu_242_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_617 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_reg_656 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_25_reg_661 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_27_reg_666 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_28_reg_671 : STD_LOGIC_VECTOR (44 downto 0);
    signal indvar_next2_fu_349_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_next2_reg_679 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_reg_684 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond4_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_402_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax2_fu_420_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax2_reg_694 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_next_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_next_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_fu_481_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_5_reg_721 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond3_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ximag_V_addr_reg_731 : STD_LOGIC_VECTOR (9 downto 0);
    signal xreal_V_addr_reg_736 : STD_LOGIC_VECTOR (9 downto 0);
    signal xreal_V_addr_3_reg_741 : STD_LOGIC_VECTOR (9 downto 0);
    signal ximag_V_addr_3_reg_746 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_523_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal ximag_V_q0_temp: signed (32-1 downto 0);
    signal tmp_23_fu_527_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal wimag_V_q0_temp: signed (32-1 downto 0);
    signal tmp_24_fu_531_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xreal_V_q0_temp: signed (32-1 downto 0);
    signal tmp_25_fu_535_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal wreal_V_q0_temp: signed (32-1 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal lhs_V_3_cast_reg_785 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_545_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal rhs_V_3_cast_reg_790 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_551_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal lhs_V_4_cast_reg_795 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal rhs_V_4_cast_reg_800 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_22_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_22_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_23_fu_611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_23_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal wreal_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal wreal_V_ce0 : STD_LOGIC;
    signal wreal_V_we0 : STD_LOGIC;
    signal wreal_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wreal_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wimag_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal wimag_V_ce0 : STD_LOGIC;
    signal wimag_V_we0 : STD_LOGIC;
    signal wimag_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wimag_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_234_ap_start : STD_LOGIC;
    signal grp_bitrp_fu_234_ap_done : STD_LOGIC;
    signal grp_bitrp_fu_234_ap_idle : STD_LOGIC;
    signal grp_bitrp_fu_234_ap_ready : STD_LOGIC;
    signal grp_bitrp_fu_234_xreal_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bitrp_fu_234_xreal_V_ce0 : STD_LOGIC;
    signal grp_bitrp_fu_234_xreal_V_we0 : STD_LOGIC;
    signal grp_bitrp_fu_234_xreal_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_234_xreal_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_234_xreal_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bitrp_fu_234_xreal_V_ce1 : STD_LOGIC;
    signal grp_bitrp_fu_234_xreal_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_234_ximag_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bitrp_fu_234_ximag_V_ce0 : STD_LOGIC;
    signal grp_bitrp_fu_234_ximag_V_we0 : STD_LOGIC;
    signal grp_bitrp_fu_234_ximag_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_234_ximag_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitrp_fu_234_ximag_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bitrp_fu_234_ximag_V_ce1 : STD_LOGIC;
    signal grp_bitrp_fu_234_ximag_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar3_reg_176 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar4_reg_187 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_222 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_bitrp_fu_234_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index2_fu_471_p2_temp: signed (32-1 downto 0);
    signal tmp_26_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index1_fu_466_p2_temp: signed (32-1 downto 0);
    signal tmp_21_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_499_p2_temp: signed (32-1 downto 0);
    signal r_V_21_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_s_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_282_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_288_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_288_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_26_fu_303_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_reg_656_temp: signed (45-1 downto 0);
    signal r_V_26_fu_303_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_29_fu_327_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_28_reg_671_temp: signed (45-1 downto 0);
    signal r_V_29_fu_327_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_neg_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_388_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_33_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_410_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_428_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tr_fu_440_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal j_1_cast_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index1_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_487_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_499_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index2_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_539_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_545_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_551_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_557_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_30_fu_563_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_31_fu_577_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal treal_V_fu_567_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal timag_V_fu_581_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_ce : STD_LOGIC;
    signal grp_fu_282_ce : STD_LOGIC;
    signal grp_fu_288_ce : STD_LOGIC;
    signal grp_fu_294_ce : STD_LOGIC;
    signal grp_fu_428_ce : STD_LOGIC;
    signal grp_fu_499_ce : STD_LOGIC;
    signal grp_fu_539_ce : STD_LOGIC;
    signal grp_fu_545_ce : STD_LOGIC;
    signal grp_fu_551_ce : STD_LOGIC;
    signal grp_fu_557_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component bitrp IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xreal_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        xreal_V_ce0 : OUT STD_LOGIC;
        xreal_V_we0 : OUT STD_LOGIC;
        xreal_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        xreal_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        xreal_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        xreal_V_ce1 : OUT STD_LOGIC;
        xreal_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ximag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ximag_V_ce0 : OUT STD_LOGIC;
        ximag_V_we0 : OUT STD_LOGIC;
        ximag_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ximag_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ximag_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ximag_V_ce1 : OUT STD_LOGIC;
        ximag_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combine_mul_32s_14s_45_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component combine_mul_32s_20ns_52_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component combine_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combine_sdiv_32ns_32s_32_35 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combine_mul_32s_32s_52_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component FFT_wreal_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    wreal_V_U : component FFT_wreal_V
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wreal_V_address0,
        ce0 => wreal_V_ce0,
        we0 => wreal_V_we0,
        d0 => wreal_V_d0,
        q0 => wreal_V_q0);

    wimag_V_U : component FFT_wreal_V
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wimag_V_address0,
        ce0 => wimag_V_ce0,
        we0 => wimag_V_we0,
        d0 => wimag_V_d0,
        q0 => wimag_V_q0);

    grp_bitrp_fu_234 : component bitrp
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bitrp_fu_234_ap_start,
        ap_done => grp_bitrp_fu_234_ap_done,
        ap_idle => grp_bitrp_fu_234_ap_idle,
        ap_ready => grp_bitrp_fu_234_ap_ready,
        xreal_V_address0 => grp_bitrp_fu_234_xreal_V_address0,
        xreal_V_ce0 => grp_bitrp_fu_234_xreal_V_ce0,
        xreal_V_we0 => grp_bitrp_fu_234_xreal_V_we0,
        xreal_V_d0 => grp_bitrp_fu_234_xreal_V_d0,
        xreal_V_q0 => grp_bitrp_fu_234_xreal_V_q0,
        xreal_V_address1 => grp_bitrp_fu_234_xreal_V_address1,
        xreal_V_ce1 => grp_bitrp_fu_234_xreal_V_ce1,
        xreal_V_q1 => grp_bitrp_fu_234_xreal_V_q1,
        ximag_V_address0 => grp_bitrp_fu_234_ximag_V_address0,
        ximag_V_ce0 => grp_bitrp_fu_234_ximag_V_ce0,
        ximag_V_we0 => grp_bitrp_fu_234_ximag_V_we0,
        ximag_V_d0 => grp_bitrp_fu_234_ximag_V_d0,
        ximag_V_q0 => grp_bitrp_fu_234_ximag_V_q0,
        ximag_V_address1 => grp_bitrp_fu_234_ximag_V_address1,
        ximag_V_ce1 => grp_bitrp_fu_234_ximag_V_ce1,
        ximag_V_q1 => grp_bitrp_fu_234_ximag_V_q1);

    combine_mul_32s_14s_45_3_U3 : component combine_mul_32s_14s_45_3
    generic map (
        ID => 3,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 14,
        dout_WIDTH => 45)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_268_p0,
        din1 => grp_fu_268_p1,
        ce => grp_fu_268_ce,
        dout => grp_fu_268_p2);

    combine_mul_32s_20ns_52_3_U4 : component combine_mul_32s_20ns_52_3
    generic map (
        ID => 4,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 20,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_282_p0,
        din1 => grp_fu_282_p1,
        ce => grp_fu_282_ce,
        dout => grp_fu_282_p2);

    combine_mul_32s_20ns_52_3_U5 : component combine_mul_32s_20ns_52_3
    generic map (
        ID => 5,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 20,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_288_p0,
        din1 => grp_fu_288_p1,
        ce => grp_fu_288_ce,
        dout => grp_fu_288_p2);

    combine_mul_32s_14s_45_3_U6 : component combine_mul_32s_14s_45_3
    generic map (
        ID => 6,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 14,
        dout_WIDTH => 45)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_294_p0,
        din1 => grp_fu_294_p1,
        ce => grp_fu_294_ce,
        dout => grp_fu_294_p2);

    combine_mul_32s_32s_32_6_U7 : component combine_mul_32s_32s_32_6
    generic map (
        ID => 7,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_428_p0,
        din1 => grp_fu_428_p1,
        ce => grp_fu_428_ce,
        dout => grp_fu_428_p2);

    combine_sdiv_32ns_32s_32_35_U8 : component combine_sdiv_32ns_32s_32_35
    generic map (
        ID => 8,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_499_p0,
        din1 => grp_fu_499_p1,
        ce => grp_fu_499_ce,
        dout => grp_fu_499_p2);

    combine_mul_32s_32s_52_6_U9 : component combine_mul_32s_32s_52_6
    generic map (
        ID => 9,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_539_p0,
        din1 => grp_fu_539_p1,
        ce => grp_fu_539_ce,
        dout => grp_fu_539_p2);

    combine_mul_32s_32s_52_6_U10 : component combine_mul_32s_32s_52_6
    generic map (
        ID => 10,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_545_p0,
        din1 => grp_fu_545_p1,
        ce => grp_fu_545_ce,
        dout => grp_fu_545_p2);

    combine_mul_32s_32s_52_6_U11 : component combine_mul_32s_32s_52_6
    generic map (
        ID => 11,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_551_p0,
        din1 => grp_fu_551_p1,
        ce => grp_fu_551_ce,
        dout => grp_fu_551_p2);

    combine_mul_32s_32s_52_6_U12 : component combine_mul_32s_32s_52_6
    generic map (
        ID => 12,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_557_p0,
        din1 => grp_fu_557_p1,
        ce => grp_fu_557_ce,
        dout => grp_fu_557_p2);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_bitrp_fu_234_ap_start_ap_start_reg assign process. --
    grp_bitrp_fu_234_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bitrp_fu_234_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    grp_bitrp_fu_234_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_bitrp_fu_234_ap_ready)) then 
                    grp_bitrp_fu_234_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar3_reg_176 assign process. --
    indvar3_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_234_ap_done)))) then 
                indvar3_reg_176 <= ap_const_lv9_0;
            elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                indvar3_reg_176 <= j_reg_617;
            end if; 
        end if;
    end process;

    -- indvar4_reg_187 assign process. --
    indvar4_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond5_fu_248_p2 = ap_const_lv1_0)))) then 
                indvar4_reg_187 <= ap_const_lv4_0;
            elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = icmp_reg_709))) then 
                indvar4_reg_187 <= indvar_next2_reg_679;
            end if; 
        end if;
    end process;

    -- indvar_reg_210 assign process. --
    indvar_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond3_fu_476_p2)))) then 
                indvar_reg_210 <= indvar_next_reg_699;
            elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                indvar_reg_210 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_222 assign process. --
    j_1_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = icmp_reg_709)))) then 
                j_1_reg_222 <= ap_const_lv31_0;
            elsif ((ap_ST_st59_fsm_58 = ap_CS_fsm)) then 
                j_1_reg_222 <= j_5_reg_721;
            end if; 
        end if;
    end process;

    -- m_reg_198 assign process. --
    m_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond5_fu_248_p2 = ap_const_lv1_0)))) then 
                m_reg_198(1) <= '1';
                m_reg_198(2) <= '0';
                m_reg_198(3) <= '0';
                m_reg_198(4) <= '0';
                m_reg_198(5) <= '0';
                m_reg_198(6) <= '0';
                m_reg_198(7) <= '0';
                m_reg_198(8) <= '0';
                m_reg_198(9) <= '0';
                m_reg_198(10) <= '0';
                m_reg_198(11) <= '0';
                m_reg_198(12) <= '0';
                m_reg_198(13) <= '0';
                m_reg_198(14) <= '0';
                m_reg_198(15) <= '0';
                m_reg_198(16) <= '0';
                m_reg_198(17) <= '0';
                m_reg_198(18) <= '0';
                m_reg_198(19) <= '0';
                m_reg_198(20) <= '0';
                m_reg_198(21) <= '0';
                m_reg_198(22) <= '0';
                m_reg_198(23) <= '0';
                m_reg_198(24) <= '0';
                m_reg_198(25) <= '0';
                m_reg_198(26) <= '0';
                m_reg_198(27) <= '0';
                m_reg_198(28) <= '0';
                m_reg_198(29) <= '0';
                m_reg_198(30) <= '0';
                m_reg_198(31) <= '0';
            elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = icmp_reg_709))) then 
                m_reg_198(1) <= m_2_fu_456_p2(1);
                m_reg_198(2) <= m_2_fu_456_p2(2);
                m_reg_198(3) <= m_2_fu_456_p2(3);
                m_reg_198(4) <= m_2_fu_456_p2(4);
                m_reg_198(5) <= m_2_fu_456_p2(5);
                m_reg_198(6) <= m_2_fu_456_p2(6);
                m_reg_198(7) <= m_2_fu_456_p2(7);
                m_reg_198(8) <= m_2_fu_456_p2(8);
                m_reg_198(9) <= m_2_fu_456_p2(9);
                m_reg_198(10) <= m_2_fu_456_p2(10);
                m_reg_198(11) <= m_2_fu_456_p2(11);
                m_reg_198(12) <= m_2_fu_456_p2(12);
                m_reg_198(13) <= m_2_fu_456_p2(13);
                m_reg_198(14) <= m_2_fu_456_p2(14);
                m_reg_198(15) <= m_2_fu_456_p2(15);
                m_reg_198(16) <= m_2_fu_456_p2(16);
                m_reg_198(17) <= m_2_fu_456_p2(17);
                m_reg_198(18) <= m_2_fu_456_p2(18);
                m_reg_198(19) <= m_2_fu_456_p2(19);
                m_reg_198(20) <= m_2_fu_456_p2(20);
                m_reg_198(21) <= m_2_fu_456_p2(21);
                m_reg_198(22) <= m_2_fu_456_p2(22);
                m_reg_198(23) <= m_2_fu_456_p2(23);
                m_reg_198(24) <= m_2_fu_456_p2(24);
                m_reg_198(25) <= m_2_fu_456_p2(25);
                m_reg_198(26) <= m_2_fu_456_p2(26);
                m_reg_198(27) <= m_2_fu_456_p2(27);
                m_reg_198(28) <= m_2_fu_456_p2(28);
                m_reg_198(29) <= m_2_fu_456_p2(29);
                m_reg_198(30) <= m_2_fu_456_p2(30);
                m_reg_198(31) <= m_2_fu_456_p2(31);
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then
                icmp_reg_709 <= icmp_fu_450_p2;
                k_reg_704 <= grp_fu_428_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                indvar_next2_reg_679 <= indvar_next2_fu_349_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then
                indvar_next_reg_699 <= indvar_next_fu_434_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then
                j_5_reg_721 <= j_5_fu_481_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                j_reg_617 <= j_fu_242_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st57_fsm_56 = ap_CS_fsm)) then
                lhs_V_3_cast_reg_785 <= grp_fu_539_p2;
                lhs_V_4_cast_reg_795 <= grp_fu_551_p2;
                rhs_V_3_cast_reg_790 <= grp_fu_545_p2;
                rhs_V_4_cast_reg_800 <= grp_fu_557_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_343_p2))) then
                p_lshr_reg_684 <= p_neg_fu_355_p2(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st58_fsm_57 = ap_CS_fsm)) then
                r_V_22_reg_805 <= r_V_22_fu_605_p2;
                r_V_23_reg_810 <= r_V_23_fu_611_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                r_V_25_reg_661 <= grp_fu_282_p2;
                r_V_27_reg_666 <= grp_fu_288_p2;
                r_V_28_reg_671 <= grp_fu_294_p2;
                r_V_reg_656 <= grp_fu_268_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                smax2_reg_694 <= smax2_fu_420_p3;
                tmp_18_reg_689 <= tmp_18_fu_402_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_fu_476_p2))) then
                ximag_V_addr_3_reg_746 <= tmp_26_fu_511_p1(10 - 1 downto 0);
                ximag_V_addr_reg_731 <= tmp_20_fu_505_p1(10 - 1 downto 0);
                xreal_V_addr_3_reg_741 <= tmp_26_fu_511_p1(10 - 1 downto 0);
                xreal_V_addr_reg_736 <= tmp_20_fu_505_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    m_reg_198(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond5_fu_248_p2 , exitcond4_fu_343_p2 , icmp_reg_709 , exitcond3_fu_476_p2 , grp_bitrp_fu_234_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_bitrp_fu_234_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond5_fu_248_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_343_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if ((ap_const_lv1_0 = icmp_reg_709)) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st17_fsm_16 => 
                if ((ap_const_lv1_0 = exitcond3_fu_476_p2)) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond4_fu_343_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_343_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond4_fu_343_p2)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_343_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_476_p2 <= "1" when (j_1_reg_222 = smax2_reg_694) else "0";
    exitcond4_fu_343_p2 <= "1" when (indvar4_reg_187 = ap_const_lv4_A) else "0";
    exitcond5_fu_248_p2 <= "1" when (indvar3_reg_176 = ap_const_lv9_1FF) else "0";
    grp_bitrp_fu_234_ap_start <= grp_bitrp_fu_234_ap_start_ap_start_reg;
    grp_bitrp_fu_234_ximag_V_q0 <= ximag_V_q0;
    grp_bitrp_fu_234_ximag_V_q1 <= ximag_V_q1;
    grp_bitrp_fu_234_xreal_V_q0 <= xreal_V_q0;
    grp_bitrp_fu_234_xreal_V_q1 <= xreal_V_q1;
    grp_fu_268_ce <= ap_const_logic_1;
    grp_fu_268_p0 <= wimag_V_q0;
    grp_fu_268_p1 <= ap_const_lv45_1FFFFFFFE703(14 - 1 downto 0);
    grp_fu_282_ce <= ap_const_logic_1;
    grp_fu_282_p0 <= wreal_V_q0;
    grp_fu_282_p1 <= ap_const_lv52_FFFEC(20 - 1 downto 0);
    grp_fu_288_ce <= ap_const_logic_1;
    grp_fu_288_p0 <= wimag_V_q0;
    grp_fu_288_p1 <= ap_const_lv52_FFFEC(20 - 1 downto 0);
    grp_fu_294_ce <= ap_const_logic_1;
    grp_fu_294_p0 <= wreal_V_q0;
    grp_fu_294_p1 <= ap_const_lv45_1FFFFFFFE703(14 - 1 downto 0);
    grp_fu_428_ce <= ap_const_logic_1;
    grp_fu_428_p0 <= m_reg_198;
    grp_fu_428_p1 <= indvar_reg_210;

    -- grp_fu_499_ce assign process. --
    grp_fu_499_ce_assign_proc : process(ap_CS_fsm, exitcond3_fu_476_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st52_fsm_51 = ap_CS_fsm) or (ap_ST_st57_fsm_56 = ap_CS_fsm) or (ap_ST_st58_fsm_57 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st17_fsm_16 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond3_fu_476_p2))) or (ap_ST_st59_fsm_58 = ap_CS_fsm) or (ap_ST_st5_fsm_4 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st53_fsm_52 = ap_CS_fsm) or (ap_ST_st54_fsm_53 = ap_CS_fsm) or (ap_ST_st55_fsm_54 = ap_CS_fsm) or (ap_ST_st56_fsm_55 = ap_CS_fsm))) then 
            grp_fu_499_ce <= ap_const_logic_0;
        else 
            grp_fu_499_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_499_p0 <= (tmp_36_fu_487_p1 & ap_const_lv10_0);
    grp_fu_499_p1 <= m_reg_198;
    grp_fu_539_ce <= ap_const_logic_1;
    grp_fu_539_p0 <= tmp_24_fu_531_p1(32 - 1 downto 0);
    grp_fu_539_p1 <= tmp_25_fu_535_p1(32 - 1 downto 0);
    grp_fu_545_ce <= ap_const_logic_1;
    grp_fu_545_p0 <= tmp_22_fu_523_p1(32 - 1 downto 0);
    grp_fu_545_p1 <= tmp_23_fu_527_p1(32 - 1 downto 0);
    grp_fu_551_ce <= ap_const_logic_1;
    grp_fu_551_p0 <= tmp_22_fu_523_p1(32 - 1 downto 0);
    grp_fu_551_p1 <= tmp_25_fu_535_p1(32 - 1 downto 0);
    grp_fu_557_ce <= ap_const_logic_1;
    grp_fu_557_p0 <= tmp_24_fu_531_p1(32 - 1 downto 0);
    grp_fu_557_p1 <= tmp_23_fu_527_p1(32 - 1 downto 0);
    icmp_fu_450_p2 <= "1" when (signed(tr_fu_440_p4) < signed(ap_const_lv22_1)) else "0";
    index1_fu_466_p2 <= std_logic_vector(unsigned(k_reg_704) + unsigned(j_1_cast_fu_462_p1));
    index2_fu_471_p2 <= std_logic_vector(unsigned(index1_fu_466_p2) + unsigned(tmp_18_reg_689));
    indvar_next2_fu_349_p2 <= std_logic_vector(unsigned(indvar4_reg_187) + unsigned(ap_const_lv4_1));
    indvar_next_fu_434_p2 <= std_logic_vector(unsigned(indvar_reg_210) + unsigned(ap_const_lv32_1));
    j_1_cast_fu_462_p1 <= std_logic_vector(resize(unsigned(j_1_reg_222),32));
    j_5_fu_481_p2 <= std_logic_vector(unsigned(j_1_reg_222) + unsigned(ap_const_lv31_1));
    j_fu_242_p2 <= std_logic_vector(unsigned(indvar3_reg_176) + unsigned(ap_const_lv9_1));
    m_2_fu_456_p2 <= std_logic_vector(shift_left(unsigned(m_reg_198),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    p_lshr_f_fu_388_p4 <= m_reg_198(31 downto 1);
    p_neg_fu_355_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(m_reg_198));
    p_neg_t_fu_382_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_27_fu_379_p1));
    r_V_21_fu_598_p2 <= std_logic_vector(unsigned(timag_V_fu_581_p4) + unsigned(ximag_V_q0));
    r_V_22_fu_605_p2 <= std_logic_vector(unsigned(xreal_V_q0) - unsigned(treal_V_fu_567_p4));
    r_V_23_fu_611_p2 <= std_logic_vector(unsigned(ximag_V_q0) - unsigned(timag_V_fu_581_p4));
    
    r_V_reg_656_temp <= signed(r_V_reg_656);
    r_V_26_fu_303_p1 <= std_logic_vector(resize(r_V_reg_656_temp,52));

    r_V_26_fu_303_p2 <= std_logic_vector(unsigned(r_V_25_reg_661) - unsigned(r_V_26_fu_303_p1));
    
    r_V_28_reg_671_temp <= signed(r_V_28_reg_671);
    r_V_29_fu_327_p1 <= std_logic_vector(resize(r_V_28_reg_671_temp,52));

    r_V_29_fu_327_p2 <= std_logic_vector(unsigned(r_V_27_reg_666) + unsigned(r_V_29_fu_327_p1));
    r_V_30_fu_563_p2 <= std_logic_vector(unsigned(lhs_V_3_cast_reg_785) - unsigned(rhs_V_3_cast_reg_790));
    r_V_31_fu_577_p2 <= std_logic_vector(unsigned(rhs_V_4_cast_reg_800) + unsigned(lhs_V_4_cast_reg_795));
    r_V_s_fu_591_p2 <= std_logic_vector(unsigned(treal_V_fu_567_p4) + unsigned(xreal_V_q0));
    smax2_fu_420_p3 <= 
        tmp_34_fu_410_p1 when (tmp1_fu_414_p2(0) = '1') else 
        ap_const_lv31_0;
    timag_V_fu_581_p4 <= r_V_31_fu_577_p2(51 downto 20);
    tmp1_fu_414_p2 <= "1" when (signed(tmp_18_fu_402_p3) > signed(ap_const_lv32_0)) else "0";
    tmp_16_fu_319_p1 <= std_logic_vector(resize(unsigned(j_reg_617),64));
    tmp_18_fu_402_p3 <= 
        p_neg_t_fu_382_p2 when (tmp_33_fu_371_p3(0) = '1') else 
        tmp_28_fu_398_p1;
    
    index2_fu_471_p2_temp <= signed(index2_fu_471_p2);
    tmp_20_fu_505_p1 <= std_logic_vector(resize(index2_fu_471_p2_temp,64));

    
    grp_fu_499_p2_temp <= signed(grp_fu_499_p2);
    tmp_21_fu_517_p1 <= std_logic_vector(resize(grp_fu_499_p2_temp,64));

    
    ximag_V_q0_temp <= signed(ximag_V_q0);
    tmp_22_fu_523_p1 <= std_logic_vector(resize(ximag_V_q0_temp,52));

    
    wimag_V_q0_temp <= signed(wimag_V_q0);
    tmp_23_fu_527_p1 <= std_logic_vector(resize(wimag_V_q0_temp,52));

    
    xreal_V_q0_temp <= signed(xreal_V_q0);
    tmp_24_fu_531_p1 <= std_logic_vector(resize(xreal_V_q0_temp,52));

    
    wreal_V_q0_temp <= signed(wreal_V_q0);
    tmp_25_fu_535_p1 <= std_logic_vector(resize(wreal_V_q0_temp,52));

    
    index1_fu_466_p2_temp <= signed(index1_fu_466_p2);
    tmp_26_fu_511_p1 <= std_logic_vector(resize(index1_fu_466_p2_temp,64));

    tmp_27_fu_379_p1 <= std_logic_vector(resize(unsigned(p_lshr_reg_684),32));
    tmp_28_fu_398_p1 <= std_logic_vector(resize(unsigned(p_lshr_f_fu_388_p4),32));
    tmp_33_fu_371_p3 <= m_reg_198(31 downto 31);
    tmp_34_fu_410_p1 <= tmp_18_fu_402_p3(31 - 1 downto 0);
    tmp_36_fu_487_p1 <= j_1_reg_222(22 - 1 downto 0);
    tmp_fu_254_p1 <= std_logic_vector(resize(unsigned(indvar3_reg_176),64));
    tr_fu_440_p4 <= grp_fu_428_p2(31 downto 10);
    treal_V_fu_567_p4 <= r_V_30_fu_563_p2(51 downto 20);

    -- wimag_V_address0 assign process. --
    wimag_V_address0_assign_proc : process(ap_CS_fsm, tmp_fu_254_p1, tmp_16_fu_319_p1, tmp_21_fu_517_p1)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            wimag_V_address0 <= tmp_16_fu_319_p1(9 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            wimag_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_ST_st51_fsm_50 = ap_CS_fsm)) then 
            wimag_V_address0 <= tmp_21_fu_517_p1(9 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            wimag_V_address0 <= tmp_fu_254_p1(9 - 1 downto 0);
        else 
            wimag_V_address0 <= tmp_16_fu_319_p1(9 - 1 downto 0);
        end if; 
    end process;


    -- wimag_V_ce0 assign process. --
    wimag_V_ce0_assign_proc : process(ap_CS_fsm, exitcond5_fu_248_p2, grp_bitrp_fu_234_ap_done)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond5_fu_248_p2 = ap_const_lv1_0)) or (ap_ST_st51_fsm_50 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_234_ap_done))))) then 
            wimag_V_ce0 <= ap_const_logic_1;
        else 
            wimag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- wimag_V_d0 assign process. --
    wimag_V_d0_assign_proc : process(ap_CS_fsm, r_V_29_fu_327_p2)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            wimag_V_d0 <= r_V_29_fu_327_p2(51 downto 20);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            wimag_V_d0 <= ap_const_lv32_0;
        else 
            wimag_V_d0 <= r_V_29_fu_327_p2(51 downto 20);
        end if; 
    end process;


    -- wimag_V_we0 assign process. --
    wimag_V_we0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_234_ap_done)
    begin
        if (((ap_ST_st7_fsm_6 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_234_ap_done))))) then 
            wimag_V_we0 <= ap_const_logic_1;
        else 
            wimag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- wreal_V_address0 assign process. --
    wreal_V_address0_assign_proc : process(ap_CS_fsm, tmp_fu_254_p1, tmp_16_fu_319_p1, tmp_21_fu_517_p1)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            wreal_V_address0 <= tmp_16_fu_319_p1(9 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            wreal_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_ST_st51_fsm_50 = ap_CS_fsm)) then 
            wreal_V_address0 <= tmp_21_fu_517_p1(9 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            wreal_V_address0 <= tmp_fu_254_p1(9 - 1 downto 0);
        else 
            wreal_V_address0 <= tmp_16_fu_319_p1(9 - 1 downto 0);
        end if; 
    end process;


    -- wreal_V_ce0 assign process. --
    wreal_V_ce0_assign_proc : process(ap_CS_fsm, exitcond5_fu_248_p2, grp_bitrp_fu_234_ap_done)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond5_fu_248_p2 = ap_const_lv1_0)) or (ap_ST_st51_fsm_50 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_234_ap_done))))) then 
            wreal_V_ce0 <= ap_const_logic_1;
        else 
            wreal_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- wreal_V_d0 assign process. --
    wreal_V_d0_assign_proc : process(ap_CS_fsm, r_V_26_fu_303_p2)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            wreal_V_d0 <= r_V_26_fu_303_p2(51 downto 20);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            wreal_V_d0 <= ap_const_lv32_100000;
        else 
            wreal_V_d0 <= r_V_26_fu_303_p2(51 downto 20);
        end if; 
    end process;


    -- wreal_V_we0 assign process. --
    wreal_V_we0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_234_ap_done)
    begin
        if (((ap_ST_st7_fsm_6 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_bitrp_fu_234_ap_done))))) then 
            wreal_V_we0 <= ap_const_logic_1;
        else 
            wreal_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ximag_V_address0 assign process. --
    ximag_V_address0_assign_proc : process(ap_CS_fsm, ximag_V_addr_reg_731, ximag_V_addr_3_reg_746, grp_bitrp_fu_234_ximag_V_address0)
    begin
        if (((ap_ST_st57_fsm_56 = ap_CS_fsm) or (ap_ST_st58_fsm_57 = ap_CS_fsm))) then 
            ximag_V_address0 <= ximag_V_addr_3_reg_746;
        elsif (((ap_ST_st51_fsm_50 = ap_CS_fsm) or (ap_ST_st59_fsm_58 = ap_CS_fsm))) then 
            ximag_V_address0 <= ximag_V_addr_reg_731;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_address0 <= grp_bitrp_fu_234_ximag_V_address0;
        else 
            ximag_V_address0 <= grp_bitrp_fu_234_ximag_V_address0;
        end if; 
    end process;

    ximag_V_address1 <= grp_bitrp_fu_234_ximag_V_address1;

    -- ximag_V_ce0 assign process. --
    ximag_V_ce0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_234_ximag_V_ce0)
    begin
        if (((ap_ST_st51_fsm_50 = ap_CS_fsm) or (ap_ST_st57_fsm_56 = ap_CS_fsm) or (ap_ST_st58_fsm_57 = ap_CS_fsm) or (ap_ST_st59_fsm_58 = ap_CS_fsm))) then 
            ximag_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_ce0 <= grp_bitrp_fu_234_ximag_V_ce0;
        else 
            ximag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ximag_V_ce1 assign process. --
    ximag_V_ce1_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_234_ximag_V_ce1)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_ce1 <= grp_bitrp_fu_234_ximag_V_ce1;
        else 
            ximag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ximag_V_d0 assign process. --
    ximag_V_d0_assign_proc : process(ap_CS_fsm, r_V_23_reg_810, grp_bitrp_fu_234_ximag_V_d0, r_V_21_fu_598_p2)
    begin
        if ((ap_ST_st59_fsm_58 = ap_CS_fsm)) then 
            ximag_V_d0 <= r_V_23_reg_810;
        elsif ((ap_ST_st58_fsm_57 = ap_CS_fsm)) then 
            ximag_V_d0 <= r_V_21_fu_598_p2;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_d0 <= grp_bitrp_fu_234_ximag_V_d0;
        else 
            ximag_V_d0 <= r_V_21_fu_598_p2;
        end if; 
    end process;


    -- ximag_V_we0 assign process. --
    ximag_V_we0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_234_ximag_V_we0)
    begin
        if (((ap_ST_st58_fsm_57 = ap_CS_fsm) or (ap_ST_st59_fsm_58 = ap_CS_fsm))) then 
            ximag_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ximag_V_we0 <= grp_bitrp_fu_234_ximag_V_we0;
        else 
            ximag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- xreal_V_address0 assign process. --
    xreal_V_address0_assign_proc : process(ap_CS_fsm, xreal_V_addr_reg_736, xreal_V_addr_3_reg_741, grp_bitrp_fu_234_xreal_V_address0)
    begin
        if (((ap_ST_st57_fsm_56 = ap_CS_fsm) or (ap_ST_st58_fsm_57 = ap_CS_fsm))) then 
            xreal_V_address0 <= xreal_V_addr_3_reg_741;
        elsif (((ap_ST_st51_fsm_50 = ap_CS_fsm) or (ap_ST_st59_fsm_58 = ap_CS_fsm))) then 
            xreal_V_address0 <= xreal_V_addr_reg_736;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_address0 <= grp_bitrp_fu_234_xreal_V_address0;
        else 
            xreal_V_address0 <= grp_bitrp_fu_234_xreal_V_address0;
        end if; 
    end process;

    xreal_V_address1 <= grp_bitrp_fu_234_xreal_V_address1;

    -- xreal_V_ce0 assign process. --
    xreal_V_ce0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_234_xreal_V_ce0)
    begin
        if (((ap_ST_st51_fsm_50 = ap_CS_fsm) or (ap_ST_st57_fsm_56 = ap_CS_fsm) or (ap_ST_st58_fsm_57 = ap_CS_fsm) or (ap_ST_st59_fsm_58 = ap_CS_fsm))) then 
            xreal_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_ce0 <= grp_bitrp_fu_234_xreal_V_ce0;
        else 
            xreal_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- xreal_V_ce1 assign process. --
    xreal_V_ce1_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_234_xreal_V_ce1)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_ce1 <= grp_bitrp_fu_234_xreal_V_ce1;
        else 
            xreal_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- xreal_V_d0 assign process. --
    xreal_V_d0_assign_proc : process(ap_CS_fsm, r_V_22_reg_805, grp_bitrp_fu_234_xreal_V_d0, r_V_s_fu_591_p2)
    begin
        if ((ap_ST_st59_fsm_58 = ap_CS_fsm)) then 
            xreal_V_d0 <= r_V_22_reg_805;
        elsif ((ap_ST_st58_fsm_57 = ap_CS_fsm)) then 
            xreal_V_d0 <= r_V_s_fu_591_p2;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_d0 <= grp_bitrp_fu_234_xreal_V_d0;
        else 
            xreal_V_d0 <= r_V_s_fu_591_p2;
        end if; 
    end process;


    -- xreal_V_we0 assign process. --
    xreal_V_we0_assign_proc : process(ap_CS_fsm, grp_bitrp_fu_234_xreal_V_we0)
    begin
        if (((ap_ST_st58_fsm_57 = ap_CS_fsm) or (ap_ST_st59_fsm_58 = ap_CS_fsm))) then 
            xreal_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            xreal_V_we0 <= grp_bitrp_fu_234_xreal_V_we0;
        else 
            xreal_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
