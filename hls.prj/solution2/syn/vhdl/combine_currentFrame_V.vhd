-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity combine_currentFrame_V_rom is 
    generic(
             dwidth     : integer := 17; 
             awidth     : integer := 10; 
             mem_size    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of combine_currentFrame_V_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 767=> "00000000000000000", 768 => "10101001011000000", 
    769 => "10101001111000000", 770 => "10101001101011111", 
    771 => "10101001100011111", 772 => "10101011011100000", 
    773 => "10101100110000000", 774 => "10101100100011111", 
    775 => "10101100110011111", 776 => "10101101000011111", 
    777 => "10101101100011111", 778 => "10101111000111111", 
    779 => "10101111010100000", 780 => "10101110000011111", 
    781 => "10101101101000000", 782 => "10101101011000000", 
    783 => "10101100110011111", 784 => "10101101000011111", 
    785 => "10101101100000000", 786 => "10101101001011111", 
    787 => "10101101111000000", 788 => "10101111101111111", 
    789 => "10110000010000000", 790 => "10101110111100000", 
    791 => "10101101101000000", 792 => "10101100100011111", 
    793 => "10101010101111111", 794 => "10101000110111111", 
    795 => "10100111110111111", 796 => "10100111111111111", 
    797 => "10101000101111111", 798 => "10101000100100000", 
    799 => "10100111010111111", 800 => "10100101101000000", 
    801 => "10100011001000000", 802 => "10100000111111111", 
    803 => "10100000010111111", 804 => "10100000001100000", 
    805 => "10011111100000000", 806 => "10011101101100000", 
    807 => "10011011011011111", 808 => "10011010101011111", 
    809 => "10011010010100000", 810 => "10011000011011111", 
    811 => "10010110100111111", 812 => "10010100111011111", 
    813 => "10010001111100000", 814 => "10001111001111111", 
    815 => "10001100001100000", 816 => "10000111000011111", 
    817 => "10000010110000000", 818 => "10000001000111111", 
    819 => "10000000000100000", 820 => "01111110111000000", 
    821 => "01111110101011111", 822 => "01111110011000000", 
    823 => "01111100011011111", 824 => "01111010000100000", 
    825 => "01110111101011111", 826 => "01110100111000000", 
    827 => "01110010111111111", 828 => "01110001101011111", 
    829 => "01101110110100000", 830 => "01101100001111111", 
    831 => "01101011001100000", 832 => "01101001001000000", 
    833 => "01100110010000000", 834 => "01100011110100000", 
    835 => "01100001010100000", 836 => "01011111000011111", 
    837 => "01011100110100000", 838 => "01011010010100000", 
    839 => "01011001010111111", 840 => "01011000100000000", 
    841 => "01010110000100000", 842 => "01010100000000000", 
    843 => "01010001110111111", 844 => "01001110111111111", 
    845 => "01001100010100000", 846 => "01001001111000000", 
    847 => "01001000100100000", 848 => "01000111110111111", 
    849 => "01000101110011111", 850 => "01000100101111111", 
    851 => "01000100010100000", 852 => "01000001010111111", 
    853 => "00111110010011111", 854 => "00111100010000000", 
    855 => "00111001010100000", 856 => "00110111010011111", 
    857 => "00110101100100000", 858 => "00110010010100000", 
    859 => "00110000110000000", 860 => "00101111111100000", 
    861 => "00101011110100000", 862 => "00100110111011111", 
    863 => "00100100000100000", 864 => "00100001101111111", 
    865 => "00100000000000000", 866 => "00011111110011111", 
    867 => "00100000001111111", 868 => "00011111111000000", 
    869 => "00011111011011111", 870 => "00011111001000000", 
    871 => "00011100110111111", 872 => "00011001010111111", 
    873 => "00010111010011111", 874 => "00010101110111111", 
    875 => "00010100110000000", 876 => "00010100101011111", 
    877 => "00010100110000000", 878 => "00010100100011111", 
    879 => "00010011101011111", 880 => "00010001001011111", 
    881 => "00001111001100000", 882 => "00001110010100000", 
    883 => "00001101011000000", 884 => "00001101101011111", 
    885 => "00001110101111111", 886 => "00001110111111111", 
    887 => "00001111100111111", 888 => "00010000101000000", 
    889 => "00010001011011111", 890 => "00010010110100000", 
    891 => "00010011010100000", 892 => "00010010011100000", 
    893 => "00010001110000000", 894 to 895=> "00010001101000000", 
    896 => "00010001100011111", 897 => "00010001010011111", 
    898 => "00010010010100000", 899 => "00010011011100000", 
    900 => "00010010100111111", 901 => "00010001111111111", 
    902 => "00010010100111111", 903 => "00010010010111111", 
    904 => "00010001101011111", 905 => "00010010011111111", 
    906 => "00010100000011111", 907 => "00010101010011111", 
    908 => "00010101110100000", 909 => "00010110001111111", 
    910 => "00010110110100000", 911 => "00010111110011111", 
    912 => "00011010001111111", 913 => "00011100111100000", 
    914 => "00011101011111111", 915 => "00011100111100000", 
    916 => "00011101000100000", 917 => "00011101010100000", 
    918 => "00011101110100000", 919 => "00011110101000000", 
    920 => "00011111000000000", 921 => "00100000000000000", 
    922 => "00100010000011111", 923 => "00100011100111111", 
    924 => "00100100110100000", 925 => "00100101101011111", 
    926 => "00100101011011111", 927 => "00100101111011111", 
    928 => "00101000001111111", 929 => "00101010010000000", 
    930 => "00101011011100000", 931 => "00101101010011111", 
    932 => "00110000001011111", 933 => "00110001111111111", 
    934 => "00110010010111111", 935 => "00110100010011111", 
    936 => "00111000010000000", 937 => "00111010111000000", 
    938 => "00111100100111111", 939 => "00111111110000000", 
    940 => "01000011000011111", 941 => "01000101100011111", 
    942 => "01000111100111111", 943 => "01001001001011111", 
    944 => "01001010010000000", 945 => "01001001111000000", 
    946 => "01001001001011111", 947 => "01001010111100000", 
    948 => "01001100100011111", 949 => "01001100000111111", 
    950 => "01001101000000000", 951 => "01001111000111111", 
    952 => "01010000001011111", 953 => "01010001010000000", 
    954 => "01010010000111111", 955 => "01010001010000000", 
    956 => "01010000010000000", 957 => "01010000100011111", 
    958 => "01010001100011111", 959 => "01010010000100000", 
    960 => "01010010011100000", 961 => "01010100010011111", 
    962 => "01010110100111111", 963 => "01010111101000000", 
    964 => "01011000011011111", 965 => "01011001110111111", 
    966 => "01011010111011111", 967 => "01011011101011111", 
    968 => "01011100101111111", 969 => "01011110000111111", 
    970 => "01011111111000000", 971 => "01100001111011111", 
    972 => "01100011111100000", 973 => "01100110011000000", 
    974 => "01101010001011111", 975 => "01101101100011111", 
    976 => "01101110011100000", 977 => "01101110010111111", 
    978 to 979=> "01101110010100000", 980 => "01110000000000000", 
    981 => "01110010011100000", 982 => "01110011101000000", 
    983 => "01110110000100000", 984 => "01111001011100000", 
    985 => "01111010011100000", 986 => "01111010110000000", 
    987 => "01111100011000000", 988 => "01111101111100000", 
    989 to 990=> "01111110100011111", 991 => "01111111111011111", 
    992 => "10000011000011111", 993 => "10000100111100000", 
    994 => "10000110110000000", 995 => "10001010010011111", 
    996 => "10001100101000000", 997 => "10001110000011111", 
    998 => "10010000101000000", 999 => "10010001011000000", 
    1000 => "10010000001011111", 1001 => "10001111011100000", 
    1002 => "10001111000111111", 1003 => "10001111111100000", 
    1004 => "10010001010000000", 1005 => "10010000101000000", 
    1006 => "10010000100000000", 1007 => "10010010001111111", 
    1008 => "10010010010111111", 1009 => "10010001000011111", 
    1010 => "10010001001011111", 1011 => "10010000011000000", 
    1012 => "10001101100000000", 1013 => "10001100101000000", 
    1014 => "10001110000000000", 1015 => "10001101100000000", 
    1016 => "10001011111100000", 1017 => "10001011100111111", 
    1018 => "10001011001100000", 1019 => "10001010010000000", 
    1020 => "10001010001011111", 1021 => "10001001100000000", 
    1022 => "10001000001100000", 1023 => "10001000010111111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity combine_currentFrame_V is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of combine_currentFrame_V is
    component combine_currentFrame_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;




begin
    combine_currentFrame_V_rom_U :  component combine_currentFrame_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


