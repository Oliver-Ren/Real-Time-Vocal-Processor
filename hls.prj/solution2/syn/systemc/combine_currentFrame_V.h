// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

// Port list: {  1 3  }


#ifndef _combine_currentFrame_V_H_
#define _combine_currentFrame_V_H_



#include <systemc>
#include <iostream>
#include <fstream>
#include "AESL_pkg.h"

template<unsigned int READ_PORT_COUNT = 1,
         unsigned int WRITE_PORT_COUNT = 1,
         unsigned int DATA_WIDTH = 8,
         unsigned int ADDRESS_WIDTH = 8,
         unsigned int WORD_COUNT = 256>
struct combine_currentFrame_V_core : public sc_core::sc_module
{
public:
    sc_core::sc_in< sc_dt::sc_lv< WRITE_PORT_COUNT*DATA_WIDTH > > d;
    sc_core::sc_out< sc_dt::sc_lv< READ_PORT_COUNT*DATA_WIDTH > > q;
    sc_core::sc_in < sc_dt::sc_lv< READ_PORT_COUNT*ADDRESS_WIDTH > > ra;
    sc_core::sc_in < sc_dt::sc_lv< READ_PORT_COUNT > > ce;
    sc_core::sc_in < sc_dt::sc_lv< WRITE_PORT_COUNT*ADDRESS_WIDTH > > wa;
    sc_core::sc_in < sc_dt::sc_lv< WRITE_PORT_COUNT > > we;
    sc_core::sc_in <sc_dt::sc_logic>  reset;
    sc_core::sc_in_clk  clk;

    SC_HAS_PROCESS(combine_currentFrame_V_core);
    combine_currentFrame_V_core(sc_core::sc_module_name) {
        mem = new sc_dt::sc_lv< DATA_WIDTH> [WORD_COUNT];

        SC_METHOD(proc_di);
        sensitive << d;

        SC_METHOD(proc_wai);
        sensitive << wa;

        SC_METHOD(proc_mem);
        sensitive << clk.pos();

        SC_METHOD(proc_rai);
        sensitive << ra;

        SC_METHOD(proc_rai_reg);
        sensitive << clk.pos();

        SC_METHOD(proc_qi);
        sensitive << clk;
        for (unsigned i = 0; i < READ_PORT_COUNT; i++) {
            sensitive << rai_reg[i];
        }

        SC_METHOD(proc_q);
        sensitive << qi;

        for (unsigned i = 0; i < 768 ; i = i + 1) {
            mem[i] = "00000000000000000";
        }
        mem[768] = "10101001011000000";
        mem[769] = "10101001111000000";
        mem[770] = "10101001101011111";
        mem[771] = "10101001100011111";
        mem[772] = "10101011011100000";
        mem[773] = "10101100110000000";
        mem[774] = "10101100100011111";
        mem[775] = "10101100110011111";
        mem[776] = "10101101000011111";
        mem[777] = "10101101100011111";
        mem[778] = "10101111000111111";
        mem[779] = "10101111010100000";
        mem[780] = "10101110000011111";
        mem[781] = "10101101101000000";
        mem[782] = "10101101011000000";
        mem[783] = "10101100110011111";
        mem[784] = "10101101000011111";
        mem[785] = "10101101100000000";
        mem[786] = "10101101001011111";
        mem[787] = "10101101111000000";
        mem[788] = "10101111101111111";
        mem[789] = "10110000010000000";
        mem[790] = "10101110111100000";
        mem[791] = "10101101101000000";
        mem[792] = "10101100100011111";
        mem[793] = "10101010101111111";
        mem[794] = "10101000110111111";
        mem[795] = "10100111110111111";
        mem[796] = "10100111111111111";
        mem[797] = "10101000101111111";
        mem[798] = "10101000100100000";
        mem[799] = "10100111010111111";
        mem[800] = "10100101101000000";
        mem[801] = "10100011001000000";
        mem[802] = "10100000111111111";
        mem[803] = "10100000010111111";
        mem[804] = "10100000001100000";
        mem[805] = "10011111100000000";
        mem[806] = "10011101101100000";
        mem[807] = "10011011011011111";
        mem[808] = "10011010101011111";
        mem[809] = "10011010010100000";
        mem[810] = "10011000011011111";
        mem[811] = "10010110100111111";
        mem[812] = "10010100111011111";
        mem[813] = "10010001111100000";
        mem[814] = "10001111001111111";
        mem[815] = "10001100001100000";
        mem[816] = "10000111000011111";
        mem[817] = "10000010110000000";
        mem[818] = "10000001000111111";
        mem[819] = "10000000000100000";
        mem[820] = "01111110111000000";
        mem[821] = "01111110101011111";
        mem[822] = "01111110011000000";
        mem[823] = "01111100011011111";
        mem[824] = "01111010000100000";
        mem[825] = "01110111101011111";
        mem[826] = "01110100111000000";
        mem[827] = "01110010111111111";
        mem[828] = "01110001101011111";
        mem[829] = "01101110110100000";
        mem[830] = "01101100001111111";
        mem[831] = "01101011001100000";
        mem[832] = "01101001001000000";
        mem[833] = "01100110010000000";
        mem[834] = "01100011110100000";
        mem[835] = "01100001010100000";
        mem[836] = "01011111000011111";
        mem[837] = "01011100110100000";
        mem[838] = "01011010010100000";
        mem[839] = "01011001010111111";
        mem[840] = "01011000100000000";
        mem[841] = "01010110000100000";
        mem[842] = "01010100000000000";
        mem[843] = "01010001110111111";
        mem[844] = "01001110111111111";
        mem[845] = "01001100010100000";
        mem[846] = "01001001111000000";
        mem[847] = "01001000100100000";
        mem[848] = "01000111110111111";
        mem[849] = "01000101110011111";
        mem[850] = "01000100101111111";
        mem[851] = "01000100010100000";
        mem[852] = "01000001010111111";
        mem[853] = "00111110010011111";
        mem[854] = "00111100010000000";
        mem[855] = "00111001010100000";
        mem[856] = "00110111010011111";
        mem[857] = "00110101100100000";
        mem[858] = "00110010010100000";
        mem[859] = "00110000110000000";
        mem[860] = "00101111111100000";
        mem[861] = "00101011110100000";
        mem[862] = "00100110111011111";
        mem[863] = "00100100000100000";
        mem[864] = "00100001101111111";
        mem[865] = "00100000000000000";
        mem[866] = "00011111110011111";
        mem[867] = "00100000001111111";
        mem[868] = "00011111111000000";
        mem[869] = "00011111011011111";
        mem[870] = "00011111001000000";
        mem[871] = "00011100110111111";
        mem[872] = "00011001010111111";
        mem[873] = "00010111010011111";
        mem[874] = "00010101110111111";
        mem[875] = "00010100110000000";
        mem[876] = "00010100101011111";
        mem[877] = "00010100110000000";
        mem[878] = "00010100100011111";
        mem[879] = "00010011101011111";
        mem[880] = "00010001001011111";
        mem[881] = "00001111001100000";
        mem[882] = "00001110010100000";
        mem[883] = "00001101011000000";
        mem[884] = "00001101101011111";
        mem[885] = "00001110101111111";
        mem[886] = "00001110111111111";
        mem[887] = "00001111100111111";
        mem[888] = "00010000101000000";
        mem[889] = "00010001011011111";
        mem[890] = "00010010110100000";
        mem[891] = "00010011010100000";
        mem[892] = "00010010011100000";
        mem[893] = "00010001110000000";
        mem[894] = "00010001101000000";
        mem[895] = "00010001101000000";
        mem[896] = "00010001100011111";
        mem[897] = "00010001010011111";
        mem[898] = "00010010010100000";
        mem[899] = "00010011011100000";
        mem[900] = "00010010100111111";
        mem[901] = "00010001111111111";
        mem[902] = "00010010100111111";
        mem[903] = "00010010010111111";
        mem[904] = "00010001101011111";
        mem[905] = "00010010011111111";
        mem[906] = "00010100000011111";
        mem[907] = "00010101010011111";
        mem[908] = "00010101110100000";
        mem[909] = "00010110001111111";
        mem[910] = "00010110110100000";
        mem[911] = "00010111110011111";
        mem[912] = "00011010001111111";
        mem[913] = "00011100111100000";
        mem[914] = "00011101011111111";
        mem[915] = "00011100111100000";
        mem[916] = "00011101000100000";
        mem[917] = "00011101010100000";
        mem[918] = "00011101110100000";
        mem[919] = "00011110101000000";
        mem[920] = "00011111000000000";
        mem[921] = "00100000000000000";
        mem[922] = "00100010000011111";
        mem[923] = "00100011100111111";
        mem[924] = "00100100110100000";
        mem[925] = "00100101101011111";
        mem[926] = "00100101011011111";
        mem[927] = "00100101111011111";
        mem[928] = "00101000001111111";
        mem[929] = "00101010010000000";
        mem[930] = "00101011011100000";
        mem[931] = "00101101010011111";
        mem[932] = "00110000001011111";
        mem[933] = "00110001111111111";
        mem[934] = "00110010010111111";
        mem[935] = "00110100010011111";
        mem[936] = "00111000010000000";
        mem[937] = "00111010111000000";
        mem[938] = "00111100100111111";
        mem[939] = "00111111110000000";
        mem[940] = "01000011000011111";
        mem[941] = "01000101100011111";
        mem[942] = "01000111100111111";
        mem[943] = "01001001001011111";
        mem[944] = "01001010010000000";
        mem[945] = "01001001111000000";
        mem[946] = "01001001001011111";
        mem[947] = "01001010111100000";
        mem[948] = "01001100100011111";
        mem[949] = "01001100000111111";
        mem[950] = "01001101000000000";
        mem[951] = "01001111000111111";
        mem[952] = "01010000001011111";
        mem[953] = "01010001010000000";
        mem[954] = "01010010000111111";
        mem[955] = "01010001010000000";
        mem[956] = "01010000010000000";
        mem[957] = "01010000100011111";
        mem[958] = "01010001100011111";
        mem[959] = "01010010000100000";
        mem[960] = "01010010011100000";
        mem[961] = "01010100010011111";
        mem[962] = "01010110100111111";
        mem[963] = "01010111101000000";
        mem[964] = "01011000011011111";
        mem[965] = "01011001110111111";
        mem[966] = "01011010111011111";
        mem[967] = "01011011101011111";
        mem[968] = "01011100101111111";
        mem[969] = "01011110000111111";
        mem[970] = "01011111111000000";
        mem[971] = "01100001111011111";
        mem[972] = "01100011111100000";
        mem[973] = "01100110011000000";
        mem[974] = "01101010001011111";
        mem[975] = "01101101100011111";
        mem[976] = "01101110011100000";
        mem[977] = "01101110010111111";
        mem[978] = "01101110010100000";
        mem[979] = "01101110010100000";
        mem[980] = "01110000000000000";
        mem[981] = "01110010011100000";
        mem[982] = "01110011101000000";
        mem[983] = "01110110000100000";
        mem[984] = "01111001011100000";
        mem[985] = "01111010011100000";
        mem[986] = "01111010110000000";
        mem[987] = "01111100011000000";
        mem[988] = "01111101111100000";
        mem[989] = "01111110100011111";
        mem[990] = "01111110100011111";
        mem[991] = "01111111111011111";
        mem[992] = "10000011000011111";
        mem[993] = "10000100111100000";
        mem[994] = "10000110110000000";
        mem[995] = "10001010010011111";
        mem[996] = "10001100101000000";
        mem[997] = "10001110000011111";
        mem[998] = "10010000101000000";
        mem[999] = "10010001011000000";
        mem[1000] = "10010000001011111";
        mem[1001] = "10001111011100000";
        mem[1002] = "10001111000111111";
        mem[1003] = "10001111111100000";
        mem[1004] = "10010001010000000";
        mem[1005] = "10010000101000000";
        mem[1006] = "10010000100000000";
        mem[1007] = "10010010001111111";
        mem[1008] = "10010010010111111";
        mem[1009] = "10010001000011111";
        mem[1010] = "10010001001011111";
        mem[1011] = "10010000011000000";
        mem[1012] = "10001101100000000";
        mem[1013] = "10001100101000000";
        mem[1014] = "10001110000000000";
        mem[1015] = "10001101100000000";
        mem[1016] = "10001011111100000";
        mem[1017] = "10001011100111111";
        mem[1018] = "10001011001100000";
        mem[1019] = "10001010010000000";
        mem[1020] = "10001010001011111";
        mem[1021] = "10001001100000000";
        mem[1022] = "10001000001100000";
        mem[1023] = "10001000010111111";
    }


    void proc_di()
    {
        sc_dt::sc_lv<DATA_WIDTH> dt;
        for (unsigned i = 0; i < WRITE_PORT_COUNT; i++) {
            for (unsigned j = 0; j < DATA_WIDTH; j++) {
                dt.set_bit(j, d.read()[i * DATA_WIDTH + j].value());
            }
            di[i].write(dt);
        }
    }

    void proc_wai()
    {
        sc_dt::sc_lv<ADDRESS_WIDTH> wat;
        for (unsigned i = 0; i < WRITE_PORT_COUNT; i++) {
            for (unsigned j = 0; j < ADDRESS_WIDTH; j++) {
                wat.set_bit(j, wa.read()[i * ADDRESS_WIDTH + j].value());
            }
            wai[i].write(wat);
        }
    }


    void proc_mem()
    {
        for (unsigned j = 0; j < WRITE_PORT_COUNT; j++) {
          if (we.read().get_bit(j) == 1) {
            unsigned i = wai[j].read().to_uint();
            if (!wai[j].read().is_01() || i >= WORD_COUNT) {
               cerr << "In memory model " << name() << ", during a write cycle\n";
               if (!wai[j].read().is_01()) 
                 cerr << "ERROR: address is not stable =" << wai[j].read() << endl;
               else
                 cerr << "ERROR: Address " << i << " for port '" << j << "' is outside the legal range [0.."
                      << (WORD_COUNT - 1) << "]." << endl;
               SC_REPORT_FATAL(1000, 0);
            }
            assert(wai[j].read().is_01());
            assert(i < WORD_COUNT);
            mem[i] = di[j];
          }
        }
    }


    void proc_rai()
    {
        sc_dt::sc_lv<ADDRESS_WIDTH> rat;
        for (unsigned i = 0; i < READ_PORT_COUNT; i++) {
            for (unsigned j = 0; j < ADDRESS_WIDTH; j++) {
                rat.set_bit(j, ra.read()[i * ADDRESS_WIDTH + j].value());
            }
            rai[i].write(rat);
        }
    }

    void proc_rai_reg()
    {
        for (unsigned i = 0; i < READ_PORT_COUNT; i++) {
            if ( ce.read().get_bit(i) == 1) {
                rai_reg[i] = rai[i];
            }
        }
    }

    void proc_qi()
    {
        sc_dt::sc_lv<DATA_WIDTH> qt;
        sc_dt::sc_lv<READ_PORT_COUNT*DATA_WIDTH> qit;
        for (unsigned i = 0; i < READ_PORT_COUNT; i++) {
            if (!(rai_reg[i].read().is_01())) 
                qt = sc_dt::sc_lv<DATA_WIDTH>();
            else 
            {
                unsigned addr = rai_reg[i].read().to_uint();
                if (addr >= WORD_COUNT) {
                    qt = sc_dt::sc_lv<DATA_WIDTH>();
                }
                else {
                    qt = mem[addr];
                }
            }
            for (unsigned j = 0; j < DATA_WIDTH; j++) {
                qit.set_bit(i*DATA_WIDTH+j, qt[j].value());
            }
        }
        qi.write(qit);
    }


    void proc_q()
    {
        q.write(qi.read());
    }

    ~combine_currentFrame_V_core() {
        delete [] mem;
    }

public:
    sc_dt::sc_lv< DATA_WIDTH>*  mem;
    sc_core::sc_signal<sc_dt::sc_lv<ADDRESS_WIDTH> > wai[ WRITE_PORT_COUNT ];
    sc_core::sc_signal<sc_dt::sc_lv<ADDRESS_WIDTH> > rai[READ_PORT_COUNT];
    sc_core::sc_signal<sc_dt::sc_lv<ADDRESS_WIDTH> > rai_reg[READ_PORT_COUNT];
    sc_core::sc_signal<sc_dt::sc_lv<DATA_WIDTH> > di[WRITE_PORT_COUNT];
    sc_core::sc_signal<sc_dt::sc_lv<READ_PORT_COUNT*DATA_WIDTH> > qi;
};

  


SC_MODULE( combine_currentFrame_V )
{
    static const unsigned int DataWidth = 17;
    static const unsigned int AddressRange = 1024;
    static const unsigned int AddressWidth = 10;


    sc_core::sc_in<sc_dt::sc_lv<AddressWidth> > address0;
    sc_core::sc_in<sc_dt::sc_logic> ce0;
    sc_core::sc_out<sc_dt::sc_lv<DataWidth> > q0;


    sc_core::sc_in<sc_dt::sc_logic> reset;
    sc_core::sc_in_clk clk;


    SC_CTOR( combine_currentFrame_V ) {
        meminst = new combine_currentFrame_V_core <1, 1, DataWidth, AddressWidth, AddressRange>("core_inst");

        meminst->d(mem_d);
        meminst->q(mem_q);
        meminst->ra(mem_ra);
        meminst->ce(mem_ce);
        meminst->wa(mem_wa);
        meminst->we(mem_we);
        meminst->reset(reset);
        meminst->clk(clk);

        SC_METHOD(proc_mem_q);
        sensitive << mem_q;

        SC_METHOD(proc_mem_ra);
        sensitive << address0;

        SC_METHOD(proc_mem_ce);
        sensitive << ce0;

        mem_wa.write(0);
        mem_we.write(0);
        mem_d.write(0);
    }

    ~combine_currentFrame_V() {
        delete meminst;
    }

    void proc_mem_q();
    void proc_mem_ra();
    void proc_mem_ce();

public:
    sc_core::sc_signal<sc_dt::sc_lv<1 * DataWidth> > mem_q;
    sc_core::sc_signal<sc_dt::sc_lv<1> > mem_we;
    sc_core::sc_signal<sc_dt::sc_lv<1 * DataWidth> > mem_d;
    sc_core::sc_signal<sc_dt::sc_lv<1 * AddressWidth> > mem_wa;
    sc_core::sc_signal<sc_dt::sc_lv<1 * AddressWidth> > mem_ra;
    sc_core::sc_signal<sc_dt::sc_lv<1> > mem_ce;

    combine_currentFrame_V_core <1, 1, DataWidth, AddressWidth, AddressRange>* meminst;
};

#endif //_combine_currentFrame_V_H_
