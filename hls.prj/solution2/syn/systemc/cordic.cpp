// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "cordic.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cordic::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cordic::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> cordic::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> cordic::ap_ST_st2_fsm_1 = "1";
const sc_lv<2> cordic::ap_ST_st3_fsm_2 = "10";
const sc_lv<2> cordic::ap_ST_st4_fsm_3 = "11";
const sc_lv<1> cordic::ap_const_lv1_0 = "0";
const sc_lv<32> cordic::ap_const_lv32_9B74E = "10011011011101001110";
const sc_lv<32> cordic::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<7> cordic::ap_const_lv7_0 = "0000000";
const sc_lv<32> cordic::ap_const_lv32_100000 = "100000000000000000000";
const sc_lv<7> cordic::ap_const_lv7_41 = "1000001";
const sc_lv<7> cordic::ap_const_lv7_1 = "1";

cordic::cordic(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cordic_ctab_V_U = new cal_mag_phase_cordic_ctab_V("cordic_ctab_V_U");
    cordic_ctab_V_U->clk(ap_clk);
    cordic_ctab_V_U->reset(ap_rst);
    cordic_ctab_V_U->address0(cordic_ctab_V_address0);
    cordic_ctab_V_U->ce0(cordic_ctab_V_ce0);
    cordic_ctab_V_U->q0(cordic_ctab_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( UnifiedRetVal1_reg_91 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( UnifiedRetVal_1_reg_103 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_cordic_ctab_V_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_1_fu_167_p1 );

    SC_METHOD(thread_cordic_ctab_V_ce0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_122_p2 );

    SC_METHOD(thread_current_angle_V_fu_216_p3);
    sensitive << ( tmp_s_reg_251 );
    sensitive << ( r_V_s_fu_204_p2 );
    sensitive << ( r_V_3_fu_210_p2 );

    SC_METHOD(thread_exitcond1_fu_122_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( step_1_reg_80 );

    SC_METHOD(thread_p_Val2_15_cast_fu_200_p1);
    sensitive << ( cordic_ctab_V_q0 );

    SC_METHOD(thread_r_V_1_fu_155_p2);
    sensitive << ( p_Val2_s_reg_44 );
    sensitive << ( sh_assign_3_cast_fu_139_p1 );

    SC_METHOD(thread_r_V_3_fu_210_p2);
    sensitive << ( p_Val2_4_reg_56 );
    sensitive << ( p_Val2_15_cast_fu_200_p1 );

    SC_METHOD(thread_r_V_fu_143_p2);
    sensitive << ( p_Val2_3_reg_68 );
    sensitive << ( sh_assign_3_cast_fu_139_p1 );

    SC_METHOD(thread_r_V_s_fu_204_p2);
    sensitive << ( p_Val2_4_reg_56 );
    sensitive << ( p_Val2_15_cast_fu_200_p1 );

    SC_METHOD(thread_sh_assign_3_cast_fu_139_p1);
    sensitive << ( step_1_reg_80 );

    SC_METHOD(thread_step_fu_128_p2);
    sensitive << ( step_1_reg_80 );

    SC_METHOD(thread_t_V_1_fu_172_p2);
    sensitive << ( p_Val2_s_reg_44 );
    sensitive << ( r_V_fu_143_p2 );

    SC_METHOD(thread_t_V_fu_149_p2);
    sensitive << ( p_Val2_s_reg_44 );
    sensitive << ( r_V_fu_143_p2 );

    SC_METHOD(thread_tmp_1_fu_167_p1);
    sensitive << ( step_1_reg_80 );

    SC_METHOD(thread_tmp_fu_116_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( theta_V );

    SC_METHOD(thread_tmp_s_fu_134_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( theta_V );
    sensitive << ( exitcond1_fu_122_p2 );
    sensitive << ( p_Val2_4_reg_56 );

    SC_METHOD(thread_x_V_2_fu_184_p3);
    sensitive << ( tmp_s_fu_134_p2 );
    sensitive << ( t_V_fu_149_p2 );
    sensitive << ( t_V_1_fu_172_p2 );

    SC_METHOD(thread_y_V_1_fu_178_p2);
    sensitive << ( p_Val2_3_reg_68 );
    sensitive << ( r_V_1_fu_155_p2 );

    SC_METHOD(thread_y_V_2_fu_192_p3);
    sensitive << ( tmp_s_fu_134_p2 );
    sensitive << ( y_V_fu_161_p2 );
    sensitive << ( y_V_1_fu_178_p2 );

    SC_METHOD(thread_y_V_fu_161_p2);
    sensitive << ( p_Val2_3_reg_68 );
    sensitive << ( r_V_1_fu_155_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_122_p2 );
    sensitive << ( tmp_fu_116_p2 );

    ap_CS_fsm = "00";
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cordic_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    const char* dump_vcd = std::getenv("AP_WRITE_VCD");
    if (dump_vcd && string(dump_vcd) == "1" ) {
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, theta_V, "(port)theta_V");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, cordic_ctab_V_address0, "cordic_ctab_V_address0");
    sc_trace(mVcdFile, cordic_ctab_V_ce0, "cordic_ctab_V_ce0");
    sc_trace(mVcdFile, cordic_ctab_V_q0, "cordic_ctab_V_q0");
    sc_trace(mVcdFile, step_fu_128_p2, "step_fu_128_p2");
    sc_trace(mVcdFile, step_reg_246, "step_reg_246");
    sc_trace(mVcdFile, tmp_s_fu_134_p2, "tmp_s_fu_134_p2");
    sc_trace(mVcdFile, tmp_s_reg_251, "tmp_s_reg_251");
    sc_trace(mVcdFile, exitcond1_fu_122_p2, "exitcond1_fu_122_p2");
    sc_trace(mVcdFile, x_V_2_fu_184_p3, "x_V_2_fu_184_p3");
    sc_trace(mVcdFile, x_V_2_reg_261, "x_V_2_reg_261");
    sc_trace(mVcdFile, y_V_2_fu_192_p3, "y_V_2_fu_192_p3");
    sc_trace(mVcdFile, y_V_2_reg_266, "y_V_2_reg_266");
    sc_trace(mVcdFile, current_angle_V_fu_216_p3, "current_angle_V_fu_216_p3");
    sc_trace(mVcdFile, p_Val2_s_reg_44, "p_Val2_s_reg_44");
    sc_trace(mVcdFile, tmp_fu_116_p2, "tmp_fu_116_p2");
    sc_trace(mVcdFile, p_Val2_4_reg_56, "p_Val2_4_reg_56");
    sc_trace(mVcdFile, p_Val2_3_reg_68, "p_Val2_3_reg_68");
    sc_trace(mVcdFile, step_1_reg_80, "step_1_reg_80");
    sc_trace(mVcdFile, UnifiedRetVal1_reg_91, "UnifiedRetVal1_reg_91");
    sc_trace(mVcdFile, UnifiedRetVal_1_reg_103, "UnifiedRetVal_1_reg_103");
    sc_trace(mVcdFile, tmp_1_fu_167_p1, "tmp_1_fu_167_p1");
    sc_trace(mVcdFile, sh_assign_3_cast_fu_139_p1, "sh_assign_3_cast_fu_139_p1");
    sc_trace(mVcdFile, r_V_fu_143_p2, "r_V_fu_143_p2");
    sc_trace(mVcdFile, r_V_1_fu_155_p2, "r_V_1_fu_155_p2");
    sc_trace(mVcdFile, t_V_fu_149_p2, "t_V_fu_149_p2");
    sc_trace(mVcdFile, t_V_1_fu_172_p2, "t_V_1_fu_172_p2");
    sc_trace(mVcdFile, y_V_fu_161_p2, "y_V_fu_161_p2");
    sc_trace(mVcdFile, y_V_1_fu_178_p2, "y_V_1_fu_178_p2");
    sc_trace(mVcdFile, p_Val2_15_cast_fu_200_p1, "p_Val2_15_cast_fu_200_p1");
    sc_trace(mVcdFile, r_V_s_fu_204_p2, "r_V_s_fu_204_p2");
    sc_trace(mVcdFile, r_V_3_fu_210_p2, "r_V_3_fu_210_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");

    }
}

cordic::~cordic() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete cordic_ctab_V_U;
}

void cordic::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond1_fu_122_p2.read(), ap_const_lv1_0))) {
        UnifiedRetVal1_reg_91 = p_Val2_3_reg_68.read();
    } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_116_p2.read()))) {
        UnifiedRetVal1_reg_91 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond1_fu_122_p2.read(), ap_const_lv1_0))) {
        UnifiedRetVal_1_reg_103 = p_Val2_s_reg_44.read();
    } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_116_p2.read()))) {
        UnifiedRetVal_1_reg_103 = ap_const_lv32_100000;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
            ap_return_0_preg = UnifiedRetVal1_reg_91.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
            ap_return_1_preg = UnifiedRetVal_1_reg_103.read();
        }
    }
    if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_116_p2.read()))) {
        p_Val2_3_reg_68 = ap_const_lv32_0;
    } else if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        p_Val2_3_reg_68 = y_V_2_reg_266.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_116_p2.read()))) {
        p_Val2_4_reg_56 = ap_const_lv32_0;
    } else if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        p_Val2_4_reg_56 = current_angle_V_fu_216_p3.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_116_p2.read()))) {
        p_Val2_s_reg_44 = ap_const_lv32_9B74E;
    } else if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        p_Val2_s_reg_44 = x_V_2_reg_261.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_116_p2.read()))) {
        step_1_reg_80 = ap_const_lv7_0;
    } else if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        step_1_reg_80 = step_reg_246.read();
    }
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        step_reg_246 = step_fu_128_p2.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && esl_seteq<1,1,1>(exitcond1_fu_122_p2.read(), ap_const_lv1_0))) {
        tmp_s_reg_251 = tmp_s_fu_134_p2.read();
        x_V_2_reg_261 = x_V_2_fu_184_p3.read();
        y_V_2_reg_266 = y_V_2_fu_192_p3.read();
    }
}

void cordic::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) || 
         esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cordic::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cordic::thread_ap_ready() {
    if (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cordic::thread_ap_return_0() {
    if (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        ap_return_0 = UnifiedRetVal1_reg_91.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void cordic::thread_ap_return_1() {
    if (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        ap_return_1 = UnifiedRetVal_1_reg_103.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void cordic::thread_cordic_ctab_V_address0() {
    cordic_ctab_V_address0 =  (sc_lv<6>) (tmp_1_fu_167_p1.read());
}

void cordic::thread_cordic_ctab_V_ce0() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_122_p2.read(), ap_const_lv1_0))) {
        cordic_ctab_V_ce0 = ap_const_logic_1;
    } else {
        cordic_ctab_V_ce0 = ap_const_logic_0;
    }
}

void cordic::thread_current_angle_V_fu_216_p3() {
    current_angle_V_fu_216_p3 = (!tmp_s_reg_251.read()[0].is_01())? sc_lv<32>(): ((tmp_s_reg_251.read()[0].to_bool())? r_V_s_fu_204_p2.read(): r_V_3_fu_210_p2.read());
}

void cordic::thread_exitcond1_fu_122_p2() {
    exitcond1_fu_122_p2 = (!step_1_reg_80.read().is_01() || !ap_const_lv7_41.is_01())? sc_lv<1>(): sc_lv<1>(step_1_reg_80.read() == ap_const_lv7_41);
}

void cordic::thread_p_Val2_15_cast_fu_200_p1() {
    p_Val2_15_cast_fu_200_p1 = esl_zext<32,20>(cordic_ctab_V_q0.read());
}

void cordic::thread_r_V_1_fu_155_p2() {
    r_V_1_fu_155_p2 = (!p_Val2_s_reg_44.read().is_01() || !sh_assign_3_cast_fu_139_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(p_Val2_s_reg_44.read()) >> (unsigned short)sh_assign_3_cast_fu_139_p1.read().to_uint();
}

void cordic::thread_r_V_3_fu_210_p2() {
    r_V_3_fu_210_p2 = (!p_Val2_4_reg_56.read().is_01() || !p_Val2_15_cast_fu_200_p1.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_4_reg_56.read()) - sc_biguint<32>(p_Val2_15_cast_fu_200_p1.read()));
}

void cordic::thread_r_V_fu_143_p2() {
    r_V_fu_143_p2 = (!p_Val2_3_reg_68.read().is_01() || !sh_assign_3_cast_fu_139_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(p_Val2_3_reg_68.read()) >> (unsigned short)sh_assign_3_cast_fu_139_p1.read().to_uint();
}

void cordic::thread_r_V_s_fu_204_p2() {
    r_V_s_fu_204_p2 = (!p_Val2_15_cast_fu_200_p1.read().is_01() || !p_Val2_4_reg_56.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_15_cast_fu_200_p1.read()) + sc_biguint<32>(p_Val2_4_reg_56.read()));
}

void cordic::thread_sh_assign_3_cast_fu_139_p1() {
    sh_assign_3_cast_fu_139_p1 = esl_zext<32,7>(step_1_reg_80.read());
}

void cordic::thread_step_fu_128_p2() {
    step_fu_128_p2 = (!step_1_reg_80.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_bigint<7>(step_1_reg_80.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void cordic::thread_t_V_1_fu_172_p2() {
    t_V_1_fu_172_p2 = (!r_V_fu_143_p2.read().is_01() || !p_Val2_s_reg_44.read().is_01())? sc_lv<32>(): (sc_bigint<32>(r_V_fu_143_p2.read()) + sc_biguint<32>(p_Val2_s_reg_44.read()));
}

void cordic::thread_t_V_fu_149_p2() {
    t_V_fu_149_p2 = (!p_Val2_s_reg_44.read().is_01() || !r_V_fu_143_p2.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_s_reg_44.read()) - sc_biguint<32>(r_V_fu_143_p2.read()));
}

void cordic::thread_tmp_1_fu_167_p1() {
    tmp_1_fu_167_p1 = esl_zext<64,7>(step_1_reg_80.read());
}

void cordic::thread_tmp_fu_116_p2() {
    tmp_fu_116_p2 = (!theta_V.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(theta_V.read() == ap_const_lv32_0);
}

void cordic::thread_tmp_s_fu_134_p2() {
    tmp_s_fu_134_p2 = (!p_Val2_4_reg_56.read().is_01() || !theta_V.read().is_01())? sc_lv<1>(): (sc_bigint<32>(p_Val2_4_reg_56.read()) < sc_bigint<32>(theta_V.read()));
}

void cordic::thread_x_V_2_fu_184_p3() {
    x_V_2_fu_184_p3 = (!tmp_s_fu_134_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_s_fu_134_p2.read()[0].to_bool())? t_V_fu_149_p2.read(): t_V_1_fu_172_p2.read());
}

void cordic::thread_y_V_1_fu_178_p2() {
    y_V_1_fu_178_p2 = (!p_Val2_3_reg_68.read().is_01() || !r_V_1_fu_155_p2.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_3_reg_68.read()) - sc_biguint<32>(r_V_1_fu_155_p2.read()));
}

void cordic::thread_y_V_2_fu_192_p3() {
    y_V_2_fu_192_p3 = (!tmp_s_fu_134_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_s_fu_134_p2.read()[0].to_bool())? y_V_fu_161_p2.read(): y_V_1_fu_178_p2.read());
}

void cordic::thread_y_V_fu_161_p2() {
    y_V_fu_161_p2 = (!p_Val2_3_reg_68.read().is_01() || !r_V_1_fu_155_p2.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_3_reg_68.read()) + sc_biguint<32>(r_V_1_fu_155_p2.read()));
}

void cordic::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_116_p2.read()))) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_116_p2.read()))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!esl_seteq<1,1,1>(exitcond1_fu_122_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}
}

