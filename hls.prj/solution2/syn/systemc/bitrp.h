// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _bitrp_HH_
#define _bitrp_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct bitrp : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > xreal_V_address0;
    sc_out< sc_logic > xreal_V_ce0;
    sc_out< sc_logic > xreal_V_we0;
    sc_out< sc_lv<32> > xreal_V_d0;
    sc_in< sc_lv<32> > xreal_V_q0;
    sc_out< sc_lv<10> > xreal_V_address1;
    sc_out< sc_logic > xreal_V_ce1;
    sc_in< sc_lv<32> > xreal_V_q1;
    sc_out< sc_lv<10> > ximag_V_address0;
    sc_out< sc_logic > ximag_V_ce0;
    sc_out< sc_logic > ximag_V_we0;
    sc_out< sc_lv<32> > ximag_V_d0;
    sc_in< sc_lv<32> > ximag_V_q0;
    sc_out< sc_lv<10> > ximag_V_address1;
    sc_out< sc_logic > ximag_V_ce1;
    sc_in< sc_lv<32> > ximag_V_q1;


    // Module declarations
    bitrp(sc_module_name name);
    SC_HAS_PROCESS(bitrp);

    ~bitrp();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<32> > a_3_cast_fu_128_p1;
    sc_signal< sc_lv<32> > a_3_cast_reg_203;
    sc_signal< sc_lv<11> > i_1_fu_138_p2;
    sc_signal< sc_lv<11> > i_1_reg_212;
    sc_signal< sc_lv<4> > j_2_fu_150_p2;
    sc_signal< sc_lv<32> > b_1_fu_164_p3;
    sc_signal< sc_lv<1> > exitcond2_fu_144_p2;
    sc_signal< sc_lv<32> > a_1_fu_182_p1;
    sc_signal< sc_lv<10> > xreal_V_addr_reg_239;
    sc_signal< sc_lv<1> > tmp_fu_186_p2;
    sc_signal< sc_lv<10> > xreal_V_addr_4_reg_245;
    sc_signal< sc_lv<10> > ximag_V_addr_reg_250;
    sc_signal< sc_lv<10> > ximag_V_addr_4_reg_256;
    sc_signal< sc_lv<32> > t_V_reg_261;
    sc_signal< sc_lv<32> > t_V_62_reg_266;
    sc_signal< sc_lv<11> > a_3_reg_82;
    sc_signal< sc_lv<32> > a_reg_96;
    sc_signal< sc_lv<1> > exitcond_fu_132_p2;
    sc_signal< sc_lv<4> > j_reg_105;
    sc_signal< sc_lv<32> > b_reg_116;
    sc_signal< sc_lv<64> > tmp_20_fu_191_p1;
    sc_signal< sc_lv<64> > tmp_21_fu_197_p1;
    sc_signal< sc_lv<31> > tmp_115_fu_156_p1;
    sc_signal< sc_lv<1> > tmp_116_fu_160_p1;
    sc_signal< sc_lv<31> > tmp_s_fu_172_p4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<3> ap_ST_st4_fsm_3;
    static const sc_lv<3> ap_ST_st5_fsm_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_1F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_1_fu_182_p1();
    void thread_a_3_cast_fu_128_p1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_1_fu_164_p3();
    void thread_exitcond2_fu_144_p2();
    void thread_exitcond_fu_132_p2();
    void thread_i_1_fu_138_p2();
    void thread_j_2_fu_150_p2();
    void thread_tmp_115_fu_156_p1();
    void thread_tmp_116_fu_160_p1();
    void thread_tmp_20_fu_191_p1();
    void thread_tmp_21_fu_197_p1();
    void thread_tmp_fu_186_p2();
    void thread_tmp_s_fu_172_p4();
    void thread_ximag_V_address0();
    void thread_ximag_V_address1();
    void thread_ximag_V_ce0();
    void thread_ximag_V_ce1();
    void thread_ximag_V_d0();
    void thread_ximag_V_we0();
    void thread_xreal_V_address0();
    void thread_xreal_V_address1();
    void thread_xreal_V_ce0();
    void thread_xreal_V_ce1();
    void thread_xreal_V_d0();
    void thread_xreal_V_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
