// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _cordic_HH_
#define _cordic_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cal_mag_phase_cordic_ctab_V.h"

namespace ap_rtl {

struct cordic : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > theta_V;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;


    // Module declarations
    cordic(sc_module_name name);
    SC_HAS_PROCESS(cordic);

    ~cordic();

    sc_trace_file* mVcdFile;

    cal_mag_phase_cordic_ctab_V* cordic_ctab_V_U;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<6> > cordic_ctab_V_address0;
    sc_signal< sc_logic > cordic_ctab_V_ce0;
    sc_signal< sc_lv<20> > cordic_ctab_V_q0;
    sc_signal< sc_lv<7> > step_fu_128_p2;
    sc_signal< sc_lv<7> > step_reg_246;
    sc_signal< sc_lv<1> > tmp_s_fu_134_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_251;
    sc_signal< sc_lv<1> > exitcond1_fu_122_p2;
    sc_signal< sc_lv<32> > x_V_2_fu_184_p3;
    sc_signal< sc_lv<32> > x_V_2_reg_261;
    sc_signal< sc_lv<32> > y_V_2_fu_192_p3;
    sc_signal< sc_lv<32> > y_V_2_reg_266;
    sc_signal< sc_lv<32> > current_angle_V_fu_216_p3;
    sc_signal< sc_lv<32> > p_Val2_s_reg_44;
    sc_signal< sc_lv<1> > tmp_fu_116_p2;
    sc_signal< sc_lv<32> > p_Val2_4_reg_56;
    sc_signal< sc_lv<32> > p_Val2_3_reg_68;
    sc_signal< sc_lv<7> > step_1_reg_80;
    sc_signal< sc_lv<32> > UnifiedRetVal1_reg_91;
    sc_signal< sc_lv<32> > UnifiedRetVal_1_reg_103;
    sc_signal< sc_lv<64> > tmp_1_fu_167_p1;
    sc_signal< sc_lv<32> > sh_assign_3_cast_fu_139_p1;
    sc_signal< sc_lv<32> > r_V_fu_143_p2;
    sc_signal< sc_lv<32> > r_V_1_fu_155_p2;
    sc_signal< sc_lv<32> > t_V_fu_149_p2;
    sc_signal< sc_lv<32> > t_V_1_fu_172_p2;
    sc_signal< sc_lv<32> > y_V_fu_161_p2;
    sc_signal< sc_lv<32> > y_V_1_fu_178_p2;
    sc_signal< sc_lv<32> > p_Val2_15_cast_fu_200_p1;
    sc_signal< sc_lv<32> > r_V_s_fu_204_p2;
    sc_signal< sc_lv<32> > r_V_3_fu_210_p2;
    sc_signal< sc_lv<32> > ap_return_0_preg;
    sc_signal< sc_lv<32> > ap_return_1_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<2> ap_ST_st3_fsm_2;
    static const sc_lv<2> ap_ST_st4_fsm_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_9B74E;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_100000;
    static const sc_lv<7> ap_const_lv7_41;
    static const sc_lv<7> ap_const_lv7_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_cordic_ctab_V_address0();
    void thread_cordic_ctab_V_ce0();
    void thread_current_angle_V_fu_216_p3();
    void thread_exitcond1_fu_122_p2();
    void thread_p_Val2_15_cast_fu_200_p1();
    void thread_r_V_1_fu_155_p2();
    void thread_r_V_3_fu_210_p2();
    void thread_r_V_fu_143_p2();
    void thread_r_V_s_fu_204_p2();
    void thread_sh_assign_3_cast_fu_139_p1();
    void thread_step_fu_128_p2();
    void thread_t_V_1_fu_172_p2();
    void thread_t_V_fu_149_p2();
    void thread_tmp_1_fu_167_p1();
    void thread_tmp_fu_116_p2();
    void thread_tmp_s_fu_134_p2();
    void thread_x_V_2_fu_184_p3();
    void thread_y_V_1_fu_178_p2();
    void thread_y_V_2_fu_192_p3();
    void thread_y_V_fu_161_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
